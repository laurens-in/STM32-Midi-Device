
STM-Midi-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b038  0800b038  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b03c  0800b03c  0001b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005358  20000080  0800b0c0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053d8  0800b0c0  000253d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022bc5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000527e  00000000  00000000  00042cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00047f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d7  00000000  00000000  000499b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000091cc  00000000  00000000  0004ae87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f70b  00000000  00000000  00054053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e68ba  00000000  00000000  0007375e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fb0  00000000  00000000  0015a018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00160fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aeb0 	.word	0x0800aeb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800aeb0 	.word	0x0800aeb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fe2e 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f828 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8ca 	bl	80006c0 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f898 	bl	8000660 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  tusb_init();
 8000530:	f00a fac8 	bl	800aac4 <tusb_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f002 ff7a 	bl	800342c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <main+0x44>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x48>)
 800053e:	f002 ffbf 	bl	80034c0 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <main+0x4c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  usbDeviceTaskHandle = osThreadNew(usb_device_task, NULL, &usb_device_task_attr);
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x50>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x54>)
 800054e:	f002 ffb7 	bl	80034c0 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <main+0x58>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f002 ff8c 	bl	8003474 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x40>
 800055e:	bf00      	nop
 8000560:	0800af28 	.word	0x0800af28
 8000564:	08000c71 	.word	0x08000c71
 8000568:	200005a8 	.word	0x200005a8
 800056c:	0800af4c 	.word	0x0800af4c
 8000570:	08000c55 	.word	0x08000c55
 8000574:	200005ac 	.word	0x200005ac

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00a fc57 	bl	800ae3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <SystemClock_Config+0xe0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <SystemClock_Config+0xe0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <SystemClock_Config+0xe0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xe4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a26      	ldr	r2, [pc, #152]	; (800065c <SystemClock_Config+0xe4>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xe4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d4:	2303      	movs	r3, #3
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f4:	2348      	movs	r3, #72	; 0x48
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe9d 	bl	8002348 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000614:	f000 fb46 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fa13 	bl	8001a60 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000640:	f000 fb30 	bl	8000ca4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2000      	movs	r0, #0
 800064a:	f001 faef 	bl	8001c2c <HAL_RCC_MCOConfig>
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800066a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800066e:	2206      	movs	r2, #6
 8000670:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000674:	2202      	movs	r2, #2
 8000676:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000680:	2202      	movs	r2, #2
 8000682:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006aa:	f001 f891 	bl	80017d0 <HAL_PCD_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80006b4:	f000 faf6 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
 80006da:	4bb1      	ldr	r3, [pc, #708]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4ab0      	ldr	r2, [pc, #704]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4bae      	ldr	r3, [pc, #696]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	623b      	str	r3, [r7, #32]
 80006f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	4baa      	ldr	r3, [pc, #680]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4aa9      	ldr	r2, [pc, #676]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4ba7      	ldr	r3, [pc, #668]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	4ba3      	ldr	r3, [pc, #652]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4aa2      	ldr	r2, [pc, #648]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000718:	f043 0320 	orr.w	r3, r3, #32
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4ba0      	ldr	r3, [pc, #640]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0320 	and.w	r3, r3, #32
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	4b9c      	ldr	r3, [pc, #624]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a9b      	ldr	r2, [pc, #620]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b99      	ldr	r3, [pc, #612]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b95      	ldr	r3, [pc, #596]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a94      	ldr	r2, [pc, #592]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b92      	ldr	r3, [pc, #584]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b8e      	ldr	r3, [pc, #568]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a8d      	ldr	r2, [pc, #564]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b8b      	ldr	r3, [pc, #556]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b87      	ldr	r3, [pc, #540]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a86      	ldr	r2, [pc, #536]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b84      	ldr	r3, [pc, #528]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a7f      	ldr	r2, [pc, #508]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b7d      	ldr	r3, [pc, #500]	; (80009a0 <MX_GPIO_Init+0x2e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210f      	movs	r1, #15
 80007ba:	487a      	ldr	r0, [pc, #488]	; (80009a4 <MX_GPIO_Init+0x2e4>)
 80007bc:	f000 ffbc 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80007c6:	4878      	ldr	r0, [pc, #480]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 80007c8:	f000 ffb6 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d2:	4876      	ldr	r0, [pc, #472]	; (80009ac <MX_GPIO_Init+0x2ec>)
 80007d4:	f000 ffb0 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	4874      	ldr	r0, [pc, #464]	; (80009b0 <MX_GPIO_Init+0x2f0>)
 80007e0:	f000 ffaa 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 80007e4:	230f      	movs	r3, #15
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007e8:	2311      	movs	r3, #17
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	486a      	ldr	r0, [pc, #424]	; (80009a4 <MX_GPIO_Init+0x2e4>)
 80007fc:	f000 fe08 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000800:	2310      	movs	r3, #16
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000810:	2308      	movs	r3, #8
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4862      	ldr	r0, [pc, #392]	; (80009a4 <MX_GPIO_Init+0x2e4>)
 800081c:	f000 fdf8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_Pin */
  GPIO_InitStruct.Pin = A0_Pin;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000830:	230c      	movs	r3, #12
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	485b      	ldr	r0, [pc, #364]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 800083c:	f000 fde8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000840:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4853      	ldr	r0, [pc, #332]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 800085a:	f000 fdd9 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 800085e:	23c0      	movs	r3, #192	; 0xc0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800086e:	2309      	movs	r3, #9
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	484b      	ldr	r0, [pc, #300]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 800087a:	f000 fdc9 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800087e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000890:	230a      	movs	r3, #10
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4843      	ldr	r0, [pc, #268]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 800089c:	f000 fdb8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80008a0:	2304      	movs	r3, #4
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008b0:	2308      	movs	r3, #8
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	483e      	ldr	r0, [pc, #248]	; (80009b4 <MX_GPIO_Init+0x2f4>)
 80008bc:	f000 fda8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80008c0:	230c      	movs	r3, #12
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d0:	2307      	movs	r3, #7
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4837      	ldr	r0, [pc, #220]	; (80009b8 <MX_GPIO_Init+0x2f8>)
 80008dc:	f000 fd98 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	482f      	ldr	r0, [pc, #188]	; (80009b8 <MX_GPIO_Init+0x2f8>)
 80008fc:	f000 fd88 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 8000900:	2302      	movs	r3, #2
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000910:	2308      	movs	r3, #8
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4828      	ldr	r0, [pc, #160]	; (80009bc <MX_GPIO_Init+0x2fc>)
 800091c:	f000 fd78 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000930:	2309      	movs	r3, #9
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <MX_GPIO_Init+0x2fc>)
 800093c:	f000 fd68 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8000940:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x2e8>)
 8000958:	f000 fd5a 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|CODEC_INT_Pin|CTP_INT_Pin;
 800095c:	2327      	movs	r3, #39	; 0x27
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x2f0>)
 8000972:	f000 fd4d 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000976:	f64f 7380 	movw	r3, #65408	; 0xff80
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000988:	230c      	movs	r3, #12
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x2e4>)
 8000994:	f000 fd3c 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SCL_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
 800099e:	e00f      	b.n	80009c0 <MX_GPIO_Init+0x300>
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40021400 	.word	0x40021400
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40021800 	.word	0x40021800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009cc:	2304      	movs	r3, #4
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4885      	ldr	r0, [pc, #532]	; (8000bec <MX_GPIO_Init+0x52c>)
 80009d8:	f000 fd1a 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 80009dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ee:	2305      	movs	r3, #5
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	487c      	ldr	r0, [pc, #496]	; (8000bec <MX_GPIO_Init+0x52c>)
 80009fa:	f000 fd09 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_I2S3_SCK_Pin CODEC_I2S3ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_SCK_Pin|CODEC_I2S3ext_SD_Pin;
 80009fe:	f241 0310 	movw	r3, #4112	; 0x1010
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4874      	ldr	r0, [pc, #464]	; (8000bec <MX_GPIO_Init+0x52c>)
 8000a1c:	f000 fcf8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin FMC_NOE_Pin
                           FMC_NWE_Pin FMC_NE1_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a20:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a32:	230c      	movs	r3, #12
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	486c      	ldr	r0, [pc, #432]	; (8000bf0 <MX_GPIO_Init+0x530>)
 8000a3e:	f000 fce7 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4865      	ldr	r0, [pc, #404]	; (8000bf0 <MX_GPIO_Init+0x530>)
 8000a5c:	f000 fcd8 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000a60:	2390      	movs	r3, #144	; 0x90
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4860      	ldr	r0, [pc, #384]	; (8000bf4 <MX_GPIO_Init+0x534>)
 8000a74:	f000 fccc 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a88:	230a      	movs	r3, #10
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4858      	ldr	r0, [pc, #352]	; (8000bf4 <MX_GPIO_Init+0x534>)
 8000a94:	f000 fcbc 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9e:	2311      	movs	r3, #17
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4850      	ldr	r0, [pc, #320]	; (8000bf4 <MX_GPIO_Init+0x534>)
 8000ab2:	f000 fcad 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_MCK_Pin;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4849      	ldr	r0, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x538>)
 8000ad2:	f000 fc9d 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D0_Pin uSD_D1_Pin uSD_D2_Pin uSD_D3_Pin
                           uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 8000ad6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4841      	ldr	r0, [pc, #260]	; (8000bf8 <MX_GPIO_Init+0x538>)
 8000af4:	f000 fc8c 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4839      	ldr	r0, [pc, #228]	; (8000bfc <MX_GPIO_Init+0x53c>)
 8000b16:	f000 fc7b 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0x530>)
 8000b36:	f000 fc6b 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0x530>)
 8000b4e:	f000 fc5f 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_SD_Pin;
 8000b52:	2320      	movs	r3, #32
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b62:	2306      	movs	r3, #6
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_GPIO_Init+0x52c>)
 8000b6e:	f000 fc4f 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b76:	2312      	movs	r3, #18
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b82:	2304      	movs	r3, #4
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <MX_GPIO_Init+0x52c>)
 8000b8e:	f000 fc3f 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ba4:	2309      	movs	r3, #9
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <MX_GPIO_Init+0x52c>)
 8000bb0:	f000 fc2e 	bl	8001410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	2006      	movs	r0, #6
 8000bba:	f000 fbff 	bl	80013bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bbe:	2006      	movs	r0, #6
 8000bc0:	f000 fc18 	bl	80013f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2007      	movs	r0, #7
 8000bca:	f000 fbf7 	bl	80013bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bce:	2007      	movs	r0, #7
 8000bd0:	f000 fc10 	bl	80013f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2028      	movs	r0, #40	; 0x28
 8000bda:	f000 fbef 	bl	80013bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f000 fc08 	bl	80013f4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be4:	bf00      	nop
 8000be6:	3738      	adds	r7, #56	; 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020c00 	.word	0x40020c00
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// DOCUMENTATION: EXTI Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == JOY_UP_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d103      	bne.n	8000c18 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED1_Pin); // Toggle The Output (LED) Pin
 8000c10:	2101      	movs	r1, #1
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c14:	f000 fda9 	bl	800176a <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_DOWN_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d103      	bne.n	8000c26 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED2_Pin); // Toggle The Output (LED) Pin
 8000c1e:	2102      	movs	r1, #2
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c22:	f000 fda2 	bl	800176a <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_LEFT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c2c:	d103      	bne.n	8000c36 <HAL_GPIO_EXTI_Callback+0x36>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED3_Pin); // Toggle The Output (LED) Pin
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c32:	f000 fd9a 	bl	800176a <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_RIGHT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3c:	d103      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0x46>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED4_Pin); // Toggle The Output (LED) Pin
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c42:	f000 fd92 	bl	800176a <HAL_GPIO_TogglePin>
    }
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <usb_device_task>:

static void usb_device_task(void *param) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  (void) param;

  // init device stack on configured roothub port
  // This should be called after scheduler/kernel is started.
  // Otherwise it could cause kernel issue since USB IRQ handler does use RTOS queue API.
  tud_init(BOARD_TUD_RHPORT);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f006 fd1b 	bl	8007698 <tud_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000c62:	2100      	movs	r1, #0
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c68:	f006 fe58 	bl	800791c <tud_task_ext>
}
 8000c6c:	bf00      	nop

  // RTOS forever loop
  while (1) {
    // put this thread to waiting state until there is new events
    tud_task();
 8000c6e:	e7f8      	b.n	8000c62 <usb_device_task+0xe>

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f002 fcb3 	bl	80035e4 <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c92:	f000 fa97 	bl	80011c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_MspInit+0x54>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_MspInit+0x54>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_MspInit+0x54>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_MspInit+0x54>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	f000 fb61 	bl	80013bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b098      	sub	sp, #96	; 0x60
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	223c      	movs	r2, #60	; 0x3c
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f00a f886 	bl	800ae3a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d36:	d148      	bne.n	8000dca <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 f931 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000d50:	f7ff ffa8 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTGFS_DM_Pin|GPIO_PIN_12;
 8000d70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d82:	230a      	movs	r3, #10
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_PCD_MspInit+0xd0>)
 8000d8e:	f000 fb3f 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_PCD_MspInit+0xcc>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	2043      	movs	r0, #67	; 0x43
 8000dc0:	f000 fafc 	bl	80013bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000dc4:	2043      	movs	r0, #67	; 0x43
 8000dc6:	f000 fb15 	bl	80013f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3760      	adds	r7, #96	; 0x60
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_InitTick+0xd0>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <HAL_InitTick+0xd0>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_InitTick+0xd0>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f898 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e18:	f001 f882 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8000e1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_InitTick+0xd4>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_InitTick+0xdc>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e54:	f001 fcfc 	bl	8002850 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11b      	bne.n	8000e9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e68:	f001 fd4c 	bl	8002904 <HAL_TIM_Base_Start_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d111      	bne.n	8000e9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f000 faba 	bl	80013f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d808      	bhi.n	8000e98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 fa96 	bl	80013bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_InitTick+0xe0>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e002      	b.n	8000e9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	200005b0 	.word	0x200005b0
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	20000014 	.word	0x20000014

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 fc55 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 fc4e 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f0e:	f001 fd69 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200005b0 	.word	0x200005b0

08000f1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8000f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f24:	f000 fc3c 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 8000f28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f2c:	f000 fc38 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f009 fc47 	bl	800a7cc <dcd_int_handler>
	return;
 8000f3e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <board_usb_get_serial>:
  board_led_write(false);
}

// Get USB Serial number string from unique ID if available. Return number of character.
// Input is string descriptor from index 1 (index 0 is type + len)
static inline size_t board_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b091      	sub	sp, #68	; 0x44
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  if ( board_get_unique_id ) {
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <board_usb_get_serial+0xc4>)
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <board_usb_get_serial+0x20>
    uid_len = board_get_unique_id(uid, sizeof(uid));
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f3af 8000 	nop.w
 8000f84:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000f86:	e00b      	b.n	8000fa0 <board_usb_get_serial+0x38>
  }else {
    // fixed serial string is 01234567889ABCDEF
    uint32_t* uid32 = (uint32_t*) (uintptr_t) uid;
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
    uid32[0] = 0x67452301;
 8000f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <board_usb_get_serial+0xc8>)
 8000f92:	601a      	str	r2, [r3, #0]
    uid32[1] = 0xEFCDAB89;
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	3304      	adds	r3, #4
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <board_usb_get_serial+0xcc>)
 8000f9a:	601a      	str	r2, [r3, #0]
    uid_len = 8;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d902      	bls.n	8000fb0 <board_usb_get_serial+0x48>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	085b      	lsrs	r3, r3, #1
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c

  for ( size_t i = 0; i < uid_len; i++ ) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb4:	e030      	b.n	8001018 <board_usb_get_serial+0xb0>
    for ( size_t j = 0; j < 2; j++ ) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fba:	e027      	b.n	800100c <board_usb_get_serial+0xa4>
      const char nibble_to_hex[16] = {
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <board_usb_get_serial+0xd0>)
 8000fbe:	f107 040c 	add.w	r4, r7, #12
 8000fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 8000fc8:	f107 021c 	add.w	r2, r7, #28
 8000fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa42 f303 	asr.w	r3, r2, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8000fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fea:	3340      	adds	r3, #64	; 0x40
 8000fec:	443b      	add	r3, r7
 8000fee:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8000ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff4:	005a      	lsls	r2, r3, #1
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	b28a      	uxth	r2, r1
 8001004:	801a      	strh	r2, [r3, #0]
    for ( size_t j = 0; j < 2; j++ ) {
 8001006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001008:	3301      	adds	r3, #1
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	2b01      	cmp	r3, #1
 8001010:	d9d4      	bls.n	8000fbc <board_usb_get_serial+0x54>
  for ( size_t i = 0; i < uid_len; i++ ) {
 8001012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001014:	3301      	adds	r3, #1
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
 8001018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800101a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101c:	429a      	cmp	r2, r3
 800101e:	d3ca      	bcc.n	8000fb6 <board_usb_get_serial+0x4e>
    }
  }

  return 2 * uid_len;
 8001020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001022:	005b      	lsls	r3, r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3744      	adds	r7, #68	; 0x44
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	00000000 	.word	0x00000000
 8001030:	67452301 	.word	0x67452301
 8001034:	efcdab89 	.word	0xefcdab89
 8001038:	0800aedc 	.word	0x0800aedc

0800103c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <tud_descriptor_device_cb+0x10>)
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	0800af88 	.word	0x0800af88

08001050 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	0800af9c 	.word	0x0800af9c

0800106c <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <tud_descriptor_string_cb+0x1c>
 8001082:	2b03      	cmp	r3, #3
 8001084:	d009      	beq.n	800109a <tud_descriptor_string_cb+0x2e>
 8001086:	e00f      	b.n	80010a8 <tud_descriptor_string_cb+0x3c>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <tud_descriptor_string_cb+0xb4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <tud_descriptor_string_cb+0xb8>)
 8001092:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
      break;
 8001098:	e031      	b.n	80010fe <tud_descriptor_string_cb+0x92>

    case STRID_SERIAL:
      chr_count = board_usb_get_serial(_desc_str + 1, 32);
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <tud_descriptor_string_cb+0xbc>)
 800109c:	2120      	movs	r1, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff62 	bl	8000f68 <board_usb_get_serial>
 80010a4:	6178      	str	r0, [r7, #20]
      break;
 80010a6:	e02a      	b.n	80010fe <tud_descriptor_string_cb+0x92>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d901      	bls.n	80010b2 <tud_descriptor_string_cb+0x46>
 80010ae:	2300      	movs	r3, #0
 80010b0:	e031      	b.n	8001116 <tud_descriptor_string_cb+0xaa>

      const char *str = string_desc_arr[index];
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <tud_descriptor_string_cb+0xb4>)
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff f8a7 	bl	8000210 <strlen>
 80010c2:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 80010c4:	2320      	movs	r3, #32
 80010c6:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d901      	bls.n	80010d4 <tud_descriptor_string_cb+0x68>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	e00c      	b.n	80010f4 <tud_descriptor_string_cb+0x88>
        _desc_str[1 + i] = str[i];
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4413      	add	r3, r2
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b291      	uxth	r1, r2
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <tud_descriptor_string_cb+0xb8>)
 80010ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3301      	adds	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3ee      	bcc.n	80010da <tud_descriptor_string_cb+0x6e>
      }
      break;
 80010fc:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	b29b      	uxth	r3, r3
 8001102:	3301      	adds	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b29b      	uxth	r3, r3
 800110a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <tud_descriptor_string_cb+0xb8>)
 8001112:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <tud_descriptor_string_cb+0xb8>)
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000004 	.word	0x20000004
 8001124:	200005f8 	.word	0x200005f8
 8001128:	200005fa 	.word	0x200005fa

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001156:	f7ff fef5 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f009 fe77 	bl	800ae4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff f9dd 	bl	800051c <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001164:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001170:	0800b040 	.word	0x0800b040
  ldr r2, =_sbss
 8001174:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001178:	200053d8 	.word	0x200053d8

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f8fc 	bl	80013a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f7ff fe14 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fd7c 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000018 	.word	0x20000018
 80011e8:	2000063c 	.word	0x2000063c

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000063c 	.word	0x2000063c

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000018 	.word	0x20000018

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff4c 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ce:	f7ff ff61 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f7ff ffb1 	bl	8001340 <NVIC_EncodePriority>
 80013de:	4602      	mov	r2, r0
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff80 	bl	80012ec <__NVIC_SetPriority>
}
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff54 	bl	80012b0 <__NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e165      	b.n	80016f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8154 	bne.w	80016f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80ae 	beq.w	80016f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_GPIO_Init+0x300>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <HAL_GPIO_Init+0x300>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <HAL_GPIO_Init+0x300>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_GPIO_Init+0x304>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4f      	ldr	r2, [pc, #316]	; (8001718 <HAL_GPIO_Init+0x308>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4e      	ldr	r2, [pc, #312]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4d      	ldr	r2, [pc, #308]	; (8001720 <HAL_GPIO_Init+0x310>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_GPIO_Init+0x314>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x20e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <HAL_GPIO_Init+0x318>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x20a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_GPIO_Init+0x31c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x206>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x320>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x202>
 800160e:	2306      	movs	r3, #6
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x21c>
 8001612:	2307      	movs	r3, #7
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x21c>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x21c>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x21c>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x21c>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x21c>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x21c>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_GPIO_Init+0x304>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_GPIO_Init+0x324>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a31      	ldr	r2, [pc, #196]	; (8001734 <HAL_GPIO_Init+0x324>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x324>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x324>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_GPIO_Init+0x324>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_GPIO_Init+0x324>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x324>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x324>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae96 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021400 	.word	0x40021400
 8001730:	40021800 	.word	0x40021800
 8001734:	40013c00 	.word	0x40013c00

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	619a      	str	r2, [r3, #24]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177c:	887a      	ldrh	r2, [r7, #2]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	041a      	lsls	r2, r3, #16
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43d9      	mvns	r1, r3
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	400b      	ands	r3, r1
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa1e 	bl	8000c00 <HAL_GPIO_EXTI_Callback>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	b08f      	sub	sp, #60	; 0x3c
 80017d4:	af0a      	add	r7, sp, #40	; 0x28
 80017d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e116      	b.n	8001a10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d106      	bne.n	8001802 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fa83 	bl	8000d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fb24 	bl	8002e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	687e      	ldr	r6, [r7, #4]
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001840:	e885 0003 	stmia.w	r5, {r0, r1}
 8001844:	1d33      	adds	r3, r6, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f001 faaf 	bl	8002dac <USB_CoreInit>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0d7      	b.n	8001a10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fb12 	bl	8002e90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e04a      	b.n	8001908 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333d      	adds	r3, #61	; 0x3d
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	333c      	adds	r3, #60	; 0x3c
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b298      	uxth	r0, r3
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3344      	adds	r3, #68	; 0x44
 80018ae:	4602      	mov	r2, r0
 80018b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3340      	adds	r3, #64	; 0x40
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3348      	adds	r3, #72	; 0x48
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	334c      	adds	r3, #76	; 0x4c
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3354      	adds	r3, #84	; 0x54
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3af      	bcc.n	8001872 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e044      	b.n	80019a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3b5      	bcc.n	8001918 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f001 faaa 	bl	8002f28 <USB_DevInit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e014      	b.n	8001a10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f80a 	bl	8001a18 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fc68 	bl	80032de <USB_DevDisconnect>

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	f043 0303 	orr.w	r3, r3, #3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fb4c 	bl	80011ec <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff fb48 	bl	80011ec <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f889 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8e8 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	0800af70 	.word	0x0800af70
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000014 	.word	0x20000014

08001c2c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d129      	bne.n	8001c92 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <HAL_RCC_MCOConfig+0xc8>)
 8001c78:	f7ff fbca 	bl	8001410 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	4919      	ldr	r1, [pc, #100]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001c90:	e029      	b.n	8001ce6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <HAL_RCC_MCOConfig+0xcc>)
 8001ccc:	f7ff fba0 	bl	8001410 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	00d9      	lsls	r1, r3, #3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_MCOConfig+0xc4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
}
 8001ce6:	bf00      	nop
 8001ce8:	3730      	adds	r7, #48	; 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020800 	.word	0x40020800

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b094      	sub	sp, #80	; 0x50
 8001d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
 8001d08:	2300      	movs	r3, #0
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d14:	4b79      	ldr	r3, [pc, #484]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d00d      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x40>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	f200 80e1 	bhi.w	8001ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2e:	e0db      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d34:	e0db      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d3a:	e0d8      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	2200      	movs	r2, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d6e:	4622      	mov	r2, r4
 8001d70:	462b      	mov	r3, r5
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	0159      	lsls	r1, r3, #5
 8001d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d80:	0150      	lsls	r0, r2, #5
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4621      	mov	r1, r4
 8001d88:	1a51      	subs	r1, r2, r1
 8001d8a:	6139      	str	r1, [r7, #16]
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da0:	4659      	mov	r1, fp
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	4651      	mov	r1, sl
 8001da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001daa:	4651      	mov	r1, sl
 8001dac:	018a      	lsls	r2, r1, #6
 8001dae:	4651      	mov	r1, sl
 8001db0:	ebb2 0801 	subs.w	r8, r2, r1
 8001db4:	4659      	mov	r1, fp
 8001db6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dce:	4690      	mov	r8, r2
 8001dd0:	4699      	mov	r9, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	eb18 0303 	adds.w	r3, r8, r3
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	462b      	mov	r3, r5
 8001ddc:	eb49 0303 	adc.w	r3, r9, r3
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dee:	4629      	mov	r1, r5
 8001df0:	024b      	lsls	r3, r1, #9
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001df8:	4621      	mov	r1, r4
 8001dfa:	024a      	lsls	r2, r1, #9
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e02:	2200      	movs	r2, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0c:	f7fe fa08 	bl	8000220 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e18:	e058      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	4611      	mov	r1, r2
 8001e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e34:	4642      	mov	r2, r8
 8001e36:	464b      	mov	r3, r9
 8001e38:	f04f 0000 	mov.w	r0, #0
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	0159      	lsls	r1, r3, #5
 8001e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e46:	0150      	lsls	r0, r2, #5
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e52:	4649      	mov	r1, r9
 8001e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e70:	eb63 050b 	sbc.w	r5, r3, fp
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	00eb      	lsls	r3, r5, #3
 8001e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e82:	00e2      	lsls	r2, r4, #3
 8001e84:	4614      	mov	r4, r2
 8001e86:	461d      	mov	r5, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	18e3      	adds	r3, r4, r3
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	464b      	mov	r3, r9
 8001e90:	eb45 0303 	adc.w	r3, r5, r3
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	028b      	lsls	r3, r1, #10
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eac:	4621      	mov	r1, r4
 8001eae:	028a      	lsls	r2, r1, #10
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	61fa      	str	r2, [r7, #28]
 8001ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec0:	f7fe f9ae 	bl	8000220 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3750      	adds	r7, #80	; 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	0800af80 	.word	0x0800af80

08001f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCC_GetClockConfig+0x60>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0207 	and.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001fcc:	4b87      	ldr	r3, [pc, #540]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4984      	ldr	r1, [pc, #528]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001fea:	2301      	movs	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002000:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4978      	ldr	r1, [pc, #480]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8083 	beq.w	8002130 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a6e      	ldr	r2, [pc, #440]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002052:	f7ff f8cb 	bl	80011ec <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff f8c7 	bl	80011ec <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e162      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002078:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02f      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	429a      	cmp	r2, r3
 8002094:	d028      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002096:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a0:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d114      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff f895 	bl	80011ec <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff f891 	bl	80011ec <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e12a      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b43      	ldr	r3, [pc, #268]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020f4:	d10d      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	4938      	ldr	r1, [pc, #224]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
 8002110:	e005      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a35      	ldr	r2, [pc, #212]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002118:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	4930      	ldr	r1, [pc, #192]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800212c:	4313      	orrs	r3, r2
 800212e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002144:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d011      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	491a      	ldr	r1, [pc, #104]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002192:	d101      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002194:	2301      	movs	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d004      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	f040 8091 	bne.w	80022ec <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f80c 	bl	80011ec <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d6:	e013      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021d8:	f7ff f808 	bl	80011ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d90c      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0a3      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42470e40 	.word	0x42470e40
 80021f8:	424711e0 	.word	0x424711e0
 80021fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002200:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e5      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002250:	d00e      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	d019      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800226e:	d110      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	071b      	lsls	r3, r3, #28
 800228a:	492c      	ldr	r1, [pc, #176]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	071b      	lsls	r3, r3, #28
 80022b8:	4920      	ldr	r1, [pc, #128]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022c6:	f7fe ff91 	bl	80011ec <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022ce:	f7fe ff8d 	bl	80011ec <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e028      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	490d      	ldr	r1, [pc, #52]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002320:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	424710d8 	.word	0x424710d8
 8002344:	42470068 	.word	0x42470068

08002348 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e273      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d075      	beq.n	8002452 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00c      	beq.n	800238c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b85      	ldr	r3, [pc, #532]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800237a:	2b08      	cmp	r3, #8
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05b      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d157      	bne.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e24e      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x74>
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6f      	ldr	r2, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6c      	ldr	r2, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a68      	ldr	r2, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fef4 	bl	80011ec <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fef0 	bl	80011ec <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e213      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xc0>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fee0 	bl	80011ec <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fedc 	bl	80011ec <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1ff      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d11c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d116      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1d3      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	e03a      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fe95 	bl	80011ec <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe fe91 	bl	80011ec <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1b4      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4925      	ldr	r1, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e015      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe74 	bl	80011ec <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fe70 	bl	80011ec <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e193      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d036      	beq.n	80025a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fe54 	bl	80011ec <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fe50 	bl	80011ec <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e173      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x200>
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fe3d 	bl	80011ec <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	e00e      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002576:	f7fe fe39 	bl	80011ec <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d907      	bls.n	8002594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e15c      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
 8002588:	40023800 	.word	0x40023800
 800258c:	42470000 	.word	0x42470000
 8002590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ea      	bne.n	8002576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8097 	beq.w	80026dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b83      	ldr	r3, [pc, #524]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b7f      	ldr	r3, [pc, #508]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a7e      	ldr	r2, [pc, #504]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <HAL_RCC_OscConfig+0x47c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x47c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x47c>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fdf9 	bl	80011ec <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe fdf5 	bl	80011ec <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e118      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x47c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x2ea>
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x30c>
 800263a:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5d      	ldr	r2, [pc, #372]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002654:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a59      	ldr	r2, [pc, #356]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	4b57      	ldr	r3, [pc, #348]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a56      	ldr	r2, [pc, #344]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fdba 	bl	80011ec <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe fdb6 	bl	80011ec <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0d7      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ee      	beq.n	800267c <HAL_RCC_OscConfig+0x334>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fda4 	bl	80011ec <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe fda0 	bl	80011ec <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0c1      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ee      	bne.n	80026a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80ad 	beq.w	8002840 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d060      	beq.n	80027b4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d145      	bne.n	8002786 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x480>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fd74 	bl	80011ec <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fd70 	bl	80011ec <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e093      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	3b01      	subs	r3, #1
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	071b      	lsls	r3, r3, #28
 8002752:	491b      	ldr	r1, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x480>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe fd45 	bl	80011ec <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe fd41 	bl	80011ec <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e064      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x41e>
 8002784:	e05c      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x480>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fd2e 	bl	80011ec <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fd2a 	bl	80011ec <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e04d      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x44c>
 80027b2:	e045      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e040      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000
 80027c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d030      	beq.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d129      	bne.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d122      	bne.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002804:	4293      	cmp	r3, r2
 8002806:	d119      	bne.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d10f      	bne.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e041      	b.n	80028e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f839 	bl	80028ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 f9d8 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d001      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04e      	b.n	80029ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d022      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d01d      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_TIM_Base_Start_IT+0xc8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d018      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x80>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d010      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a6:	e007      	b.n	80029b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40010400 	.word	0x40010400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8ee 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8e0 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8f1 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8c4 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8b6 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8c7 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f89a 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f88c 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f89d 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f870 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f862 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f873 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f88c 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f902 	bl	8002d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f838 	bl	8002c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8cc 	bl	8002d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d00f      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <TIM_Base_SetConfig+0x118>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <TIM_Base_SetConfig+0x11c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <TIM_Base_SetConfig+0x120>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d027      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <TIM_Base_SetConfig+0x118>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d023      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <TIM_Base_SetConfig+0x11c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01f      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <TIM_Base_SetConfig+0x120>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01b      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d017      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <TIM_Base_SetConfig+0x128>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <TIM_Base_SetConfig+0x12c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00f      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <TIM_Base_SetConfig+0x130>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <TIM_Base_SetConfig+0x134>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <TIM_Base_SetConfig+0x138>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <TIM_Base_SetConfig+0x13c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0xf8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40010400 	.word	0x40010400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800
 8002d78:	40001800 	.word	0x40001800
 8002d7c:	40001c00 	.word	0x40001c00
 8002d80:	40002000 	.word	0x40002000

08002d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dac:	b084      	sub	sp, #16
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	f107 001c 	add.w	r0, r7, #28
 8002dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d122      	bne.n	8002e0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa9c 	bl	800333c <USB_CoreReset>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e01a      	b.n	8002e40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa90 	bl	800333c <USB_CoreReset>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
 8002e32:	e005      	b.n	8002e40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10b      	bne.n	8002e5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f043 0206 	orr.w	r2, r3, #6
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e6a:	b004      	add	sp, #16
 8002e6c:	4770      	bx	lr

08002e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d115      	bne.n	8002ede <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f7fe f9a0 	bl	8001204 <HAL_Delay>
      ms++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa28 	bl	8003320 <USB_GetMode>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d01e      	beq.n	8002f14 <USB_SetCurrentMode+0x84>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b31      	cmp	r3, #49	; 0x31
 8002eda:	d9f0      	bls.n	8002ebe <USB_SetCurrentMode+0x2e>
 8002edc:	e01a      	b.n	8002f14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7fe f987 	bl	8001204 <HAL_Delay>
      ms++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa0f 	bl	8003320 <USB_GetMode>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <USB_SetCurrentMode+0x84>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b31      	cmp	r3, #49	; 0x31
 8002f0c:	d9f0      	bls.n	8002ef0 <USB_SetCurrentMode+0x60>
 8002f0e:	e001      	b.n	8002f14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e005      	b.n	8002f20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b32      	cmp	r3, #50	; 0x32
 8002f18:	d101      	bne.n	8002f1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f28:	b084      	sub	sp, #16
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e009      	b.n	8002f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3340      	adds	r3, #64	; 0x40
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0e      	cmp	r3, #14
 8002f60:	d9f2      	bls.n	8002f48 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d11c      	bne.n	8002fa2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	461a      	mov	r2, r3
 8002fca:	680b      	ldr	r3, [r1, #0]
 8002fcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10c      	bne.n	8002fee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f965 	bl	80032ac <USB_SetDevSpeed>
 8002fe2:	e008      	b.n	8002ff6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f960 	bl	80032ac <USB_SetDevSpeed>
 8002fec:	e003      	b.n	8002ff6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fee:	2103      	movs	r1, #3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f95b 	bl	80032ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8f3 	bl	80031e4 <USB_FlushTxFifo>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f91f 	bl	800324c <USB_FlushRxFifo>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	461a      	mov	r2, r3
 800302c:	2300      	movs	r3, #0
 800302e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	461a      	mov	r2, r3
 8003038:	2300      	movs	r3, #0
 800303a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	e043      	b.n	80030ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003058:	d118      	bne.n	800308c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e013      	b.n	800309e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	461a      	mov	r2, r3
 8003084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e008      	b.n	800309e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	3301      	adds	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3b7      	bcc.n	8003042 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e043      	b.n	8003160 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ee:	d118      	bne.n	8003122 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e013      	b.n	8003134 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e008      	b.n	8003134 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2300      	movs	r3, #0
 8003144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3b7      	bcc.n	80030d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f043 0210 	orr.w	r2, r3, #16
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <USB_DevInit+0x2b8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f043 0208 	orr.w	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031dc:	b004      	add	sp, #16
 80031de:	4770      	bx	lr
 80031e0:	803c3800 	.word	0x803c3800

080031e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <USB_FlushTxFifo+0x64>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e01b      	b.n	800323c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	daf2      	bge.n	80031f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	019b      	lsls	r3, r3, #6
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <USB_FlushTxFifo+0x64>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e006      	b.n	800323c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d0f0      	beq.n	800321c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	00030d40 	.word	0x00030d40

0800324c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <USB_FlushRxFifo+0x5c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e018      	b.n	800329c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	daf2      	bge.n	8003258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2210      	movs	r2, #16
 800327a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a08      	ldr	r2, [pc, #32]	; (80032a8 <USB_FlushRxFifo+0x5c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e006      	b.n	800329c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b10      	cmp	r3, #16
 8003298:	d0f0      	beq.n	800327c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	00030d40 	.word	0x00030d40

080032ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80032f8:	f023 0303 	bic.w	r3, r3, #3
 80032fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0301 	and.w	r3, r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <USB_CoreReset+0x64>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e01b      	b.n	8003392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	daf2      	bge.n	8003348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3301      	adds	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <USB_CoreReset+0x64>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e006      	b.n	8003392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d0f0      	beq.n	8003372 <USB_CoreReset+0x36>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	00030d40 	.word	0x00030d40

080033a4 <__NVIC_SetPriority>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Handler+0x1c>)
 80033fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003400:	f001 fe74 	bl	80050ec <xTaskGetSchedulerState>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800340a:	f002 fd5d 	bl	8005ec8 <xPortSysTickHandler>
  }
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800341c:	2100      	movs	r1, #0
 800341e:	f06f 0004 	mvn.w	r0, #4
 8003422:	f7ff ffbf 	bl	80033a4 <__NVIC_SetPriority>
#endif
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003432:	f3ef 8305 	mrs	r3, IPSR
 8003436:	603b      	str	r3, [r7, #0]
  return(result);
 8003438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800343e:	f06f 0305 	mvn.w	r3, #5
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e00c      	b.n	8003460 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <osKernelInitialize+0x44>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <osKernelInitialize+0x44>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e002      	b.n	8003460 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800345e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003460:	687b      	ldr	r3, [r7, #4]
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000640 	.word	0x20000640

08003474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347a:	f3ef 8305 	mrs	r3, IPSR
 800347e:	603b      	str	r3, [r7, #0]
  return(result);
 8003480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003486:	f06f 0305 	mvn.w	r3, #5
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e010      	b.n	80034b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <osKernelStart+0x48>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d109      	bne.n	80034aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003496:	f7ff ffbf 	bl	8003418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <osKernelStart+0x48>)
 800349c:	2202      	movs	r2, #2
 800349e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034a0:	f001 f9dc 	bl	800485c <vTaskStartScheduler>
      stat = osOK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	e002      	b.n	80034b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000640 	.word	0x20000640

080034c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	617b      	str	r3, [r7, #20]
  return(result);
 80034d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d17e      	bne.n	80035da <osThreadNew+0x11a>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07b      	beq.n	80035da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034e6:	2318      	movs	r3, #24
 80034e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d045      	beq.n	8003586 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <osThreadNew+0x48>
        name = attr->name;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <osThreadNew+0x6e>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b38      	cmp	r3, #56	; 0x38
 8003520:	d805      	bhi.n	800352e <osThreadNew+0x6e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <osThreadNew+0x72>
        return (NULL);
 800352e:	2300      	movs	r3, #0
 8003530:	e054      	b.n	80035dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <osThreadNew+0xa8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b5b      	cmp	r3, #91	; 0x5b
 8003550:	d90a      	bls.n	8003568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <osThreadNew+0xa8>
        mem = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e010      	b.n	800358a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <osThreadNew+0xca>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <osThreadNew+0xca>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <osThreadNew+0xca>
          mem = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e001      	b.n	800358a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d110      	bne.n	80035b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003598:	9202      	str	r2, [sp, #8]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 ff82 	bl	80044b0 <xTaskCreateStatic>
 80035ac:	4603      	mov	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	e013      	b.n	80035da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d110      	bne.n	80035da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 ffcd 	bl	800456a <xTaskCreate>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <osThreadNew+0x11a>
            hTask = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035da:	693b      	ldr	r3, [r7, #16]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <osDelay+0x1c>
    stat = osErrorISR;
 80035f8:	f06f 0305 	mvn.w	r3, #5
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e007      	b.n	8003610 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <osDelay+0x2c>
      vTaskDelay(ticks);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 f8f2 	bl	80047f4 <vTaskDelay>
    }
  }

  return (stat);
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <vApplicationGetIdleTaskMemory+0x2c>)
 800362c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <vApplicationGetIdleTaskMemory+0x30>)
 8003632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000644 	.word	0x20000644
 800364c:	200006a0 	.word	0x200006a0

08003650 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a07      	ldr	r2, [pc, #28]	; (800367c <vApplicationGetTimerTaskMemory+0x2c>)
 8003660:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a06      	ldr	r2, [pc, #24]	; (8003680 <vApplicationGetTimerTaskMemory+0x30>)
 8003666:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	200008a0 	.word	0x200008a0
 8003680:	200008fc 	.word	0x200008fc

08003684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0208 	add.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800369c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 0208 	add.w	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d103      	bne.n	8003746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e00c      	b.n	8003760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3308      	adds	r3, #8
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e002      	b.n	8003754 <vListInsert+0x2e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	d2f6      	bcs.n	800374e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6892      	ldr	r2, [r2, #8]
 80037ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d103      	bne.n	80037cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003816:	f002 fac5 	bl	8005da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	441a      	add	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	3b01      	subs	r3, #1
 8003848:	68f9      	ldr	r1, [r7, #12]
 800384a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	441a      	add	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	22ff      	movs	r2, #255	; 0xff
 800385a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d114      	bne.n	8003896 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3310      	adds	r3, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fa79 	bl	8004d70 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <xQueueGenericReset+0xcc>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	e009      	b.n	80038aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3310      	adds	r3, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fef2 	bl	8003684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff feed 	bl	8003684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038aa:	f002 faab 	bl	8005e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038ae:	2301      	movs	r3, #1
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08e      	sub	sp, #56	; 0x38
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <xQueueGenericCreateStatic+0x52>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <xQueueGenericCreateStatic+0x56>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericCreateStatic+0x58>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <xQueueGenericCreateStatic+0x7e>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueGenericCreateStatic+0x82>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueGenericCreateStatic+0x84>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	61fb      	str	r3, [r7, #28]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800395a:	2350      	movs	r3, #80	; 0x50
 800395c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d00a      	beq.n	800397a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61bb      	str	r3, [r7, #24]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800397a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800398e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f805 	bl	80039ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e002      	b.n	80039ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039da:	2101      	movs	r1, #1
 80039dc:	69b8      	ldr	r0, [r7, #24]
 80039de:	f7ff ff05 	bl	80037ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a12:	2300      	movs	r3, #0
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f81f 	bl	8003a5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af02      	add	r7, sp, #8
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	6039      	str	r1, [r7, #0]
 8003a30:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a32:	2301      	movs	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	6978      	ldr	r0, [r7, #20]
 8003a46:	f7ff ff39 	bl	80038bc <xQueueGenericCreateStatic>
 8003a4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff ffd0 	bl	80039f2 <prvInitialiseMutex>

		return xNewQueue;
 8003a52:	68fb      	ldr	r3, [r7, #12]
	}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08e      	sub	sp, #56	; 0x38
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xQueueGenericSend+0x32>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <xQueueGenericSend+0x40>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <xQueueGenericSend+0x44>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <xQueueGenericSend+0x46>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xQueueGenericSend+0x60>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d103      	bne.n	8003aca <xQueueGenericSend+0x6e>
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <xQueueGenericSend+0x72>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <xQueueGenericSend+0x74>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <xQueueGenericSend+0x8e>
	__asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	623b      	str	r3, [r7, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aea:	f001 faff 	bl	80050ec <xTaskGetSchedulerState>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <xQueueGenericSend+0x9e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <xQueueGenericSend+0xa2>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <xQueueGenericSend+0xa4>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xQueueGenericSend+0xbe>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	61fb      	str	r3, [r7, #28]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b1a:	f002 f943 	bl	8005da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <xQueueGenericSend+0xd4>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d129      	bne.n	8003b84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b36:	f000 fb4d 	bl	80041d4 <prvCopyDataToQueue>
 8003b3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 f911 	bl	8004d70 <xTaskRemoveFromEventList>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b54:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <xQueueGenericSend+0x1f8>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	e00a      	b.n	8003b7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <xQueueGenericSend+0x1f8>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b7c:	f002 f942 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e063      	b.n	8003c4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b8a:	f002 f93b 	bl	8005e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e05c      	b.n	8003c4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f94b 	bl	8004e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ba6:	f002 f92d 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003baa:	f000 febd 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bae:	f002 f8f9 	bl	8005da4 <vPortEnterCritical>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bbe:	d103      	bne.n	8003bc8 <xQueueGenericSend+0x16c>
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd4:	d103      	bne.n	8003bde <xQueueGenericSend+0x182>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bde:	f002 f911 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003be2:	1d3a      	adds	r2, r7, #4
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 f93a 	bl	8004e64 <xTaskCheckForTimeOut>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d124      	bne.n	8003c40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf8:	f000 fbe4 	bl	80043c4 <prvIsQueueFull>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	3310      	adds	r3, #16
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f860 	bl	8004cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c12:	f000 fb6f 	bl	80042f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c16:	f000 fe95 	bl	8004944 <xTaskResumeAll>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f47f af7c 	bne.w	8003b1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <xQueueGenericSend+0x1f8>)
 8003c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	e772      	b.n	8003b1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c36:	f000 fb5d 	bl	80042f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c3a:	f000 fe83 	bl	8004944 <xTaskResumeAll>
 8003c3e:	e76c      	b.n	8003b1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c42:	f000 fb57 	bl	80042f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c46:	f000 fe7d 	bl	8004944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3738      	adds	r7, #56	; 0x38
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <xQueueGenericSendFromISR+0x3c>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <xQueueGenericSendFromISR+0x40>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <xQueueGenericSendFromISR+0x42>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d103      	bne.n	8003cc2 <xQueueGenericSendFromISR+0x6a>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <xQueueGenericSendFromISR+0x6e>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueGenericSendFromISR+0x70>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	623b      	str	r3, [r7, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ce2:	f002 f941 	bl	8005f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	61fa      	str	r2, [r7, #28]
 8003cfc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <xQueueGenericSendFromISR+0xbc>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d12f      	bne.n	8003d74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d2a:	f000 fa53 	bl	80041d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d36:	d112      	bne.n	8003d5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	3324      	adds	r3, #36	; 0x24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f813 	bl	8004d70 <xTaskRemoveFromEventList>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	b25a      	sxtb	r2, r3
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d72:	e001      	b.n	8003d78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3740      	adds	r7, #64	; 0x40
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <xQueueReceive+0x30>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	623b      	str	r3, [r7, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueReceive+0x3e>
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xQueueReceive+0x42>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueReceive+0x44>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xQueueReceive+0x5e>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61fb      	str	r3, [r7, #28]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dee:	f001 f97d 	bl	80050ec <xTaskGetSchedulerState>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <xQueueReceive+0x6e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <xQueueReceive+0x72>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <xQueueReceive+0x74>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xQueueReceive+0x8e>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61bb      	str	r3, [r7, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e1e:	f001 ffc1 	bl	8005da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f000 fa39 	bl	80042a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	3310      	adds	r3, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ff90 	bl	8004d70 <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <xQueueReceive+0x1bc>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e66:	f001 ffcd 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e069      	b.n	8003f42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e74:	f001 ffc6 	bl	8005e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e062      	b.n	8003f42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 ffd6 	bl	8004e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e90:	f001 ffb8 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e94:	f000 fd48 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e98:	f001 ff84 	bl	8005da4 <vPortEnterCritical>
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea8:	d103      	bne.n	8003eb2 <xQueueReceive+0x122>
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ebe:	d103      	bne.n	8003ec8 <xQueueReceive+0x138>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec8:	f001 ff9c 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ecc:	1d3a      	adds	r2, r7, #4
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 ffc5 	bl	8004e64 <xTaskCheckForTimeOut>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d123      	bne.n	8003f28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f000 fa59 	bl	8004398 <prvIsQueueEmpty>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	3324      	adds	r3, #36	; 0x24
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 feeb 	bl	8004cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efc:	f000 f9fa 	bl	80042f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f00:	f000 fd20 	bl	8004944 <xTaskResumeAll>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d189      	bne.n	8003e1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <xQueueReceive+0x1bc>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	e780      	b.n	8003e1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1e:	f000 f9e9 	bl	80042f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f22:	f000 fd0f 	bl	8004944 <xTaskResumeAll>
 8003f26:	e77a      	b.n	8003e1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f9e3 	bl	80042f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f2e:	f000 fd09 	bl	8004944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f34:	f000 fa30 	bl	8004398 <prvIsQueueEmpty>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f43f af6f 	beq.w	8003e1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3730      	adds	r7, #48	; 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	623b      	str	r3, [r7, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	61fb      	str	r3, [r7, #28]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa0:	f001 f8a4 	bl	80050ec <xTaskGetSchedulerState>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <xQueueSemaphoreTake+0x60>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <xQueueSemaphoreTake+0x64>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <xQueueSemaphoreTake+0x66>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61bb      	str	r3, [r7, #24]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fd0:	f001 fee8 	bl	8005da4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d024      	beq.n	800402a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ff0:	f001 f9f2 	bl	80053d8 <pvTaskIncrementMutexHeldCount>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00f      	beq.n	8004022 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f000 feb2 	bl	8004d70 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004012:	4b54      	ldr	r3, [pc, #336]	; (8004164 <xQueueSemaphoreTake+0x214>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004022:	f001 feef 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8004026:	2301      	movs	r3, #1
 8004028:	e097      	b.n	800415a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d111      	bne.n	8004054 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	617b      	str	r3, [r7, #20]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800404c:	f001 feda 	bl	8005e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004050:	2300      	movs	r3, #0
 8004052:	e082      	b.n	800415a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	4618      	mov	r0, r3
 8004060:	f000 feea 	bl	8004e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004068:	f001 fecc 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800406c:	f000 fc5c 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004070:	f001 fe98 	bl	8005da4 <vPortEnterCritical>
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800407a:	b25b      	sxtb	r3, r3
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004080:	d103      	bne.n	800408a <xQueueSemaphoreTake+0x13a>
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004090:	b25b      	sxtb	r3, r3
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004096:	d103      	bne.n	80040a0 <xQueueSemaphoreTake+0x150>
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a0:	f001 feb0 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040a4:	463a      	mov	r2, r7
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fed9 	bl	8004e64 <xTaskCheckForTimeOut>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d132      	bne.n	800411e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ba:	f000 f96d 	bl	8004398 <prvIsQueueEmpty>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d026      	beq.n	8004112 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80040cc:	f001 fe6a 	bl	8005da4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f827 	bl	8005128 <xTaskPriorityInherit>
 80040da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040dc:	f001 fe92 	bl	8005e04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fdf1 	bl	8004cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040f0:	f000 f900 	bl	80042f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040f4:	f000 fc26 	bl	8004944 <xTaskResumeAll>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f47f af68 	bne.w	8003fd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004100:	4b18      	ldr	r3, [pc, #96]	; (8004164 <xQueueSemaphoreTake+0x214>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	e75e      	b.n	8003fd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004114:	f000 f8ee 	bl	80042f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004118:	f000 fc14 	bl	8004944 <xTaskResumeAll>
 800411c:	e758      	b.n	8003fd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800411e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004120:	f000 f8e8 	bl	80042f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004124:	f000 fc0e 	bl	8004944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800412a:	f000 f935 	bl	8004398 <prvIsQueueEmpty>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f43f af4d 	beq.w	8003fd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800413c:	f001 fe32 	bl	8005da4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004142:	f000 f82f 	bl	80041a4 <prvGetDisinheritPriorityAfterTimeout>
 8004146:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f8c0 	bl	80052d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004154:	f001 fe56 	bl	8005e04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800415a:	4618      	mov	r0, r3
 800415c:	3738      	adds	r7, #56	; 0x38
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60bb      	str	r3, [r7, #8]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800418c:	f001 fe0a 	bl	8005da4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004196:	f001 fe35 	bl	8005e04 <vPortExitCritical>

	return uxReturn;
 800419a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80041c6:	68fb      	ldr	r3, [r7, #12]
	}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d14d      	bne.n	8004296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fffa 	bl	80051f8 <xTaskPriorityDisinherit>
 8004204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	e043      	b.n	8004296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d119      	bne.n	8004248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6858      	ldr	r0, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	461a      	mov	r2, r3
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	f006 fe38 	bl	800ae94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	441a      	add	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d32b      	bcc.n	8004296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e026      	b.n	8004296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68d8      	ldr	r0, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	461a      	mov	r2, r3
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	f006 fe1e 	bl	800ae94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	425b      	negs	r3, r3
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	425b      	negs	r3, r3
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d105      	bne.n	8004296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3b01      	subs	r3, #1
 8004294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800429e:	697b      	ldr	r3, [r7, #20]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	441a      	add	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d303      	bcc.n	80042dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68d9      	ldr	r1, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	461a      	mov	r2, r3
 80042e6:	6838      	ldr	r0, [r7, #0]
 80042e8:	f006 fdd4 	bl	800ae94 <memcpy>
	}
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042fc:	f001 fd52 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004308:	e011      	b.n	800432e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d012      	beq.n	8004338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fd2a 	bl	8004d70 <xTaskRemoveFromEventList>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004322:	f000 fe01 	bl	8004f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	3b01      	subs	r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800432e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	dce9      	bgt.n	800430a <prvUnlockQueue+0x16>
 8004336:	e000      	b.n	800433a <prvUnlockQueue+0x46>
					break;
 8004338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004342:	f001 fd5f 	bl	8005e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004346:	f001 fd2d 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004352:	e011      	b.n	8004378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fd05 	bl	8004d70 <xTaskRemoveFromEventList>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800436c:	f000 fddc 	bl	8004f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004370:	7bbb      	ldrb	r3, [r7, #14]
 8004372:	3b01      	subs	r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800437c:	2b00      	cmp	r3, #0
 800437e:	dce9      	bgt.n	8004354 <prvUnlockQueue+0x60>
 8004380:	e000      	b.n	8004384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	22ff      	movs	r2, #255	; 0xff
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800438c:	f001 fd3a 	bl	8005e04 <vPortExitCritical>
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a0:	f001 fd00 	bl	8005da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e001      	b.n	80043b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043b6:	f001 fd25 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043cc:	f001 fcea 	bl	8005da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	429a      	cmp	r2, r3
 80043da:	d102      	bne.n	80043e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e001      	b.n	80043e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043e6:	f001 fd0d 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e014      	b.n	800442e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004404:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <vQueueAddToRegistry+0x50>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004410:	490c      	ldr	r1, [pc, #48]	; (8004444 <vQueueAddToRegistry+0x50>)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <vQueueAddToRegistry+0x50>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004426:	e006      	b.n	8004436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b07      	cmp	r3, #7
 8004432:	d9e7      	bls.n	8004404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000cfc 	.word	0x20000cfc

08004448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004458:	f001 fca4 	bl	8005da4 <vPortEnterCritical>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004462:	b25b      	sxtb	r3, r3
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004468:	d103      	bne.n	8004472 <vQueueWaitForMessageRestricted+0x2a>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447e:	d103      	bne.n	8004488 <vQueueWaitForMessageRestricted+0x40>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004488:	f001 fcbc 	bl	8005e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fc3b 	bl	8004d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff26 	bl	80042f4 <prvUnlockQueue>
	}
 80044a8:	bf00      	nop
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08e      	sub	sp, #56	; 0x38
 80044b4:	af04      	add	r7, sp, #16
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xTaskCreateStatic+0x2a>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	623b      	str	r3, [r7, #32]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61fb      	str	r3, [r7, #28]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044f6:	235c      	movs	r3, #92	; 0x5c
 80044f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b5c      	cmp	r3, #92	; 0x5c
 80044fe:	d00a      	beq.n	8004516 <xTaskCreateStatic+0x66>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	61bb      	str	r3, [r7, #24]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01e      	beq.n	800455c <xTaskCreateStatic+0xac>
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800452c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004536:	2300      	movs	r3, #0
 8004538:	9303      	str	r3, [sp, #12]
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	9302      	str	r3, [sp, #8]
 800453e:	f107 0314 	add.w	r3, r7, #20
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f850 	bl	80045f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004556:	f000 f8dd 	bl	8004714 <prvAddNewTaskToReadyList>
 800455a:	e001      	b.n	8004560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004560:	697b      	ldr	r3, [r7, #20]
	}
 8004562:	4618      	mov	r0, r3
 8004564:	3728      	adds	r7, #40	; 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08c      	sub	sp, #48	; 0x30
 800456e:	af04      	add	r7, sp, #16
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4618      	mov	r0, r3
 8004580:	f001 fd32 	bl	8005fe8 <pvPortMalloc>
 8004584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800458c:	205c      	movs	r0, #92	; 0x5c
 800458e:	f001 fd2b 	bl	8005fe8 <pvPortMalloc>
 8004592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
 80045a0:	e005      	b.n	80045ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045a2:	6978      	ldr	r0, [r7, #20]
 80045a4:	f001 fdec 	bl	8006180 <vPortFree>
 80045a8:	e001      	b.n	80045ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d017      	beq.n	80045e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	2300      	movs	r3, #0
 80045c0:	9303      	str	r3, [sp, #12]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	9302      	str	r3, [sp, #8]
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f80e 	bl	80045f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045d8:	69f8      	ldr	r0, [r7, #28]
 80045da:	f000 f89b 	bl	8004714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e002      	b.n	80045ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045ea:	69bb      	ldr	r3, [r7, #24]
	}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	461a      	mov	r2, r3
 800460c:	21a5      	movs	r1, #165	; 0xa5
 800460e:	f006 fc14 	bl	800ae3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800461c:	3b01      	subs	r3, #1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f023 0307 	bic.w	r3, r3, #7
 800462a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	617b      	str	r3, [r7, #20]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01f      	beq.n	8004692 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e012      	b.n	800467e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	7819      	ldrb	r1, [r3, #0]
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	3334      	adds	r3, #52	; 0x34
 8004668:	460a      	mov	r2, r1
 800466a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d9e9      	bls.n	8004658 <prvInitialiseNewTask+0x64>
 8004684:	e000      	b.n	8004688 <prvInitialiseNewTask+0x94>
			{
				break;
 8004686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004690:	e003      	b.n	800469a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b37      	cmp	r3, #55	; 0x37
 800469e:	d901      	bls.n	80046a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046a0:	2337      	movs	r3, #55	; 0x37
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	2200      	movs	r2, #0
 80046b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	3304      	adds	r3, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff f802 	bl	80036c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	3318      	adds	r3, #24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fffd 	bl	80036c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	2200      	movs	r2, #0
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68f9      	ldr	r1, [r7, #12]
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f001 fa26 	bl	8005b44 <pxPortInitialiseStack>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470a:	bf00      	nop
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800471c:	f001 fb42 	bl	8005da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004720:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 8004728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <prvAddNewTaskToReadyList+0xc8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004732:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <prvAddNewTaskToReadyList+0xc8>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d110      	bne.n	8004762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004740:	f000 fc16 	bl	8004f70 <prvInitialiseTaskLists>
 8004744:	e00d      	b.n	8004762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004746:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <prvAddNewTaskToReadyList+0xcc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <prvAddNewTaskToReadyList+0xc8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d802      	bhi.n	8004762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <prvAddNewTaskToReadyList+0xc8>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 800476a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <prvAddNewTaskToReadyList+0xd4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d903      	bls.n	8004788 <prvAddNewTaskToReadyList+0x74>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <prvAddNewTaskToReadyList+0xd4>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <prvAddNewTaskToReadyList+0xd8>)
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fe ff9d 	bl	80036de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047a4:	f001 fb2e 	bl	8005e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <prvAddNewTaskToReadyList+0xcc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <prvAddNewTaskToReadyList+0xc8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d207      	bcs.n	80047ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <prvAddNewTaskToReadyList+0xdc>)
 80047c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001210 	.word	0x20001210
 80047dc:	20000d3c 	.word	0x20000d3c
 80047e0:	2000121c 	.word	0x2000121c
 80047e4:	2000122c 	.word	0x2000122c
 80047e8:	20001218 	.word	0x20001218
 80047ec:	20000d40 	.word	0x20000d40
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d017      	beq.n	8004836 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <vTaskDelay+0x60>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <vTaskDelay+0x30>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	60bb      	str	r3, [r7, #8]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004824:	f000 f880 	bl	8004928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004828:	2100      	movs	r1, #0
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fde8 	bl	8005400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004830:	f000 f888 	bl	8004944 <xTaskResumeAll>
 8004834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <vTaskDelay+0x64>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20001238 	.word	0x20001238
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800486a:	463a      	mov	r2, r7
 800486c:	1d39      	adds	r1, r7, #4
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fed2 	bl	800361c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	9202      	str	r2, [sp, #8]
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	2300      	movs	r3, #0
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2300      	movs	r3, #0
 8004888:	460a      	mov	r2, r1
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <vTaskStartScheduler+0xb4>)
 800488c:	4821      	ldr	r0, [pc, #132]	; (8004914 <vTaskStartScheduler+0xb8>)
 800488e:	f7ff fe0f 	bl	80044b0 <xTaskCreateStatic>
 8004892:	4603      	mov	r3, r0
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <vTaskStartScheduler+0xbc>)
 8004896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <vTaskStartScheduler+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048a0:	2301      	movs	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e001      	b.n	80048aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d102      	bne.n	80048b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048b0:	f000 fdfa 	bl	80054a8 <xTimerCreateTimerTask>
 80048b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d116      	bne.n	80048ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	613b      	str	r3, [r7, #16]
}
 80048ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <vTaskStartScheduler+0xc0>)
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <vTaskStartScheduler+0xc4>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <vTaskStartScheduler+0xc8>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e4:	f001 f9bc 	bl	8005c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e8:	e00e      	b.n	8004908 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f0:	d10a      	bne.n	8004908 <vTaskStartScheduler+0xac>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vTaskStartScheduler+0xaa>
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	0800af04 	.word	0x0800af04
 8004914:	08004f41 	.word	0x08004f41
 8004918:	20001234 	.word	0x20001234
 800491c:	20001230 	.word	0x20001230
 8004920:	2000121c 	.word	0x2000121c
 8004924:	20001214 	.word	0x20001214

08004928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <vTaskSuspendAll+0x18>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	4a03      	ldr	r2, [pc, #12]	; (8004940 <vTaskSuspendAll+0x18>)
 8004934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20001238 	.word	0x20001238

08004944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004952:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <xTaskResumeAll+0x118>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <xTaskResumeAll+0x2c>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	603b      	str	r3, [r7, #0]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004970:	f001 fa18 	bl	8005da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <xTaskResumeAll+0x118>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3b01      	subs	r3, #1
 800497a:	4a38      	ldr	r2, [pc, #224]	; (8004a5c <xTaskResumeAll+0x118>)
 800497c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <xTaskResumeAll+0x118>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d162      	bne.n	8004a4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004986:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <xTaskResumeAll+0x11c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d05e      	beq.n	8004a4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498e:	e02f      	b.n	80049f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004990:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <xTaskResumeAll+0x120>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3318      	adds	r3, #24
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fefb 	bl	8003798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fef6 	bl	8003798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <xTaskResumeAll+0x124>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d903      	bls.n	80049c0 <xTaskResumeAll+0x7c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <xTaskResumeAll+0x124>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <xTaskResumeAll+0x128>)
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f7fe fe81 	bl	80036de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <xTaskResumeAll+0x12c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <xTaskResumeAll+0x130>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f0:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <xTaskResumeAll+0x120>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1cb      	bne.n	8004990 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049fe:	f000 fb55 	bl	80050ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <xTaskResumeAll+0x134>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a0e:	f000 f847 	bl	8004aa0 <xTaskIncrementTick>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <xTaskResumeAll+0x130>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f1      	bne.n	8004a0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <xTaskResumeAll+0x134>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <xTaskResumeAll+0x130>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <xTaskResumeAll+0x138>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a4c:	f001 f9da 	bl	8005e04 <vPortExitCritical>

	return xAlreadyYielded;
 8004a50:	68bb      	ldr	r3, [r7, #8]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20001238 	.word	0x20001238
 8004a60:	20001210 	.word	0x20001210
 8004a64:	200011d0 	.word	0x200011d0
 8004a68:	20001218 	.word	0x20001218
 8004a6c:	20000d40 	.word	0x20000d40
 8004a70:	20000d3c 	.word	0x20000d3c
 8004a74:	20001224 	.word	0x20001224
 8004a78:	20001220 	.word	0x20001220
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <xTaskGetTickCount+0x1c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20001214 	.word	0x20001214

08004aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aaa:	4b4f      	ldr	r3, [pc, #316]	; (8004be8 <xTaskIncrementTick+0x148>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 808f 	bne.w	8004bd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <xTaskIncrementTick+0x14c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004abc:	4a4b      	ldr	r2, [pc, #300]	; (8004bec <xTaskIncrementTick+0x14c>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d120      	bne.n	8004b0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ac8:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	603b      	str	r3, [r7, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <xTaskIncrementTick+0x46>
 8004ae8:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3f      	ldr	r2, [pc, #252]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4a3f      	ldr	r2, [pc, #252]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <xTaskIncrementTick+0x158>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	4a3d      	ldr	r2, [pc, #244]	; (8004bf8 <xTaskIncrementTick+0x158>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	f000 fad1 	bl	80050ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b0a:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d349      	bcc.n	8004ba8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b14:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1e:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b24:	601a      	str	r2, [r3, #0]
					break;
 8004b26:	e03f      	b.n	8004ba8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d203      	bcs.n	8004b48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b40:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b46:	e02f      	b.n	8004ba8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe fe23 	bl	8003798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fe1a 	bl	8003798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <xTaskIncrementTick+0x160>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d903      	bls.n	8004b78 <xTaskIncrementTick+0xd8>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <xTaskIncrementTick+0x160>)
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <xTaskIncrementTick+0x164>)
 8004b86:	441a      	add	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fe fda5 	bl	80036de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <xTaskIncrementTick+0x168>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3b8      	bcc.n	8004b14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba6:	e7b5      	b.n	8004b14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <xTaskIncrementTick+0x168>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	4915      	ldr	r1, [pc, #84]	; (8004c04 <xTaskIncrementTick+0x164>)
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d901      	bls.n	8004bc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <xTaskIncrementTick+0x16c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e004      	b.n	8004bdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <xTaskIncrementTick+0x170>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <xTaskIncrementTick+0x170>)
 8004bda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bdc:	697b      	ldr	r3, [r7, #20]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20001238 	.word	0x20001238
 8004bec:	20001214 	.word	0x20001214
 8004bf0:	200011c8 	.word	0x200011c8
 8004bf4:	200011cc 	.word	0x200011cc
 8004bf8:	20001228 	.word	0x20001228
 8004bfc:	20001230 	.word	0x20001230
 8004c00:	20001218 	.word	0x20001218
 8004c04:	20000d40 	.word	0x20000d40
 8004c08:	20000d3c 	.word	0x20000d3c
 8004c0c:	20001224 	.word	0x20001224
 8004c10:	20001220 	.word	0x20001220

08004c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c1a:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <vTaskSwitchContext+0xa8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c22:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <vTaskSwitchContext+0xac>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c28:	e041      	b.n	8004cae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004c2a:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <vTaskSwitchContext+0xac>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <vTaskSwitchContext+0xb0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e010      	b.n	8004c5a <vTaskSwitchContext+0x46>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <vTaskSwitchContext+0x3e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	491b      	ldr	r1, [pc, #108]	; (8004cc8 <vTaskSwitchContext+0xb4>)
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0e4      	beq.n	8004c38 <vTaskSwitchContext+0x24>
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <vTaskSwitchContext+0xb4>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d104      	bne.n	8004c9e <vTaskSwitchContext+0x8a>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <vTaskSwitchContext+0xb8>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <vTaskSwitchContext+0xb0>)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6013      	str	r3, [r2, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20001238 	.word	0x20001238
 8004cc0:	20001224 	.word	0x20001224
 8004cc4:	20001218 	.word	0x20001218
 8004cc8:	20000d40 	.word	0x20000d40
 8004ccc:	20000d3c 	.word	0x20000d3c

08004cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <vTaskPlaceOnEventList+0x44>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fe fd11 	bl	8003726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d04:	2101      	movs	r1, #1
 8004d06:	6838      	ldr	r0, [r7, #0]
 8004d08:	f000 fb7a 	bl	8005400 <prvAddCurrentTaskToDelayedList>
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000d3c 	.word	0x20000d3c

08004d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	617b      	str	r3, [r7, #20]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3318      	adds	r3, #24
 8004d46:	4619      	mov	r1, r3
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7fe fcc8 	bl	80036de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f000 fb4f 	bl	8005400 <prvAddCurrentTaskToDelayedList>
	}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000d3c 	.word	0x20000d3c

08004d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60fb      	str	r3, [r7, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3318      	adds	r3, #24
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fcf9 	bl	8003798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <xTaskRemoveFromEventList+0xb0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11d      	bne.n	8004dea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fcf0 	bl	8003798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <xTaskRemoveFromEventList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <xTaskRemoveFromEventList+0x5c>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <xTaskRemoveFromEventList+0xb4>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <xTaskRemoveFromEventList+0xb8>)
 8004dda:	441a      	add	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7fe fc7b 	bl	80036de <vListInsertEnd>
 8004de8:	e005      	b.n	8004df6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3318      	adds	r3, #24
 8004dee:	4619      	mov	r1, r3
 8004df0:	480e      	ldr	r0, [pc, #56]	; (8004e2c <xTaskRemoveFromEventList+0xbc>)
 8004df2:	f7fe fc74 	bl	80036de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <xTaskRemoveFromEventList+0xc0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d905      	bls.n	8004e10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <xTaskRemoveFromEventList+0xc4>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e001      	b.n	8004e14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e14:	697b      	ldr	r3, [r7, #20]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20001238 	.word	0x20001238
 8004e24:	20001218 	.word	0x20001218
 8004e28:	20000d40 	.word	0x20000d40
 8004e2c:	200011d0 	.word	0x200011d0
 8004e30:	20000d3c 	.word	0x20000d3c
 8004e34:	20001224 	.word	0x20001224

08004e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <vTaskInternalSetTimeOutState+0x24>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <vTaskInternalSetTimeOutState+0x28>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	605a      	str	r2, [r3, #4]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20001228 	.word	0x20001228
 8004e60:	20001214 	.word	0x20001214

08004e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	613b      	str	r3, [r7, #16]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ea6:	f000 ff7d 	bl	8005da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <xTaskCheckForTimeOut+0xbc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec2:	d102      	bne.n	8004eca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e023      	b.n	8004f12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <xTaskCheckForTimeOut+0xc0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d007      	beq.n	8004ee6 <xTaskCheckForTimeOut+0x82>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	e015      	b.n	8004f12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d20b      	bcs.n	8004f08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff9b 	bl	8004e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	e004      	b.n	8004f12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f12:	f000 ff77 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 8004f16:	69fb      	ldr	r3, [r7, #28]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20001214 	.word	0x20001214
 8004f24:	20001228 	.word	0x20001228

08004f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <vTaskMissedYield+0x14>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20001224 	.word	0x20001224

08004f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f48:	f000 f852 	bl	8004ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <prvIdleTask+0x28>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d9f9      	bls.n	8004f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <prvIdleTask+0x2c>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f64:	e7f0      	b.n	8004f48 <prvIdleTask+0x8>
 8004f66:	bf00      	nop
 8004f68:	20000d40 	.word	0x20000d40
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f76:	2300      	movs	r3, #0
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	e00c      	b.n	8004f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <prvInitialiseTaskLists+0x60>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fb7a 	bl	8003684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3301      	adds	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b37      	cmp	r3, #55	; 0x37
 8004f9a:	d9ef      	bls.n	8004f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f9c:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <prvInitialiseTaskLists+0x64>)
 8004f9e:	f7fe fb71 	bl	8003684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fa2:	480d      	ldr	r0, [pc, #52]	; (8004fd8 <prvInitialiseTaskLists+0x68>)
 8004fa4:	f7fe fb6e 	bl	8003684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fa8:	480c      	ldr	r0, [pc, #48]	; (8004fdc <prvInitialiseTaskLists+0x6c>)
 8004faa:	f7fe fb6b 	bl	8003684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fae:	480c      	ldr	r0, [pc, #48]	; (8004fe0 <prvInitialiseTaskLists+0x70>)
 8004fb0:	f7fe fb68 	bl	8003684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <prvInitialiseTaskLists+0x74>)
 8004fb6:	f7fe fb65 	bl	8003684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <prvInitialiseTaskLists+0x78>)
 8004fbc:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <prvInitialiseTaskLists+0x64>)
 8004fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <prvInitialiseTaskLists+0x7c>)
 8004fc2:	4a05      	ldr	r2, [pc, #20]	; (8004fd8 <prvInitialiseTaskLists+0x68>)
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000d40 	.word	0x20000d40
 8004fd4:	200011a0 	.word	0x200011a0
 8004fd8:	200011b4 	.word	0x200011b4
 8004fdc:	200011d0 	.word	0x200011d0
 8004fe0:	200011e4 	.word	0x200011e4
 8004fe4:	200011fc 	.word	0x200011fc
 8004fe8:	200011c8 	.word	0x200011c8
 8004fec:	200011cc 	.word	0x200011cc

08004ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff6:	e019      	b.n	800502c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ff8:	f000 fed4 	bl	8005da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <prvCheckTasksWaitingTermination+0x50>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fbc5 	bl	8003798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <prvCheckTasksWaitingTermination+0x54>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3b01      	subs	r3, #1
 8005014:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <prvCheckTasksWaitingTermination+0x54>)
 8005016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <prvCheckTasksWaitingTermination+0x58>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3b01      	subs	r3, #1
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <prvCheckTasksWaitingTermination+0x58>)
 8005020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005022:	f000 feef 	bl	8005e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f810 	bl	800504c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <prvCheckTasksWaitingTermination+0x58>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e1      	bne.n	8004ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	200011e4 	.word	0x200011e4
 8005044:	20001210 	.word	0x20001210
 8005048:	200011f8 	.word	0x200011f8

0800504c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f88c 	bl	8006180 <vPortFree>
				vPortFree( pxTCB );
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 f889 	bl	8006180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800506e:	e018      	b.n	80050a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005076:	2b01      	cmp	r3, #1
 8005078:	d103      	bne.n	8005082 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 f880 	bl	8006180 <vPortFree>
	}
 8005080:	e00f      	b.n	80050a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005088:	2b02      	cmp	r3, #2
 800508a:	d00a      	beq.n	80050a2 <prvDeleteTCB+0x56>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60fb      	str	r3, [r7, #12]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <prvDeleteTCB+0x54>
	}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <prvResetNextTaskUnblockTime+0x38>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <prvResetNextTaskUnblockTime+0x3c>)
 80050be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050c4:	e008      	b.n	80050d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <prvResetNextTaskUnblockTime+0x38>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <prvResetNextTaskUnblockTime+0x3c>)
 80050d6:	6013      	str	r3, [r2, #0]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	200011c8 	.word	0x200011c8
 80050e8:	20001230 	.word	0x20001230

080050ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <xTaskGetSchedulerState+0x34>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050fa:	2301      	movs	r3, #1
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	e008      	b.n	8005112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <xTaskGetSchedulerState+0x38>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005108:	2302      	movs	r3, #2
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	e001      	b.n	8005112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005112:	687b      	ldr	r3, [r7, #4]
	}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	2000121c 	.word	0x2000121c
 8005124:	20001238 	.word	0x20001238

08005128 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d051      	beq.n	80051e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <xTaskPriorityInherit+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d241      	bcs.n	80051d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db06      	blt.n	8005162 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <xTaskPriorityInherit+0xc4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6959      	ldr	r1, [r3, #20]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <xTaskPriorityInherit+0xc8>)
 8005174:	4413      	add	r3, r2
 8005176:	4299      	cmp	r1, r3
 8005178:	d122      	bne.n	80051c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fb0a 	bl	8003798 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <xTaskPriorityInherit+0xc4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <xTaskPriorityInherit+0xcc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d903      	bls.n	80051a2 <xTaskPriorityInherit+0x7a>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <xTaskPriorityInherit+0xcc>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <xTaskPriorityInherit+0xc8>)
 80051b0:	441a      	add	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7fe fa90 	bl	80036de <vListInsertEnd>
 80051be:	e004      	b.n	80051ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <xTaskPriorityInherit+0xc4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e008      	b.n	80051e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <xTaskPriorityInherit+0xc4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	429a      	cmp	r2, r3
 80051dc:	d201      	bcs.n	80051e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051e2:	68fb      	ldr	r3, [r7, #12]
	}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000d3c 	.word	0x20000d3c
 80051f0:	20000d40 	.word	0x20000d40
 80051f4:	20001218 	.word	0x20001218

080051f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d056      	beq.n	80052bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <xTaskPriorityDisinherit+0xd0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d00a      	beq.n	800522e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60fb      	str	r3, [r7, #12]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	1e5a      	subs	r2, r3, #1
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525e:	429a      	cmp	r2, r3
 8005260:	d02c      	beq.n	80052bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d128      	bne.n	80052bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fa92 	bl	8003798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTaskPriorityDisinherit+0xd4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d903      	bls.n	800529c <xTaskPriorityDisinherit+0xa4>
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <xTaskPriorityDisinherit+0xd4>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <xTaskPriorityDisinherit+0xd8>)
 80052aa:	441a      	add	r2, r3
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fe fa13 	bl	80036de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052bc:	697b      	ldr	r3, [r7, #20]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000d3c 	.word	0x20000d3c
 80052cc:	20001218 	.word	0x20001218
 80052d0:	20000d40 	.word	0x20000d40

080052d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d06a      	beq.n	80053c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d902      	bls.n	800531a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e002      	b.n	8005320 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	429a      	cmp	r2, r3
 8005328:	d04b      	beq.n	80053c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	429a      	cmp	r2, r3
 8005332:	d146      	bne.n	80053c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10a      	bne.n	8005354 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	60bb      	str	r3, [r7, #8]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	db04      	blt.n	8005372 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6959      	ldr	r1, [r3, #20]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005382:	4413      	add	r3, r2
 8005384:	4299      	cmp	r1, r3
 8005386:	d11c      	bne.n	80053c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	3304      	adds	r3, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fa03 	bl	8003798 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d903      	bls.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80053b4:	441a      	add	r2, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7fe f98e 	bl	80036de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c2:	bf00      	nop
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000d3c 	.word	0x20000d3c
 80053d0:	20000d40 	.word	0x20000d40
 80053d4:	20001218 	.word	0x20001218

080053d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <pvTaskIncrementMutexHeldCount+0x24>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <pvTaskIncrementMutexHeldCount+0x24>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ea:	3201      	adds	r2, #1
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80053ee:	4b03      	ldr	r3, [pc, #12]	; (80053fc <pvTaskIncrementMutexHeldCount+0x24>)
 80053f0:	681b      	ldr	r3, [r3, #0]
	}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000d3c 	.word	0x20000d3c

08005400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800540a:	4b21      	ldr	r3, [pc, #132]	; (8005490 <prvAddCurrentTaskToDelayedList+0x90>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005410:	4b20      	ldr	r3, [pc, #128]	; (8005494 <prvAddCurrentTaskToDelayedList+0x94>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3304      	adds	r3, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe f9be 	bl	8003798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005422:	d10a      	bne.n	800543a <prvAddCurrentTaskToDelayedList+0x3a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800542a:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <prvAddCurrentTaskToDelayedList+0x94>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4819      	ldr	r0, [pc, #100]	; (8005498 <prvAddCurrentTaskToDelayedList+0x98>)
 8005434:	f7fe f953 	bl	80036de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005438:	e026      	b.n	8005488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4413      	add	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <prvAddCurrentTaskToDelayedList+0x94>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	429a      	cmp	r2, r3
 8005450:	d209      	bcs.n	8005466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <prvAddCurrentTaskToDelayedList+0x94>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe f961 	bl	8003726 <vListInsert>
}
 8005464:	e010      	b.n	8005488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvAddCurrentTaskToDelayedList+0x94>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f7fe f957 	bl	8003726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d202      	bcs.n	8005488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005482:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6013      	str	r3, [r2, #0]
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20001214 	.word	0x20001214
 8005494:	20000d3c 	.word	0x20000d3c
 8005498:	200011fc 	.word	0x200011fc
 800549c:	200011cc 	.word	0x200011cc
 80054a0:	200011c8 	.word	0x200011c8
 80054a4:	20001230 	.word	0x20001230

080054a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054b2:	f000 fb07 	bl	8005ac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <xTimerCreateTimerTask+0x80>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d021      	beq.n	8005502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054c6:	1d3a      	adds	r2, r7, #4
 80054c8:	f107 0108 	add.w	r1, r7, #8
 80054cc:	f107 030c 	add.w	r3, r7, #12
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe f8bd 	bl	8003650 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	9202      	str	r2, [sp, #8]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	2302      	movs	r3, #2
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	460a      	mov	r2, r1
 80054e8:	4910      	ldr	r1, [pc, #64]	; (800552c <xTimerCreateTimerTask+0x84>)
 80054ea:	4811      	ldr	r0, [pc, #68]	; (8005530 <xTimerCreateTimerTask+0x88>)
 80054ec:	f7fe ffe0 	bl	80044b0 <xTaskCreateStatic>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4a10      	ldr	r2, [pc, #64]	; (8005534 <xTimerCreateTimerTask+0x8c>)
 80054f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <xTimerCreateTimerTask+0x8c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054fe:	2301      	movs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	613b      	str	r3, [r7, #16]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800551e:	697b      	ldr	r3, [r7, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	2000126c 	.word	0x2000126c
 800552c:	0800af0c 	.word	0x0800af0c
 8005530:	0800566d 	.word	0x0800566d
 8005534:	20001270 	.word	0x20001270

08005538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	623b      	str	r3, [r7, #32]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <xTimerGenericCommand+0x98>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02a      	beq.n	80055c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b05      	cmp	r3, #5
 800557e:	dc18      	bgt.n	80055b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005580:	f7ff fdb4 	bl	80050ec <xTaskGetSchedulerState>
 8005584:	4603      	mov	r3, r0
 8005586:	2b02      	cmp	r3, #2
 8005588:	d109      	bne.n	800559e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <xTimerGenericCommand+0x98>)
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f107 0110 	add.w	r1, r7, #16
 8005592:	2300      	movs	r3, #0
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	f7fe fa61 	bl	8003a5c <xQueueGenericSend>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24
 800559c:	e012      	b.n	80055c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800559e:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <xTimerGenericCommand+0x98>)
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f107 0110 	add.w	r1, r7, #16
 80055a6:	2300      	movs	r3, #0
 80055a8:	2200      	movs	r2, #0
 80055aa:	f7fe fa57 	bl	8003a5c <xQueueGenericSend>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24
 80055b0:	e008      	b.n	80055c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <xTimerGenericCommand+0x98>)
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	f107 0110 	add.w	r1, r7, #16
 80055ba:	2300      	movs	r3, #0
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	f7fe fb4b 	bl	8003c58 <xQueueGenericSendFromISR>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3728      	adds	r7, #40	; 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	2000126c 	.word	0x2000126c

080055d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af02      	add	r7, sp, #8
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <prvProcessExpiredTimer+0x94>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe f8d3 	bl	8003798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d022      	beq.n	8005646 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	18d1      	adds	r1, r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	6978      	ldr	r0, [r7, #20]
 800560e:	f000 f8d1 	bl	80057b4 <prvInsertTimerInActiveList>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01f      	beq.n	8005658 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005618:	2300      	movs	r3, #0
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2300      	movs	r3, #0
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	2100      	movs	r1, #0
 8005622:	6978      	ldr	r0, [r7, #20]
 8005624:	f7ff ff88 	bl	8005538 <xTimerGenericCommand>
 8005628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	6978      	ldr	r0, [r7, #20]
 800565e:	4798      	blx	r3
}
 8005660:	bf00      	nop
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20001264 	.word	0x20001264

0800566c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f857 	bl	800572c <prvGetNextExpireTime>
 800567e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4619      	mov	r1, r3
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f803 	bl	8005690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800568a:	f000 f8d5 	bl	8005838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800568e:	e7f1      	b.n	8005674 <prvTimerTask+0x8>

08005690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800569a:	f7ff f945 	bl	8004928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f866 	bl	8005774 <prvSampleTimeNow>
 80056a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d130      	bne.n	8005712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <prvProcessTimerOrBlockTask+0x3c>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d806      	bhi.n	80056cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056be:	f7ff f941 	bl	8004944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff85 	bl	80055d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056ca:	e024      	b.n	8005716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <prvProcessTimerOrBlockTask+0x90>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <prvProcessTimerOrBlockTask+0x50>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <prvProcessTimerOrBlockTask+0x52>
 80056e0:	2300      	movs	r3, #0
 80056e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <prvProcessTimerOrBlockTask+0x94>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fe fea9 	bl	8004448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056f6:	f7ff f925 	bl	8004944 <xTaskResumeAll>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <prvProcessTimerOrBlockTask+0x98>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
}
 8005710:	e001      	b.n	8005716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005712:	f7ff f917 	bl	8004944 <xTaskResumeAll>
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20001268 	.word	0x20001268
 8005724:	2000126c 	.word	0x2000126c
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <prvGetNextExpireTime+0x44>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <prvGetNextExpireTime+0x16>
 800573e:	2201      	movs	r2, #1
 8005740:	e000      	b.n	8005744 <prvGetNextExpireTime+0x18>
 8005742:	2200      	movs	r2, #0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d105      	bne.n	800575c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <prvGetNextExpireTime+0x44>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e001      	b.n	8005760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20001264 	.word	0x20001264

08005774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800577c:	f7ff f980 	bl	8004a80 <xTaskGetTickCount>
 8005780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvSampleTimeNow+0x3c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d205      	bcs.n	8005798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800578c:	f000 f936 	bl	80059fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e002      	b.n	800579e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <prvSampleTimeNow+0x3c>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057a4:	68fb      	ldr	r3, [r7, #12]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20001274 	.word	0x20001274

080057b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d812      	bhi.n	8005800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e01b      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <prvInsertTimerInActiveList+0x7c>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fd ff94 	bl	8003726 <vListInsert>
 80057fe:	e012      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d206      	bcs.n	8005816 <prvInsertTimerInActiveList+0x62>
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e007      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <prvInsertTimerInActiveList+0x80>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7fd ff80 	bl	8003726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005826:	697b      	ldr	r3, [r7, #20]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20001268 	.word	0x20001268
 8005834:	20001264 	.word	0x20001264

08005838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800583e:	e0ca      	b.n	80059d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da18      	bge.n	8005878 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	3304      	adds	r3, #4
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586e:	6850      	ldr	r0, [r2, #4]
 8005870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	4611      	mov	r1, r2
 8005876:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f2c0 80ab 	blt.w	80059d6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7fd ff81 	bl	8003798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005896:	463b      	mov	r3, r7
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ff6b 	bl	8005774 <prvSampleTimeNow>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	f200 8096 	bhi.w	80059d4 <prvProcessReceivedCommands+0x19c>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <prvProcessReceivedCommands+0x78>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	0800594d 	.word	0x0800594d
 80058c0:	08005961 	.word	0x08005961
 80058c4:	080059ab 	.word	0x080059ab
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058d9 	.word	0x080058d9
 80058d0:	0800594d 	.word	0x0800594d
 80058d4:	08005961 	.word	0x08005961
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	18d1      	adds	r1, r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f8:	f7ff ff5c 	bl	80057b4 <prvInsertTimerInActiveList>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d069      	beq.n	80059d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05e      	beq.n	80059d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	441a      	add	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	2100      	movs	r1, #0
 8005928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592a:	f7ff fe05 	bl	8005538 <xTimerGenericCommand>
 800592e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d14f      	bne.n	80059d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	61bb      	str	r3, [r7, #24]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800595e:	e03a      	b.n	80059d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	617b      	str	r3, [r7, #20]
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	18d1      	adds	r1, r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a4:	f7ff ff06 	bl	80057b4 <prvInsertTimerInActiveList>
					break;
 80059a8:	e015      	b.n	80059d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80059b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ba:	f000 fbe1 	bl	8006180 <vPortFree>
 80059be:	e00a      	b.n	80059d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059d2:	e000      	b.n	80059d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80059d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <prvProcessReceivedCommands+0x1c0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	1d39      	adds	r1, r7, #4
 80059dc:	2200      	movs	r2, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe f9d6 	bl	8003d90 <xQueueReceive>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f47f af2a 	bne.w	8005840 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	3730      	adds	r7, #48	; 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	2000126c 	.word	0x2000126c

080059fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a02:	e048      	b.n	8005a96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a04:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0e:	4b2b      	ldr	r3, [pc, #172]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fd febb 	bl	8003798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02e      	beq.n	8005a96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d90e      	bls.n	8005a68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a56:	4b19      	ldr	r3, [pc, #100]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fd fe60 	bl	8003726 <vListInsert>
 8005a66:	e016      	b.n	8005a96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	2100      	movs	r1, #0
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fd60 	bl	8005538 <xTimerGenericCommand>
 8005a78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	603b      	str	r3, [r7, #0]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1b1      	bne.n	8005a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <prvSwitchTimerLists+0xc4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a04      	ldr	r2, [pc, #16]	; (8005abc <prvSwitchTimerLists+0xc0>)
 8005aac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005aae:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <prvSwitchTimerLists+0xc4>)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20001264 	.word	0x20001264
 8005ac0:	20001268 	.word	0x20001268

08005ac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aca:	f000 f96b 	bl	8005da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <prvCheckForValidListAndQueue+0x60>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d120      	bne.n	8005b18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ad6:	4814      	ldr	r0, [pc, #80]	; (8005b28 <prvCheckForValidListAndQueue+0x64>)
 8005ad8:	f7fd fdd4 	bl	8003684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005adc:	4813      	ldr	r0, [pc, #76]	; (8005b2c <prvCheckForValidListAndQueue+0x68>)
 8005ade:	f7fd fdd1 	bl	8003684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <prvCheckForValidListAndQueue+0x6c>)
 8005ae4:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <prvCheckForValidListAndQueue+0x64>)
 8005ae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <prvCheckForValidListAndQueue+0x70>)
 8005aea:	4a10      	ldr	r2, [pc, #64]	; (8005b2c <prvCheckForValidListAndQueue+0x68>)
 8005aec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aee:	2300      	movs	r3, #0
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <prvCheckForValidListAndQueue+0x74>)
 8005af4:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <prvCheckForValidListAndQueue+0x78>)
 8005af6:	2110      	movs	r1, #16
 8005af8:	200a      	movs	r0, #10
 8005afa:	f7fd fedf 	bl	80038bc <xQueueGenericCreateStatic>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <prvCheckForValidListAndQueue+0x60>)
 8005b02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <prvCheckForValidListAndQueue+0x60>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <prvCheckForValidListAndQueue+0x60>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	490b      	ldr	r1, [pc, #44]	; (8005b40 <prvCheckForValidListAndQueue+0x7c>)
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fc6e 	bl	80043f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b18:	f000 f974 	bl	8005e04 <vPortExitCritical>
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000126c 	.word	0x2000126c
 8005b28:	2000123c 	.word	0x2000123c
 8005b2c:	20001250 	.word	0x20001250
 8005b30:	20001264 	.word	0x20001264
 8005b34:	20001268 	.word	0x20001268
 8005b38:	20001318 	.word	0x20001318
 8005b3c:	20001278 	.word	0x20001278
 8005b40:	0800af14 	.word	0x0800af14

08005b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b04      	subs	r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <pxPortInitialiseStack+0x64>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3b14      	subs	r3, #20
 8005b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f06f 0202 	mvn.w	r2, #2
 8005b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b20      	subs	r3, #32
 8005b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	08005bad 	.word	0x08005bad

08005bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <prvTaskExitError+0x54>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bbe:	d00a      	beq.n	8005bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <prvTaskExitError+0x28>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bea:	bf00      	nop
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0fc      	beq.n	8005bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	2000001c 	.word	0x2000001c
	...

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c38:	4808      	ldr	r0, [pc, #32]	; (8005c5c <prvPortStartFirstTask+0x24>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8814 	msr	CONTROL, r0
 8005c4a:	b662      	cpsie	i
 8005c4c:	b661      	cpsie	f
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	df00      	svc	0
 8005c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed08 	.word	0xe000ed08

08005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c66:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a46      	ldr	r2, [pc, #280]	; (8005d84 <xPortStartScheduler+0x124>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10a      	bne.n	8005c86 <xPortStartScheduler+0x26>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c86:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <xPortStartScheduler+0x128>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10a      	bne.n	8005ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	22ff      	movs	r2, #255	; 0xff
 8005cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <xPortStartScheduler+0x130>)
 8005ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd0:	2207      	movs	r2, #7
 8005cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd4:	e009      	b.n	8005cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4a2d      	ldr	r2, [pc, #180]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d0ef      	beq.n	8005cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1c3 0307 	rsb	r3, r3, #7
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00a      	beq.n	8005d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d4e:	f000 f8dd 	bl	8005f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <xPortStartScheduler+0x13c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d58:	f000 f8fc 	bl	8005f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d68:	f7ff ff66 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d6c:	f7fe ff52 	bl	8004c14 <vTaskSwitchContext>
	prvTaskExitError();
 8005d70:	f7ff ff1c 	bl	8005bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000ed00 	.word	0xe000ed00
 8005d84:	410fc271 	.word	0x410fc271
 8005d88:	410fc270 	.word	0x410fc270
 8005d8c:	e000e400 	.word	0xe000e400
 8005d90:	20001368 	.word	0x20001368
 8005d94:	2000136c 	.word	0x2000136c
 8005d98:	e000ed20 	.word	0xe000ed20
 8005d9c:	2000001c 	.word	0x2000001c
 8005da0:	e000ef34 	.word	0xe000ef34

08005da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
}
 8005dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10f      	bne.n	8005df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortEnterCritical+0x5c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <vPortEnterCritical+0x4a>
	}
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000001c 	.word	0x2000001c
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <vPortExitCritical+0x50>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vPortExitCritical+0x24>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <vPortExitCritical+0x50>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <vPortExitCritical+0x50>)
 8005e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <vPortExitCritical+0x50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <vPortExitCritical+0x42>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000001c 	.word	0x2000001c
	...

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f01e 0f10 	tst.w	lr, #16
 8005e70:	bf08      	it	eq
 8005e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e84:	f380 8811 	msr	BASEPRI, r0
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f7fe fec0 	bl	8004c14 <vTaskSwitchContext>
 8005e94:	f04f 0000 	mov.w	r0, #0
 8005e98:	f380 8811 	msr	BASEPRI, r0
 8005e9c:	bc09      	pop	{r0, r3}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	f01e 0f10 	tst.w	lr, #16
 8005eaa:	bf08      	it	eq
 8005eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005eb0:	f380 8809 	msr	PSP, r0
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee2:	f7fe fddd 	bl	8004aa0 <xTaskIncrementTick>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <xPortSysTickHandler+0x40>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <vPortSetupTimerInterrupt+0x38>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <vPortSetupTimerInterrupt+0x3c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <vPortSetupTimerInterrupt+0x40>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <vPortSetupTimerInterrupt+0x44>)
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010
 8005f44:	e000e018 	.word	0xe000e018
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	10624dd3 	.word	0x10624dd3
 8005f50:	e000e014 	.word	0xe000e014

08005f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f64 <vPortEnableVFP+0x10>
 8005f58:	6801      	ldr	r1, [r0, #0]
 8005f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5e:	6001      	str	r1, [r0, #0]
 8005f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f62:	bf00      	nop
 8005f64:	e000ed88 	.word	0xe000ed88

08005f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d914      	bls.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <vPortValidateInterruptPriority+0x70>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <vPortValidateInterruptPriority+0x74>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	7afa      	ldrb	r2, [r7, #11]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d20a      	bcs.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <vPortValidateInterruptPriority+0x78>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <vPortValidateInterruptPriority+0x7c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d90a      	bls.n	8005fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	603b      	str	r3, [r7, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <vPortValidateInterruptPriority+0x60>
	}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	e000e3f0 	.word	0xe000e3f0
 8005fdc:	20001368 	.word	0x20001368
 8005fe0:	e000ed0c 	.word	0xe000ed0c
 8005fe4:	2000136c 	.word	0x2000136c

08005fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff4:	f7fe fc98 	bl	8004928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff8:	4b5b      	ldr	r3, [pc, #364]	; (8006168 <pvPortMalloc+0x180>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006000:	f000 f920 	bl	8006244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006004:	4b59      	ldr	r3, [pc, #356]	; (800616c <pvPortMalloc+0x184>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8093 	bne.w	8006138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01d      	beq.n	8006054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006018:	2208      	movs	r2, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	3308      	adds	r3, #8
 8006032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <pvPortMalloc+0x6c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d06e      	beq.n	8006138 <pvPortMalloc+0x150>
 800605a:	4b45      	ldr	r3, [pc, #276]	; (8006170 <pvPortMalloc+0x188>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d869      	bhi.n	8006138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006064:	4b43      	ldr	r3, [pc, #268]	; (8006174 <pvPortMalloc+0x18c>)
 8006066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006068:	4b42      	ldr	r3, [pc, #264]	; (8006174 <pvPortMalloc+0x18c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800606e:	e004      	b.n	800607a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d903      	bls.n	800608c <pvPortMalloc+0xa4>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f1      	bne.n	8006070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <pvPortMalloc+0x180>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d050      	beq.n	8006138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2208      	movs	r2, #8
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	2308      	movs	r3, #8
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d91f      	bls.n	80060f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <pvPortMalloc+0xf8>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	613b      	str	r3, [r7, #16]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f000 f908 	bl	8006308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <pvPortMalloc+0x188>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <pvPortMalloc+0x188>)
 8006104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <pvPortMalloc+0x188>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <pvPortMalloc+0x190>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d203      	bcs.n	800611a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <pvPortMalloc+0x188>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <pvPortMalloc+0x190>)
 8006118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b13      	ldr	r3, [pc, #76]	; (800616c <pvPortMalloc+0x184>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	431a      	orrs	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <pvPortMalloc+0x194>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a11      	ldr	r2, [pc, #68]	; (800617c <pvPortMalloc+0x194>)
 8006136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006138:	f7fe fc04 	bl	8004944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <pvPortMalloc+0x174>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <pvPortMalloc+0x172>
	return pvReturn;
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20004f78 	.word	0x20004f78
 800616c:	20004f8c 	.word	0x20004f8c
 8006170:	20004f7c 	.word	0x20004f7c
 8006174:	20004f70 	.word	0x20004f70
 8006178:	20004f80 	.word	0x20004f80
 800617c:	20004f84 	.word	0x20004f84

08006180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04d      	beq.n	800622e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006192:	2308      	movs	r3, #8
 8006194:	425b      	negs	r3, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <vPortFree+0xb8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <vPortFree+0x44>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <vPortFree+0x62>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60bb      	str	r3, [r7, #8]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <vPortFree+0xb8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11a      	bne.n	800622e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <vPortFree+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006208:	f7fe fb8e 	bl	8004928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <vPortFree+0xbc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4413      	add	r3, r2
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <vPortFree+0xbc>)
 8006218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800621a:	6938      	ldr	r0, [r7, #16]
 800621c:	f000 f874 	bl	8006308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <vPortFree+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a06      	ldr	r2, [pc, #24]	; (8006240 <vPortFree+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800622a:	f7fe fb8b 	bl	8004944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20004f8c 	.word	0x20004f8c
 800623c:	20004f7c 	.word	0x20004f7c
 8006240:	20004f88 	.word	0x20004f88

08006244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800624e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <prvHeapInit+0xac>)
 8006252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3307      	adds	r3, #7
 8006262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <prvHeapInit+0xac>)
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <prvHeapInit+0xb0>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <prvHeapInit+0xb0>)
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006290:	2208      	movs	r2, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <prvHeapInit+0xb4>)
 80062a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <prvHeapInit+0xb4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <prvHeapInit+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <prvHeapInit+0xb4>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <prvHeapInit+0xb8>)
 80062d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <prvHeapInit+0xbc>)
 80062da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <prvHeapInit+0xc0>)
 80062de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20001370 	.word	0x20001370
 80062f4:	20004f70 	.word	0x20004f70
 80062f8:	20004f78 	.word	0x20004f78
 80062fc:	20004f80 	.word	0x20004f80
 8006300:	20004f7c 	.word	0x20004f7c
 8006304:	20004f8c 	.word	0x20004f8c

08006308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <prvInsertBlockIntoFreeList+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e002      	b.n	800631c <prvInsertBlockIntoFreeList+0x14>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d8f7      	bhi.n	8006316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d108      	bne.n	800634a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d118      	bne.n	8006390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d00d      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e008      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e003      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d002      	beq.n	80063a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20004f70 	.word	0x20004f70
 80063b8:	20004f78 	.word	0x20004f78

080063bc <_prep_out_transaction>:
  midid_interface_t* midi = &_midid_itf[itf];
  return midi->ep_in && midi->ep_out;
}

static void _prep_out_transaction (midid_interface_t* p_midi)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_midi->rx_ff);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3310      	adds	r3, #16
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f837 	bl	8007440 <tu_fifo_remaining>
 80063d2:	4603      	mov	r3, r0
 80063d4:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_midi->epout_buf), );
 80063d6:	89bb      	ldrh	r3, [r7, #12]
 80063d8:	2b3f      	cmp	r3, #63	; 0x3f
 80063da:	d927      	bls.n	800642c <_prep_out_transaction+0x70>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_midi->ep_out), );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	789a      	ldrb	r2, [r3, #2]
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f002 fb1b 	bl	8008a20 <usbd_edpt_claim>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11a      	bne.n	800642c <_prep_out_transaction+0x70>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_midi->rx_ff);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3310      	adds	r3, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f820 	bl	8007440 <tu_fifo_remaining>
 8006400:	4603      	mov	r3, r0
 8006402:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_midi->epout_buf) )  {
 8006404:	89bb      	ldrh	r3, [r7, #12]
 8006406:	2b3f      	cmp	r3, #63	; 0x3f
 8006408:	d909      	bls.n	800641e <_prep_out_transaction+0x62>
    usbd_edpt_xfer(rhport, p_midi->ep_out, p_midi->epout_buf, sizeof(p_midi->epout_buf));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7899      	ldrb	r1, [r3, #2]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006414:	7bf8      	ldrb	r0, [r7, #15]
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	f002 fb5e 	bl	8008ad8 <usbd_edpt_xfer>
 800641c:	e006      	b.n	800642c <_prep_out_transaction+0x70>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_midi->ep_out);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	789a      	ldrb	r2, [r3, #2]
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f002 fb28 	bl	8008a7c <usbd_edpt_release>
  }
}
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <write_flush>:
//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+

static uint32_t write_flush(midid_interface_t* midi)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  // No data to send
  if ( !tu_fifo_count(&midi->tx_ff) ) return 0;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3324      	adds	r3, #36	; 0x24
 8006440:	4618      	mov	r0, r3
 8006442:	f000 ffcb 	bl	80073dc <tu_fifo_count>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <write_flush+0x1c>
 800644c:	2300      	movs	r3, #0
 800644e:	e043      	b.n	80064d8 <write_flush+0xa4>

  uint8_t const rhport = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]

  // skip if previous transfer not complete
  TU_VERIFY( usbd_edpt_claim(rhport, midi->ep_in), 0 );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	785a      	ldrb	r2, [r3, #1]
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fadf 	bl	8008a20 <usbd_edpt_claim>
 8006462:	4603      	mov	r3, r0
 8006464:	f083 0301 	eor.w	r3, r3, #1
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <write_flush+0x3e>
 800646e:	2300      	movs	r3, #0
 8006470:	e032      	b.n	80064d8 <write_flush+0xa4>

  uint16_t count = tu_fifo_read_n(&midi->tx_ff, midi->epin_buf, CFG_TUD_MIDI_EP_BUFSIZE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	4619      	mov	r1, r3
 8006482:	f001 f815 	bl	80074b0 <tu_fifo_read_n>
 8006486:	4603      	mov	r3, r0
 8006488:	81bb      	strh	r3, [r7, #12]

  if (count)
 800648a:	89bb      	ldrh	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01b      	beq.n	80064c8 <write_flush+0x94>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, midi->ep_in, midi->epin_buf, count), 0 );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	7859      	ldrb	r1, [r3, #1]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800649a:	89bb      	ldrh	r3, [r7, #12]
 800649c:	7bf8      	ldrb	r0, [r7, #15]
 800649e:	f002 fb1b 	bl	8008ad8 <usbd_edpt_xfer>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <write_flush+0x90>
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <write_flush+0xac>)
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d000      	beq.n	80064c0 <write_flush+0x8c>
 80064be:	be00      	bkpt	0x0000
 80064c0:	2300      	movs	r3, #0
 80064c2:	e009      	b.n	80064d8 <write_flush+0xa4>
    return count;
 80064c4:	89bb      	ldrh	r3, [r7, #12]
 80064c6:	e007      	b.n	80064d8 <write_flush+0xa4>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, midi->ep_in);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	785a      	ldrb	r2, [r3, #1]
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 fad3 	bl	8008a7c <usbd_edpt_release>
    return 0;
 80064d6:	2300      	movs	r3, #0
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	e000edf0 	.word	0xe000edf0

080064e4 <midid_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void midid_init(void)
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b08d      	sub	sp, #52	; 0x34
 80064e8:	af02      	add	r7, sp, #8
  tu_memclr(_midid_itf, sizeof(_midid_itf));
 80064ea:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80064ee:	2100      	movs	r1, #0
 80064f0:	4831      	ldr	r0, [pc, #196]	; (80065b8 <midid_init+0xd4>)
 80064f2:	f004 fca2 	bl	800ae3a <memset>

  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064fc:	e052      	b.n	80065a4 <midid_init+0xc0>
  {
    midid_interface_t* midi = &_midid_itf[i];
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006502:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <midid_init+0xd4>)
 800650c:	4413      	add	r3, r2
 800650e:	623b      	str	r3, [r7, #32]

    // config fifo
    tu_fifo_config(&midi->rx_ff, midi->rx_ff_buf, CFG_TUD_MIDI_RX_BUFSIZE, 1, false); // true, true
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	f103 0010 	add.w	r0, r3, #16
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800651c:	2300      	movs	r3, #0
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2301      	movs	r3, #1
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	f000 fa40 	bl	80069a8 <tu_fifo_config>
    tu_fifo_config(&midi->tx_ff, midi->tx_ff_buf, CFG_TUD_MIDI_TX_BUFSIZE, 1, false); // OBVS.
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2301      	movs	r3, #1
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	f000 fa34 	bl	80069a8 <tu_fifo_config>

    #if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&midi->rx_ff, NULL, osal_mutex_create(&midi->rx_ff_mutex));
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f103 0410 	add.w	r4, r3, #16
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	33b8      	adds	r3, #184	; 0xb8
 800654a:	603b      	str	r3, [r7, #0]
// MUTEX API (priority inheritance)
//--------------------------------------------------------------------+

TU_ATTR_ALWAYS_INLINE static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t *mdef) {
#if configSUPPORT_STATIC_ALLOCATION
  return xSemaphoreCreateMutexStatic(mdef);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	2001      	movs	r0, #1
 8006550:	f7fd fa69 	bl	8003a26 <xQueueCreateMutexStatic>
 8006554:	4603      	mov	r3, r0
 8006556:	60fc      	str	r4, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	60ba      	str	r2, [r7, #8]
 800655c:	607b      	str	r3, [r7, #4]

#if OSAL_MUTEX_REQUIRED
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, osal_mutex_t wr_mutex, osal_mutex_t rd_mutex)
{
  f->mutex_wr = wr_mutex;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]
}
 800656a:	bf00      	nop
    tu_fifo_config_mutex(&midi->tx_ff, osal_mutex_create(&midi->tx_ff_mutex), NULL);
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	6939      	ldr	r1, [r7, #16]
 800657c:	2001      	movs	r0, #1
 800657e:	f7fd fa52 	bl	8003a26 <xQueueCreateMutexStatic>
 8006582:	4603      	mov	r3, r0
 8006584:	61fc      	str	r4, [r7, #28]
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  f->mutex_wr = wr_mutex;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	611a      	str	r2, [r3, #16]
}
 8006598:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 800659a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0a8      	beq.n	80064fe <midid_init+0x1a>
    #endif
  }
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	372c      	adds	r7, #44	; 0x2c
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20004f90 	.word	0x20004f90

080065bc <midid_reset>:

void midid_reset(uint8_t rhport)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e019      	b.n	8006600 <midid_reset+0x44>
  {
    midid_interface_t* midi = &_midid_itf[i];
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <midid_reset+0x54>)
 80065d8:	4413      	add	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]
    tu_memclr(midi, ITF_MEM_RESET_SIZE);
 80065dc:	2210      	movs	r2, #16
 80065de:	2100      	movs	r1, #0
 80065e0:	68b8      	ldr	r0, [r7, #8]
 80065e2:	f004 fc2a 	bl	800ae3a <memset>
    tu_fifo_clear(&midi->rx_ff);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3310      	adds	r3, #16
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 ffa8 	bl	8007540 <tu_fifo_clear>
    tu_fifo_clear(&midi->tx_ff);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3324      	adds	r3, #36	; 0x24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 ffa3 	bl	8007540 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	3301      	adds	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0e2      	beq.n	80065cc <midid_reset+0x10>
  }
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20004f90 	.word	0x20004f90

08006614 <midid_open>:

uint16_t midid_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b09e      	sub	sp, #120	; 0x78
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	6039      	str	r1, [r7, #0]
 800661e:	71fb      	strb	r3, [r7, #7]
 8006620:	4613      	mov	r3, r2
 8006622:	80bb      	strh	r3, [r7, #4]
  // 1st Interface is Audio Control v1
  TU_VERIFY(TUSB_CLASS_AUDIO               == desc_itf->bInterfaceClass    &&
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	795b      	ldrb	r3, [r3, #5]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <midid_open+0x28>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	799b      	ldrb	r3, [r3, #6]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d103      	bne.n	800663c <midid_open+0x28>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	79db      	ldrb	r3, [r3, #7]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <midid_open+0x2c>
 800663c:	2300      	movs	r3, #0
 800663e:	e115      	b.n	800686c <midid_open+0x258>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	64fb      	str	r3, [r7, #76]	; 0x4c
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006646:	781b      	ldrb	r3, [r3, #0]
            AUDIO_SUBCLASS_CONTROL         == desc_itf->bInterfaceSubClass &&
            AUDIO_FUNC_PROTOCOL_CODE_UNDEF == desc_itf->bInterfaceProtocol, 0);

  uint16_t drv_len = tu_desc_len(desc_itf);
 8006648:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006652:	653b      	str	r3, [r7, #80]	; 0x50
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665c:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next(desc_itf);
 800665e:	673b      	str	r3, [r7, #112]	; 0x70

  // Skip Class Specific descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8006660:	e013      	b.n	800668a <midid_open+0x76>
 8006662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006664:	643b      	str	r3, [r7, #64]	; 0x40
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006670:	4413      	add	r3, r2
 8006672:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8006676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006678:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t const* desc8 = (uint8_t const*) desc;
 800667a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667c:	647b      	str	r3, [r7, #68]	; 0x44
  return desc8 + desc8[DESC_OFFSET_LEN];
 800667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006686:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8006688:	673b      	str	r3, [r7, #112]	; 0x70
 800668a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	3301      	adds	r3, #1
 8006692:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8006694:	2b24      	cmp	r3, #36	; 0x24
 8006696:	d104      	bne.n	80066a2 <midid_open+0x8e>
 8006698:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800669c:	88bb      	ldrh	r3, [r7, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d9df      	bls.n	8006662 <midid_open+0x4e>
 80066a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	3301      	adds	r3, #1
 80066aa:	781b      	ldrb	r3, [r3, #0]
  }

  // 2nd Interface is MIDI Streaming
  TU_VERIFY(TUSB_DESC_INTERFACE == tu_desc_type(p_desc), 0);
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d001      	beq.n	80066b4 <midid_open+0xa0>
 80066b0:	2300      	movs	r3, #0
 80066b2:	e0db      	b.n	800686c <midid_open+0x258>
  tusb_desc_interface_t const * desc_midi = (tusb_desc_interface_t const *) p_desc;
 80066b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b6:	667b      	str	r3, [r7, #100]	; 0x64

  TU_VERIFY(TUSB_CLASS_AUDIO               == desc_midi->bInterfaceClass    &&
 80066b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ba:	795b      	ldrb	r3, [r3, #5]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <midid_open+0xbc>
 80066c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c2:	799b      	ldrb	r3, [r3, #6]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d103      	bne.n	80066d0 <midid_open+0xbc>
 80066c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ca:	79db      	ldrb	r3, [r3, #7]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <midid_open+0xc0>
 80066d0:	2300      	movs	r3, #0
 80066d2:	e0cb      	b.n	800686c <midid_open+0x258>
            AUDIO_SUBCLASS_MIDI_STREAMING  == desc_midi->bInterfaceSubClass &&
            AUDIO_FUNC_PROTOCOL_CODE_UNDEF == desc_midi->bInterfaceProtocol, 0);

  // Find available interface
  midid_interface_t * p_midi = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80066de:	e026      	b.n	800672e <midid_open+0x11a>
  {
    if ( _midid_itf[i].ep_in == 0 && _midid_itf[i].ep_out == 0 )
 80066e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80066e4:	4a63      	ldr	r2, [pc, #396]	; (8006874 <midid_open+0x260>)
 80066e6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	3301      	adds	r3, #1
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d115      	bne.n	8006724 <midid_open+0x110>
 80066f8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80066fc:	4a5d      	ldr	r2, [pc, #372]	; (8006874 <midid_open+0x260>)
 80066fe:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	3302      	adds	r3, #2
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <midid_open+0x110>
    {
      p_midi = &_midid_itf[i];
 8006710:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006714:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	4a55      	ldr	r2, [pc, #340]	; (8006874 <midid_open+0x260>)
 800671e:	4413      	add	r3, r2
 8006720:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
 8006722:	e008      	b.n	8006736 <midid_open+0x122>
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 8006724:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006728:	3301      	adds	r3, #1
 800672a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800672e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0d4      	beq.n	80066e0 <midid_open+0xcc>
    }
  }
  TU_ASSERT(p_midi);
 8006736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <midid_open+0x13e>
 800673c:	4b4e      	ldr	r3, [pc, #312]	; (8006878 <midid_open+0x264>)
 800673e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d000      	beq.n	800674e <midid_open+0x13a>
 800674c:	be00      	bkpt	0x0000
 800674e:	2300      	movs	r3, #0
 8006750:	e08c      	b.n	800686c <midid_open+0x258>

  p_midi->itf_num = desc_midi->bInterfaceNumber;
 8006752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006754:	789a      	ldrb	r2, [r3, #2]
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	781b      	ldrb	r3, [r3, #0]
  (void) p_midi->itf_num;

  // next descriptor
  drv_len += tu_desc_len(p_desc);
 8006762:	b29a      	uxth	r2, r3
 8006764:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006768:	4413      	add	r3, r2
 800676a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800676e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	4413      	add	r3, r2
  p_desc   = tu_desc_next(p_desc);
 8006780:	673b      	str	r3, [r7, #112]	; 0x70

  // Find and open endpoint descriptors
  uint8_t found_endpoints = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  while ( (found_endpoints < desc_midi->bNumEndpoints) && (drv_len <= max_len)  )
 8006788:	e060      	b.n	800684c <midid_open+0x238>
 800678a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	3301      	adds	r3, #1
 8006792:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8006794:	2b05      	cmp	r3, #5
 8006796:	d145      	bne.n	8006824 <midid_open+0x210>
    {
      TU_ASSERT(usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0);
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800679c:	4618      	mov	r0, r3
 800679e:	f002 f8fb 	bl	8008998 <usbd_edpt_open>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f083 0301 	eor.w	r3, r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <midid_open+0x1b0>
 80067ae:	4b32      	ldr	r3, [pc, #200]	; (8006878 <midid_open+0x264>)
 80067b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d000      	beq.n	80067c0 <midid_open+0x1ac>
 80067be:	be00      	bkpt	0x0000
 80067c0:	2300      	movs	r3, #0
 80067c2:	e053      	b.n	800686c <midid_open+0x258>
      uint8_t ep_addr = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
 80067c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80067cc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80067d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80067d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d8:	09db      	lsrs	r3, r3, #7
 80067da:	b2db      	uxtb	r3, r3

      if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN)
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d104      	bne.n	80067ea <midid_open+0x1d6>
      {
        p_midi->ep_in = ep_addr;
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80067e6:	705a      	strb	r2, [r3, #1]
 80067e8:	e003      	b.n	80067f2 <midid_open+0x1de>
      } else {
        p_midi->ep_out = ep_addr;
 80067ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ec:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80067f0:	709a      	strb	r2, [r3, #2]
 80067f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067f4:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	781b      	ldrb	r3, [r3, #0]
      }

      // Class Specific MIDI Stream endpoint descriptor
      drv_len += tu_desc_len(p_desc);
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006800:	4413      	add	r3, r2
 8006802:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8006806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006808:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
      p_desc   = tu_desc_next(p_desc);
 8006818:	673b      	str	r3, [r7, #112]	; 0x70

      found_endpoints += 1;
 800681a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800681e:	3301      	adds	r3, #1
 8006820:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8006824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	781b      	ldrb	r3, [r3, #0]
    }

    drv_len += tu_desc_len(p_desc);
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006832:	4413      	add	r3, r2
 8006834:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8006838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800683a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800684a:	673b      	str	r3, [r7, #112]	; 0x70
  while ( (found_endpoints < desc_midi->bNumEndpoints) && (drv_len <= max_len)  )
 800684c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8006854:	429a      	cmp	r2, r3
 8006856:	d204      	bcs.n	8006862 <midid_open+0x24e>
 8006858:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800685c:	88bb      	ldrh	r3, [r7, #4]
 800685e:	429a      	cmp	r2, r3
 8006860:	d993      	bls.n	800678a <midid_open+0x176>
  }

  // Prepare for incoming data
  _prep_out_transaction(p_midi);
 8006862:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006864:	f7ff fdaa 	bl	80063bc <_prep_out_transaction>

  return drv_len;
 8006868:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
}
 800686c:	4618      	mov	r0, r3
 800686e:	3778      	adds	r7, #120	; 0x78
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20004f90 	.word	0x20004f90
 8006878:	e000edf0 	.word	0xe000edf0

0800687c <midid_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool midid_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	603a      	str	r2, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
 8006888:	460b      	mov	r3, r1
 800688a:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) stage;
  (void) request;

  // driver doesn't support any request yet
  return false;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <midid_xfer_cb>:

bool midid_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4603      	mov	r3, r0
 80068a6:	71fb      	strb	r3, [r7, #7]
 80068a8:	460b      	mov	r3, r1
 80068aa:	71bb      	strb	r3, [r7, #6]
 80068ac:	4613      	mov	r3, r2
 80068ae:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  midid_interface_t* p_midi;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_MIDI; itf++)
 80068b0:	2300      	movs	r3, #0
 80068b2:	75fb      	strb	r3, [r7, #23]
 80068b4:	e014      	b.n	80068e0 <midid_xfer_cb+0x44>
  {
    p_midi = &_midid_itf[itf];
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	4a36      	ldr	r2, [pc, #216]	; (800699c <midid_xfer_cb+0x100>)
 80068c2:	4413      	add	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_midi->ep_out ) || ( ep_addr == p_midi->ep_in ) ) break;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	789b      	ldrb	r3, [r3, #2]
 80068ca:	79ba      	ldrb	r2, [r7, #6]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d00a      	beq.n	80068e6 <midid_xfer_cb+0x4a>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	79ba      	ldrb	r2, [r7, #6]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d005      	beq.n	80068e6 <midid_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_MIDI; itf++)
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	3301      	adds	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0e7      	beq.n	80068b6 <midid_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_MIDI);
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <midid_xfer_cb+0x66>
 80068ec:	4b2c      	ldr	r3, [pc, #176]	; (80069a0 <midid_xfer_cb+0x104>)
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d000      	beq.n	80068fe <midid_xfer_cb+0x62>
 80068fc:	be00      	bkpt	0x0000
 80068fe:	2300      	movs	r3, #0
 8006900:	e047      	b.n	8006992 <midid_xfer_cb+0xf6>

  // receive new data
  if ( ep_addr == p_midi->ep_out )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	789b      	ldrb	r3, [r3, #2]
 8006906:	79ba      	ldrb	r2, [r7, #6]
 8006908:	429a      	cmp	r2, r3
 800690a:	d115      	bne.n	8006938 <midid_xfer_cb+0x9c>
  {
    tu_fifo_write_n(&p_midi->rx_ff, p_midi->epout_buf, (uint16_t) xferred_bytes);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f103 0010 	add.w	r0, r3, #16
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	b292      	uxth	r2, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f000 fdeb 	bl	80074f8 <tu_fifo_write_n>

    // invoke receive callback if available
    if (tud_midi_rx_cb) tud_midi_rx_cb(itf);
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <midid_xfer_cb+0x108>)
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <midid_xfer_cb+0x94>
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	4618      	mov	r0, r3
 800692c:	f3af 8000 	nop.w

    // prepare for next
    // TODO for now ep_out is not used by public API therefore there is no race condition,
    // and does not need to claim like ep_in
    _prep_out_transaction(p_midi);
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7ff fd43 	bl	80063bc <_prep_out_transaction>
 8006936:	e02b      	b.n	8006990 <midid_xfer_cb+0xf4>
  }
  else if ( ep_addr == p_midi->ep_in )
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	79ba      	ldrb	r2, [r7, #6]
 800693e:	429a      	cmp	r2, r3
 8006940:	d126      	bne.n	8006990 <midid_xfer_cb+0xf4>
  {
    if (0 == write_flush(p_midi))
 8006942:	6938      	ldr	r0, [r7, #16]
 8006944:	f7ff fd76 	bl	8006434 <write_flush>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d120      	bne.n	8006990 <midid_xfer_cb+0xf4>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP size and not zero
      if ( !tu_fifo_count(&p_midi->tx_ff) && xferred_bytes && (0 == (xferred_bytes % CFG_TUD_MIDI_EP_BUFSIZE)) )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	3324      	adds	r3, #36	; 0x24
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fd42 	bl	80073dc <tu_fifo_count>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d118      	bne.n	8006990 <midid_xfer_cb+0xf4>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d015      	beq.n	8006990 <midid_xfer_cb+0xf4>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <midid_xfer_cb+0xf4>
      {
        if ( usbd_edpt_claim(rhport, p_midi->ep_in) )
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	785a      	ldrb	r2, [r3, #1]
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f002 f852 	bl	8008a20 <usbd_edpt_claim>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <midid_xfer_cb+0xf4>
        {
          usbd_edpt_xfer(rhport, p_midi->ep_in, NULL, 0);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	7859      	ldrb	r1, [r3, #1]
 8006986:	79f8      	ldrb	r0, [r7, #7]
 8006988:	2300      	movs	r3, #0
 800698a:	2200      	movs	r2, #0
 800698c:	f002 f8a4 	bl	8008ad8 <usbd_edpt_xfer>
        }
      }
    }
  }

  return true;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20004f90 	.word	0x20004f90
 80069a0:	e000edf0 	.word	0xe000edf0
 80069a4:	00000000 	.word	0x00000000

080069a8 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b096      	sub	sp, #88	; 0x58
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4611      	mov	r1, r2
 80069b4:	461a      	mov	r2, r3
 80069b6:	460b      	mov	r3, r1
 80069b8:	80fb      	strh	r3, [r7, #6]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c4:	d901      	bls.n	80069ca <tu_fifo_config+0x22>
 80069c6:	2300      	movs	r3, #0
 80069c8:	e0a6      	b.n	8006b18 <tu_fifo_config+0x170>

  _ff_lock(f->mutex_wr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02c      	beq.n	8006a30 <tu_fifo_config+0x88>
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069de:	623b      	str	r3, [r7, #32]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	617b      	str	r3, [r7, #20]
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f2:	d102      	bne.n	80069fa <tu_fifo_config+0x52>
 80069f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f8:	e014      	b.n	8006a24 <tu_fifo_config+0x7c>
  if ( msec == 0 ) return 0;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <tu_fifo_config+0x5c>
 8006a00:	2300      	movs	r3, #0
 8006a02:	e00f      	b.n	8006a24 <tu_fifo_config+0x7c>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	4a44      	ldr	r2, [pc, #272]	; (8006b20 <tu_fifo_config+0x178>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	099b      	lsrs	r3, r3, #6
 8006a16:	613b      	str	r3, [r7, #16]
  if ( ticks == 0 ) ticks = 1;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <tu_fifo_config+0x7a>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
  return ticks;
 8006a22:	693b      	ldr	r3, [r7, #16]
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 8006a24:	4619      	mov	r1, r3
 8006a26:	69f8      	ldr	r0, [r7, #28]
 8006a28:	f7fd fa92 	bl	8003f50 <xQueueSemaphoreTake>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
}
 8006a30:	bf00      	nop
  _ff_lock(f->mutex_rd);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8006a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02c      	beq.n	8006a98 <tu_fifo_config+0xf0>
 8006a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	633b      	str	r3, [r7, #48]	; 0x30
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5a:	d102      	bne.n	8006a62 <tu_fifo_config+0xba>
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a60:	e014      	b.n	8006a8c <tu_fifo_config+0xe4>
  if ( msec == 0 ) return 0;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <tu_fifo_config+0xc4>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e00f      	b.n	8006a8c <tu_fifo_config+0xe4>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a72:	fb02 f303 	mul.w	r3, r2, r3
 8006a76:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <tu_fifo_config+0x178>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	099b      	lsrs	r3, r3, #6
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if ( ticks == 0 ) ticks = 1;
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <tu_fifo_config+0xe2>
 8006a86:	2301      	movs	r3, #1
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ticks;
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a90:	f7fd fa5e 	bl	8003f50 <xQueueSemaphoreTake>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
}
 8006a98:	bf00      	nop

  f->buffer       = (uint8_t*) buffer;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8006aa6:	88bb      	ldrh	r3, [r7, #4]
 8006aa8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006aac:	b299      	uxth	r1, r3
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	88d3      	ldrh	r3, [r2, #6]
 8006ab2:	f361 030e 	bfi	r3, r1, #0, #15
 8006ab6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	79d3      	ldrb	r3, [r2, #7]
 8006abc:	f897 1060 	ldrb.w	r1, [r7, #96]	; 0x60
 8006ac0:	f361 13c7 	bfi	r3, r1, #7, #1
 8006ac4:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (mutex) osal_mutex_unlock(mutex);
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <tu_fifo_config+0x14a>
 8006ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_lock(osal_mutex_t mutex_hdl, uint32_t msec) {
  return osal_semaphore_wait(mutex_hdl, msec);
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl) {
  return xSemaphoreGive(mutex_hdl);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006aea:	f7fc ffb7 	bl	8003a5c <xQueueGenericSend>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
}
 8006af2:	bf00      	nop
  _ff_unlock(f->mutex_rd);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	657b      	str	r3, [r7, #84]	; 0x54
  if (mutex) osal_mutex_unlock(mutex);
 8006afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <tu_fifo_config+0x16c>
 8006b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b02:	653b      	str	r3, [r7, #80]	; 0x50
 8006b04:	2300      	movs	r3, #0
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b0c:	f7fc ffa6 	bl	8003a5c <xQueueGenericSend>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
}
 8006b14:	bf00      	nop

  return true;
 8006b16:	2301      	movs	r3, #1
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3758      	adds	r7, #88	; 0x58
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	10624dd3 	.word	0x10624dd3

08006b24 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	089b      	lsrs	r3, r3, #2
 8006b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8006b3c:	e00b      	b.n	8006b56 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	61ba      	str	r2, [r7, #24]
 8006b46:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
    ff_buf += 4;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3304      	adds	r3, #4
 8006b54:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b58:	1e5a      	subs	r2, r3, #1
 8006b5a:	84fa      	strh	r2, [r7, #38]	; 0x26
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1ee      	bne.n	8006b3e <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006b6a:	7ffb      	ldrb	r3, [r7, #31]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8006b76:	7ffa      	ldrb	r2, [r7, #31]
 8006b78:	f107 0310 	add.w	r3, r7, #16
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f004 f988 	bl	800ae94 <memcpy>
  }
}
 8006b84:	bf00      	nop
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8006ba4:	e008      	b.n	8006bb8 <_ff_pull_const_addr+0x2c>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8006bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	84fa      	strh	r2, [r7, #38]	; 0x26
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f1      	bne.n	8006ba6 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006bcc:	7ffb      	ldrb	r3, [r7, #31]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8006bd6:	7ffa      	ldrb	r2, [r7, #31]
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f004 f958 	bl	800ae94 <memcpy>

    *reg_tx = tmp32;
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	601a      	str	r2, [r3, #0]
  }
}
 8006bea:	bf00      	nop
 8006bec:	3728      	adds	r7, #40	; 0x28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ff_push_n>:
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
}

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b08e      	sub	sp, #56	; 0x38
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	460b      	mov	r3, r1
 8006c02:	80fb      	strh	r3, [r7, #6]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	889a      	ldrh	r2, [r3, #4]
 8006c0c:	88bb      	ldrh	r3, [r7, #4]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c28:	fb13 f302 	smulbb	r3, r3, r2
 8006c2c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3c:	fb13 f302 	smulbb	r3, r3, r2
 8006c40:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	88ba      	ldrh	r2, [r7, #4]
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	88c9      	ldrh	r1, [r1, #6]
 8006c4c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006c50:	b289      	uxth	r1, r1
 8006c52:	fb01 f202 	mul.w	r2, r1, r2
 8006c56:	4413      	add	r3, r2
 8006c58:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006c5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <_ff_push_n+0x76>
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d022      	beq.n	8006cac <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8006c66:	e09e      	b.n	8006da6 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d80d      	bhi.n	8006c8c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	88d2      	ldrh	r2, [r2, #6]
 8006c76:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c86:	f004 f905 	bl	800ae94 <memcpy>
      break;
 8006c8a:	e08c      	b.n	8006da6 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8006c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c94:	f004 f8fe 	bl	800ae94 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f004 f8f5 	bl	800ae94 <memcpy>
      break;
 8006caa:	e07c      	b.n	8006da6 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d80f      	bhi.n	8006cd4 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	fb13 f302 	smulbb	r3, r3, r2
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cce:	f7ff ff29 	bl	8006b24 <_ff_push_const_addr>
      break;
 8006cd2:	e067      	b.n	8006da4 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8006cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8006cdc:	8c3b      	ldrh	r3, [r7, #32]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce4:	f7ff ff1e 	bl	8006b24 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006ce8:	8c3b      	ldrh	r3, [r7, #32]
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	4413      	add	r3, r2
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006cf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8006cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d043      	beq.n	8006d8c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f1c3 0304 	rsb	r3, r3, #4
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d16:	837b      	strh	r3, [r7, #26]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006d1c:	8b7a      	ldrh	r2, [r7, #26]
 8006d1e:	8b3b      	ldrh	r3, [r7, #24]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	bf28      	it	cs
 8006d24:	4613      	movcs	r3, r2
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8006d2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8006d3e:	f107 0314 	add.w	r3, r7, #20
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8006d44:	e007      	b.n	8006d56 <_ff_push_n+0x164>
 8006d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d48:	1c53      	adds	r3, r2, #1
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	1c59      	adds	r1, r3, #1
 8006d50:	6339      	str	r1, [r7, #48]	; 0x30
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8006d6a:	e007      	b.n	8006d7c <_ff_push_n+0x18a>
 8006d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6e:	1c53      	adds	r3, r2, #1
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	6339      	str	r1, [r7, #48]	; 0x30
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006d80:	1e5a      	subs	r2, r3, #1
 8006d82:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f0      	bne.n	8006d6c <_ff_push_n+0x17a>
 8006d8a:	e002      	b.n	8006d92 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8006d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <_ff_push_n+0x1b2>
 8006d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da0:	f7ff fec0 	bl	8006b24 <_ff_push_const_addr>
      break;
 8006da4:	bf00      	nop
}
 8006da6:	bf00      	nop
 8006da8:	3738      	adds	r7, #56	; 0x38
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b08e      	sub	sp, #56	; 0x38
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4611      	mov	r1, r2
 8006dba:	461a      	mov	r2, r3
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	80fb      	strh	r3, [r7, #6]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	889a      	ldrh	r2, [r3, #4]
 8006dc8:	88bb      	ldrh	r3, [r7, #4]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	88db      	ldrh	r3, [r3, #6]
 8006dda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006de4:	fb13 f302 	smulbb	r3, r3, r2
 8006de8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006df8:	fb13 f302 	smulbb	r3, r3, r2
 8006dfc:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	88ba      	ldrh	r2, [r7, #4]
 8006e04:	68f9      	ldr	r1, [r7, #12]
 8006e06:	88c9      	ldrh	r1, [r1, #6]
 8006e08:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006e0c:	b289      	uxth	r1, r1
 8006e0e:	fb01 f202 	mul.w	r2, r1, r2
 8006e12:	4413      	add	r3, r2
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006e16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <_ff_pull_n+0x76>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d022      	beq.n	8006e68 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8006e22:	e0a0      	b.n	8006f66 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d80d      	bhi.n	8006e48 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	88d2      	ldrh	r2, [r2, #6]
 8006e32:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006e36:	b292      	uxth	r2, r2
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e40:	68b8      	ldr	r0, [r7, #8]
 8006e42:	f004 f827 	bl	800ae94 <memcpy>
    break;
 8006e46:	e08e      	b.n	8006f66 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8006e48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4e:	68b8      	ldr	r0, [r7, #8]
 8006e50:	f004 f820 	bl	800ae94 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8006e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	18d0      	adds	r0, r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e60:	4619      	mov	r1, r3
 8006e62:	f004 f817 	bl	800ae94 <memcpy>
    break;
 8006e66:	e07e      	b.n	8006f66 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d80f      	bhi.n	8006e90 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88db      	ldrh	r3, [r3, #6]
 8006e74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	fb13 f302 	smulbb	r3, r3, r2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e88:	68b8      	ldr	r0, [r7, #8]
 8006e8a:	f7ff fe7f 	bl	8006b8c <_ff_pull_const_addr>
    break;
 8006e8e:	e069      	b.n	8006f64 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8006e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8006e98:	8c3b      	ldrh	r3, [r7, #32]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7ff fe74 	bl	8006b8c <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006ea4:	8c3b      	ldrh	r3, [r7, #32]
 8006ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea8:	4413      	add	r3, r2
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006eac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8006eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d045      	beq.n	8006f4c <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f1c3 0304 	rsb	r3, r3, #4
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ed2:	837b      	strh	r3, [r7, #26]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	833b      	strh	r3, [r7, #24]
 8006ed8:	8b7a      	ldrh	r2, [r7, #26]
 8006eda:	8b3b      	ldrh	r3, [r7, #24]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bf28      	it	cs
 8006ee0:	4613      	movcs	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8006ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006efe:	e007      	b.n	8006f10 <_ff_pull_n+0x162>
 8006f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f02:	1c53      	adds	r3, r2, #1
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006f24:	e007      	b.n	8006f36 <_ff_pull_n+0x188>
 8006f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f28:	1c53      	adds	r3, r2, #1
 8006f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	1c59      	adds	r1, r3, #1
 8006f30:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f3a:	1e5a      	subs	r2, r3, #1
 8006f3c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006f52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <_ff_pull_n+0x1b6>
 8006f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f5e:	68b8      	ldr	r0, [r7, #8]
 8006f60:	f7ff fe14 	bl	8006b8c <_ff_pull_const_addr>
    break;
 8006f64:	bf00      	nop
  }
}
 8006f66:	bf00      	nop
 8006f68:	3738      	adds	r7, #56	; 0x38
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	4603      	mov	r3, r0
 8006f76:	80fb      	strh	r3, [r7, #6]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	80bb      	strh	r3, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006f80:	88ba      	ldrh	r2, [r7, #4]
 8006f82:	887b      	ldrh	r3, [r7, #2]
 8006f84:	4413      	add	r3, r2
 8006f86:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006f88:	88ba      	ldrh	r2, [r7, #4]
 8006f8a:	89fb      	ldrh	r3, [r7, #14]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d804      	bhi.n	8006f9a <advance_index+0x2c>
 8006f90:	89fa      	ldrh	r2, [r7, #14]
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	429a      	cmp	r2, r3
 8006f98:	db08      	blt.n	8006fac <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006fa4:	89fa      	ldrh	r2, [r7, #14]
 8006fa6:	89bb      	ldrh	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8006fac:	89fb      	ldrh	r3, [r7, #14]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b08c      	sub	sp, #48	; 0x30
 8006fbe:	af02      	add	r7, sp, #8
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	80fb      	strh	r3, [r7, #6]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	889b      	ldrh	r3, [r3, #4]
 8006fd4:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fd6:	88bb      	ldrh	r3, [r7, #4]
 8006fd8:	843b      	strh	r3, [r7, #32]
 8006fda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006fdc:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006fde:	8c3a      	ldrh	r2, [r7, #32]
 8006fe0:	8bfb      	ldrh	r3, [r7, #30]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d304      	bcc.n	8006ff0 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006fe6:	8c3a      	ldrh	r2, [r7, #32]
 8006fe8:	8bfb      	ldrh	r3, [r7, #30]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	e008      	b.n	8007002 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	8c39      	ldrh	r1, [r7, #32]
 8006ff8:	8bfb      	ldrh	r3, [r7, #30]
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007002:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8007004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <_tu_fifo_peek_n+0x54>
 800700a:	2300      	movs	r3, #0
 800700c:	e041      	b.n	8007092 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	889b      	ldrh	r3, [r3, #4]
 8007012:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007014:	429a      	cmp	r2, r3
 8007016:	d91b      	bls.n	8007050 <_tu_fifo_peek_n+0x96>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	88bb      	ldrh	r3, [r7, #4]
 800701e:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	889b      	ldrh	r3, [r3, #4]
 8007024:	8afa      	ldrh	r2, [r7, #22]
 8007026:	429a      	cmp	r2, r3
 8007028:	d305      	bcc.n	8007036 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	889b      	ldrh	r3, [r3, #4]
 800702e:	8afa      	ldrh	r2, [r7, #22]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	82bb      	strh	r3, [r7, #20]
 8007034:	e004      	b.n	8007040 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	889a      	ldrh	r2, [r3, #4]
 800703a:	8afb      	ldrh	r3, [r7, #22]
 800703c:	4413      	add	r3, r2
 800703e:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	8aba      	ldrh	r2, [r7, #20]
 8007044:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8007046:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8007048:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	889b      	ldrh	r3, [r3, #4]
 800704e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8007050:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	429a      	cmp	r2, r3
 8007056:	d201      	bcs.n	800705c <_tu_fifo_peek_n+0xa2>
 8007058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800705a:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	889b      	ldrh	r3, [r3, #4]
 8007060:	827b      	strh	r3, [r7, #18]
 8007062:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007064:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8007066:	e003      	b.n	8007070 <_tu_fifo_peek_n+0xb6>
 8007068:	8a3a      	ldrh	r2, [r7, #16]
 800706a:	8a7b      	ldrh	r3, [r7, #18]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	823b      	strh	r3, [r7, #16]
 8007070:	8a7a      	ldrh	r2, [r7, #18]
 8007072:	8a3b      	ldrh	r3, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d9f7      	bls.n	8007068 <_tu_fifo_peek_n+0xae>
  return idx;
 8007078:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800707a:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800707c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	460b      	mov	r3, r1
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fe8f 	bl	8006dae <_ff_pull_n>

  return n;
 8007090:	88fb      	ldrh	r3, [r7, #6]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3728      	adds	r7, #40	; 0x28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b09a      	sub	sp, #104	; 0x68
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	460b      	mov	r3, r1
 80070ac:	80fb      	strh	r3, [r7, #6]
 80070ae:	4613      	mov	r3, r2
 80070b0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <_tu_fifo_write_n+0x20>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e113      	b.n	80072e4 <_tu_fifo_write_n+0x248>

  _ff_lock(f->mutex_wr);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02c      	beq.n	8007122 <_tu_fifo_write_n+0x86>
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070d0:	647b      	str	r3, [r7, #68]	; 0x44
 80070d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d4:	643b      	str	r3, [r7, #64]	; 0x40
 80070d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e4:	d102      	bne.n	80070ec <_tu_fifo_write_n+0x50>
 80070e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070ea:	e014      	b.n	8007116 <_tu_fifo_write_n+0x7a>
  if ( msec == 0 ) return 0;
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <_tu_fifo_write_n+0x5a>
 80070f2:	2300      	movs	r3, #0
 80070f4:	e00f      	b.n	8007116 <_tu_fifo_write_n+0x7a>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	4a7a      	ldr	r2, [pc, #488]	; (80072ec <_tu_fifo_write_n+0x250>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
  if ( ticks == 0 ) ticks = 1;
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <_tu_fifo_write_n+0x78>
 8007110:	2301      	movs	r3, #1
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
  return ticks;
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 8007116:	4619      	mov	r1, r3
 8007118:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800711a:	f7fc ff19 	bl	8003f50 <xQueueSemaphoreTake>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
}
 8007122:	bf00      	nop

  uint16_t wr_idx = f->wr_idx;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	891b      	ldrh	r3, [r3, #8]
 8007128:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  uint16_t rd_idx = f->rd_idx;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	895b      	ldrh	r3, [r3, #10]
 8007130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  uint8_t const* buf8 = (uint8_t const*) data;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	65bb      	str	r3, [r7, #88]	; 0x58

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	79db      	ldrb	r3, [r3, #7]
 800713c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f083 0301 	eor.w	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d03a      	beq.n	80071c2 <_tu_fifo_write_n+0x126>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	889b      	ldrh	r3, [r3, #4]
 8007150:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007152:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007156:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007158:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800715c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800715e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007160:	853b      	strh	r3, [r7, #40]	; 0x28
 8007162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007164:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007168:	84bb      	strh	r3, [r7, #36]	; 0x24
  if (wr_idx >= rd_idx)
 800716a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800716c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716e:	429a      	cmp	r2, r3
 8007170:	d304      	bcc.n	800717c <_tu_fifo_write_n+0xe0>
    return (uint16_t) (wr_idx - rd_idx);
 8007172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	b29b      	uxth	r3, r3
 800717a:	e008      	b.n	800718e <_tu_fifo_write_n+0xf2>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800717c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8007184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007186:	1acb      	subs	r3, r1, r3
 8007188:	b29b      	uxth	r3, r3
 800718a:	4413      	add	r3, r2
 800718c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800718e:	847b      	strh	r3, [r7, #34]	; 0x22
  return (depth > count) ? (depth - count) : 0;
 8007190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007194:	429a      	cmp	r2, r3
 8007196:	d904      	bls.n	80071a2 <_tu_fifo_write_n+0x106>
 8007198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800719a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	e000      	b.n	80071a4 <_tu_fifo_write_n+0x108>
 80071a2:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80071a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	867b      	strh	r3, [r7, #50]	; 0x32
 80071ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80071b0:	863b      	strh	r3, [r7, #48]	; 0x30
 80071b2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80071b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bf28      	it	cs
 80071ba:	4613      	movcs	r3, r2
 80071bc:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80071be:	80fb      	strh	r3, [r7, #6]
 80071c0:	e053      	b.n	800726a <_tu_fifo_write_n+0x1ce>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	889b      	ldrh	r3, [r3, #4]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d319      	bcc.n	8007200 <_tu_fifo_write_n+0x164>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80071cc:	797b      	ldrb	r3, [r7, #5]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10e      	bne.n	80071f0 <_tu_fifo_write_n+0x154>
      {
        buf8 += (n - f->depth) * f->item_size;
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	8892      	ldrh	r2, [r2, #4]
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	88d2      	ldrh	r2, [r2, #6]
 80071de:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80071e2:	b292      	uxth	r2, r2
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071ec:	4413      	add	r3, r2
 80071ee:	65bb      	str	r3, [r7, #88]	; 0x58
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	889b      	ldrh	r3, [r3, #4]
 80071f4:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80071f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80071fe:	e034      	b.n	800726a <_tu_fifo_write_n+0x1ce>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	889b      	ldrh	r3, [r3, #4]
 8007204:	843b      	strh	r3, [r7, #32]
 8007206:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800720a:	83fb      	strh	r3, [r7, #30]
 800720c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007210:	83bb      	strh	r3, [r7, #28]
  if (wr_idx >= rd_idx)
 8007212:	8bfa      	ldrh	r2, [r7, #30]
 8007214:	8bbb      	ldrh	r3, [r7, #28]
 8007216:	429a      	cmp	r2, r3
 8007218:	d304      	bcc.n	8007224 <_tu_fifo_write_n+0x188>
    return (uint16_t) (wr_idx - rd_idx);
 800721a:	8bfa      	ldrh	r2, [r7, #30]
 800721c:	8bbb      	ldrh	r3, [r7, #28]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	b29b      	uxth	r3, r3
 8007222:	e008      	b.n	8007236 <_tu_fifo_write_n+0x19a>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007224:	8c3b      	ldrh	r3, [r7, #32]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	8bf9      	ldrh	r1, [r7, #30]
 800722c:	8bbb      	ldrh	r3, [r7, #28]
 800722e:	1acb      	subs	r3, r1, r3
 8007230:	b29b      	uxth	r3, r3
 8007232:	4413      	add	r3, r2
 8007234:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8007236:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      if (overflowable_count + n >= 2*f->depth)
 800723a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	441a      	add	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	889b      	ldrh	r3, [r3, #4]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	429a      	cmp	r2, r3
 800724a:	db0e      	blt.n	800726a <_tu_fifo_write_n+0x1ce>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8898      	ldrh	r0, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	889a      	ldrh	r2, [r3, #4]
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800725e:	4619      	mov	r1, r3
 8007260:	f7ff fe85 	bl	8006f6e <advance_index>
 8007264:	4603      	mov	r3, r0
 8007266:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d027      	beq.n	80072c0 <_tu_fifo_write_n+0x224>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	889b      	ldrh	r3, [r3, #4]
 8007274:	837b      	strh	r3, [r7, #26]
 8007276:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800727a:	833b      	strh	r3, [r7, #24]
  while ( idx >= depth ) idx -= depth;
 800727c:	e003      	b.n	8007286 <_tu_fifo_write_n+0x1ea>
 800727e:	8b3a      	ldrh	r2, [r7, #24]
 8007280:	8b7b      	ldrh	r3, [r7, #26]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	833b      	strh	r3, [r7, #24]
 8007286:	8b7a      	ldrh	r2, [r7, #26]
 8007288:	8b3b      	ldrh	r3, [r7, #24]
 800728a:	429a      	cmp	r2, r3
 800728c:	d9f7      	bls.n	800727e <_tu_fifo_write_n+0x1e2>
  return idx;
 800728e:	8b3b      	ldrh	r3, [r7, #24]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007290:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8007294:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	797b      	ldrb	r3, [r7, #5]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	460b      	mov	r3, r1
 80072a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fca5 	bl	8006bf2 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	889b      	ldrh	r3, [r3, #4]
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fe5b 	bl	8006f6e <advance_index>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	811a      	strh	r2, [r3, #8]

    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	617b      	str	r3, [r7, #20]
  if (mutex) osal_mutex_unlock(mutex);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <_tu_fifo_write_n+0x244>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	613b      	str	r3, [r7, #16]
  return xSemaphoreGive(mutex_hdl);
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	6938      	ldr	r0, [r7, #16]
 80072d8:	f7fc fbc0 	bl	8003a5c <xQueueGenericSend>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
}
 80072e0:	bf00      	nop

  return n;
 80072e2:	88fb      	ldrh	r3, [r7, #6]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3760      	adds	r7, #96	; 0x60
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	10624dd3 	.word	0x10624dd3

080072f0 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b090      	sub	sp, #64	; 0x40
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4611      	mov	r1, r2
 80072fc:	461a      	mov	r2, r3
 80072fe:	460b      	mov	r3, r1
 8007300:	80fb      	strh	r3, [r7, #6]
 8007302:	4613      	mov	r3, r2
 8007304:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d02c      	beq.n	800736c <_tu_fifo_read_n+0x7c>
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
 8007316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	623b      	str	r3, [r7, #32]
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	61bb      	str	r3, [r7, #24]
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732e:	d102      	bne.n	8007336 <_tu_fifo_read_n+0x46>
 8007330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007334:	e014      	b.n	8007360 <_tu_fifo_read_n+0x70>
  if ( msec == 0 ) return 0;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <_tu_fifo_read_n+0x50>
 800733c:	2300      	movs	r3, #0
 800733e:	e00f      	b.n	8007360 <_tu_fifo_read_n+0x70>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	4a23      	ldr	r2, [pc, #140]	; (80073d8 <_tu_fifo_read_n+0xe8>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	617b      	str	r3, [r7, #20]
  if ( ticks == 0 ) ticks = 1;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <_tu_fifo_read_n+0x6e>
 800735a:	2301      	movs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
  return ticks;
 800735e:	697b      	ldr	r3, [r7, #20]
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 8007360:	4619      	mov	r1, r3
 8007362:	6a38      	ldr	r0, [r7, #32]
 8007364:	f7fc fdf4 	bl	8003f50 <xQueueSemaphoreTake>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
}
 800736c:	bf00      	nop

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	891b      	ldrh	r3, [r3, #8]
 8007372:	b298      	uxth	r0, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	895b      	ldrh	r3, [r3, #10]
 8007378:	b29b      	uxth	r3, r3
 800737a:	88f9      	ldrh	r1, [r7, #6]
 800737c:	797a      	ldrb	r2, [r7, #5]
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4603      	mov	r3, r0
 8007384:	460a      	mov	r2, r1
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fe16 	bl	8006fba <_tu_fifo_peek_n>
 800738e:	4603      	mov	r3, r0
 8007390:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8898      	ldrh	r0, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	b29b      	uxth	r3, r3
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	4619      	mov	r1, r3
 80073a0:	f7ff fde5 	bl	8006f6e <advance_index>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (mutex) osal_mutex_unlock(mutex);
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <_tu_fifo_read_n+0xdc>
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30
  return xSemaphoreGive(mutex_hdl);
 80073bc:	2300      	movs	r3, #0
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c4:	f7fc fb4a 	bl	8003a5c <xQueueGenericSend>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
}
 80073cc:	bf00      	nop
  return n;
 80073ce:	88fb      	ldrh	r3, [r7, #6]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3738      	adds	r7, #56	; 0x38
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	10624dd3 	.word	0x10624dd3

080073dc <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8899      	ldrh	r1, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	891b      	ldrh	r3, [r3, #8]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	895b      	ldrh	r3, [r3, #10]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8279      	strh	r1, [r7, #18]
 80073f6:	823a      	strh	r2, [r7, #16]
 80073f8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80073fa:	8a3a      	ldrh	r2, [r7, #16]
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d304      	bcc.n	800740c <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8007402:	8a3a      	ldrh	r2, [r7, #16]
 8007404:	89fb      	ldrh	r3, [r7, #14]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	e008      	b.n	800741e <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	8a39      	ldrh	r1, [r7, #16]
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	1acb      	subs	r3, r1, r3
 8007418:	b29b      	uxth	r3, r3
 800741a:	4413      	add	r3, r2
 800741c:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	8892      	ldrh	r2, [r2, #4]
 8007422:	82fb      	strh	r3, [r7, #22]
 8007424:	4613      	mov	r3, r2
 8007426:	82bb      	strh	r3, [r7, #20]
 8007428:	8afa      	ldrh	r2, [r7, #22]
 800742a:	8abb      	ldrh	r3, [r7, #20]
 800742c:	4293      	cmp	r3, r2
 800742e:	bf28      	it	cs
 8007430:	4613      	movcs	r3, r2
 8007432:	b29b      	uxth	r3, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8899      	ldrh	r1, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	891b      	ldrh	r3, [r3, #8]
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	895b      	ldrh	r3, [r3, #10]
 8007456:	b29b      	uxth	r3, r3
 8007458:	82f9      	strh	r1, [r7, #22]
 800745a:	82ba      	strh	r2, [r7, #20]
 800745c:	827b      	strh	r3, [r7, #18]
 800745e:	8afb      	ldrh	r3, [r7, #22]
 8007460:	823b      	strh	r3, [r7, #16]
 8007462:	8abb      	ldrh	r3, [r7, #20]
 8007464:	81fb      	strh	r3, [r7, #14]
 8007466:	8a7b      	ldrh	r3, [r7, #18]
 8007468:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 800746a:	89fa      	ldrh	r2, [r7, #14]
 800746c:	89bb      	ldrh	r3, [r7, #12]
 800746e:	429a      	cmp	r2, r3
 8007470:	d304      	bcc.n	800747c <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8007472:	89fa      	ldrh	r2, [r7, #14]
 8007474:	89bb      	ldrh	r3, [r7, #12]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	b29b      	uxth	r3, r3
 800747a:	e008      	b.n	800748e <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800747c:	8a3b      	ldrh	r3, [r7, #16]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	89f9      	ldrh	r1, [r7, #14]
 8007484:	89bb      	ldrh	r3, [r7, #12]
 8007486:	1acb      	subs	r3, r1, r3
 8007488:	b29b      	uxth	r3, r3
 800748a:	4413      	add	r3, r2
 800748c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800748e:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8007490:	8afa      	ldrh	r2, [r7, #22]
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	429a      	cmp	r2, r3
 8007496:	d904      	bls.n	80074a2 <tu_fifo_remaining+0x62>
 8007498:	8afa      	ldrh	r2, [r7, #22]
 800749a:	897b      	ldrh	r3, [r7, #10]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	b29b      	uxth	r3, r3
 80074a0:	e000      	b.n	80074a4 <tu_fifo_remaining+0x64>
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	2300      	movs	r3, #0
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff ff13 	bl	80072f0 <_tu_fifo_read_n>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	2301      	movs	r3, #1
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff ff01 	bl	80072f0 <_tu_fifo_read_n>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	2300      	movs	r3, #0
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fdc5 	bl	800709c <_tu_fifo_write_n>
 8007512:	4603      	mov	r3, r0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800752a:	88fa      	ldrh	r2, [r7, #6]
 800752c:	2301      	movs	r3, #1
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fdb3 	bl	800709c <_tu_fifo_write_n>
 8007536:	4603      	mov	r3, r0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b094      	sub	sp, #80	; 0x50
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	623b      	str	r3, [r7, #32]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02c      	beq.n	80075ae <tu_fifo_clear+0x6e>
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	60fb      	str	r3, [r7, #12]
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007570:	d102      	bne.n	8007578 <tu_fifo_clear+0x38>
 8007572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007576:	e014      	b.n	80075a2 <tu_fifo_clear+0x62>
  if ( msec == 0 ) return 0;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <tu_fifo_clear+0x42>
 800757e:	2300      	movs	r3, #0
 8007580:	e00f      	b.n	80075a2 <tu_fifo_clear+0x62>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	4a39      	ldr	r2, [pc, #228]	; (8007674 <tu_fifo_clear+0x134>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	099b      	lsrs	r3, r3, #6
 8007594:	60bb      	str	r3, [r7, #8]
  if ( ticks == 0 ) ticks = 1;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <tu_fifo_clear+0x60>
 800759c:	2301      	movs	r3, #1
 800759e:	60bb      	str	r3, [r7, #8]
  return ticks;
 80075a0:	68bb      	ldr	r3, [r7, #8]
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 80075a2:	4619      	mov	r1, r3
 80075a4:	6978      	ldr	r0, [r7, #20]
 80075a6:	f7fc fcd3 	bl	8003f50 <xQueueSemaphoreTake>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
}
 80075ae:	bf00      	nop
  _ff_lock(f->mutex_rd);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d02c      	beq.n	8007616 <tu_fifo_clear+0xd6>
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	633b      	str	r3, [r7, #48]	; 0x30
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d8:	d102      	bne.n	80075e0 <tu_fifo_clear+0xa0>
 80075da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075de:	e014      	b.n	800760a <tu_fifo_clear+0xca>
  if ( msec == 0 ) return 0;
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <tu_fifo_clear+0xaa>
 80075e6:	2300      	movs	r3, #0
 80075e8:	e00f      	b.n	800760a <tu_fifo_clear+0xca>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075f0:	fb02 f303 	mul.w	r3, r2, r3
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <tu_fifo_clear+0x134>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	099b      	lsrs	r3, r3, #6
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
  if ( ticks == 0 ) ticks = 1;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <tu_fifo_clear+0xc8>
 8007604:	2301      	movs	r3, #1
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
  return ticks;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 800760a:	4619      	mov	r1, r3
 800760c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760e:	f7fc fc9f 	bl	8003f50 <xQueueSemaphoreTake>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
}
 8007616:	bf00      	nop

  f->rd_idx = 0;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
  if (mutex) osal_mutex_unlock(mutex);
 800762a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <tu_fifo_clear+0x104>
 8007630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
  return xSemaphoreGive(mutex_hdl);
 8007634:	2300      	movs	r3, #0
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800763c:	f7fc fa0e 	bl	8003a5c <xQueueGenericSend>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
}
 8007644:	bf00      	nop
  _ff_unlock(f->mutex_rd);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (mutex) osal_mutex_unlock(mutex);
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <tu_fifo_clear+0x126>
 8007652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007654:	64bb      	str	r3, [r7, #72]	; 0x48
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	2100      	movs	r1, #0
 800765c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800765e:	f7fc f9fd 	bl	8003a5c <xQueueGenericSend>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
}
 8007666:	bf00      	nop
  return true;
 8007668:	2301      	movs	r3, #1
}
 800766a:	4618      	mov	r0, r3
 800766c:	3750      	adds	r7, #80	; 0x50
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	10624dd3 	.word	0x10624dd3

08007678 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <tud_inited+0x1c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2bff      	cmp	r3, #255	; 0xff
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000020 	.word	0x20000020

08007698 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8007698:	b590      	push	{r4, r7, lr}
 800769a:	b08f      	sub	sp, #60	; 0x3c
 800769c:	af02      	add	r7, sp, #8
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 80076a2:	f7ff ffe9 	bl	8007678 <tud_inited>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <tud_init+0x18>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0a1      	b.n	80077f4 <tud_init+0x15c>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80076b0:	222b      	movs	r2, #43	; 0x2b
 80076b2:	2100      	movs	r1, #0
 80076b4:	4851      	ldr	r0, [pc, #324]	; (80077fc <tud_init+0x164>)
 80076b6:	f003 fbc0 	bl	800ae3a <memset>
 80076ba:	4b51      	ldr	r3, [pc, #324]	; (8007800 <tud_init+0x168>)
 80076bc:	61bb      	str	r3, [r7, #24]
  return xSemaphoreCreateMutexStatic(mdef);
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	2001      	movs	r0, #1
 80076c2:	f7fc f9b0 	bl	8003a26 <xQueueCreateMutexStatic>
 80076c6:	4603      	mov	r3, r0

#if OSAL_MUTEX_REQUIRED
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
 80076c8:	4a4e      	ldr	r2, [pc, #312]	; (8007804 <tud_init+0x16c>)
 80076ca:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_mutex);
 80076cc:	4b4d      	ldr	r3, [pc, #308]	; (8007804 <tud_init+0x16c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <tud_init+0x52>
 80076d4:	4b4c      	ldr	r3, [pc, #304]	; (8007808 <tud_init+0x170>)
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d000      	beq.n	80076e6 <tud_init+0x4e>
 80076e4:	be00      	bkpt	0x0000
 80076e6:	2300      	movs	r3, #0
 80076e8:	e084      	b.n	80077f4 <tud_init+0x15c>
 80076ea:	4b48      	ldr	r3, [pc, #288]	; (800780c <tud_init+0x174>)
 80076ec:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  osal_queue_t q;

#if configSUPPORT_STATIC_ALLOCATION
  q = xQueueCreateStatic(qdef->depth, qdef->item_sz, (uint8_t*) qdef->buf, &qdef->sq);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	885b      	ldrh	r3, [r3, #2]
 80076f8:	461c      	mov	r4, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	330c      	adds	r3, #12
 8007702:	2100      	movs	r1, #0
 8007704:	9100      	str	r1, [sp, #0]
 8007706:	4621      	mov	r1, r4
 8007708:	f7fc f8d8 	bl	80038bc <xQueueGenericCreateStatic>
 800770c:	6138      	str	r0, [r7, #16]
#else
  q = xQueueCreate(qdef->depth, qdef->item_sz);
#endif

#if defined(configQUEUE_REGISTRY_SIZE) && (configQUEUE_REGISTRY_SIZE>0)
  vQueueAddToRegistry(q, qdef->name);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	4619      	mov	r1, r3
 8007714:	6938      	ldr	r0, [r7, #16]
 8007716:	f7fc fe6d 	bl	80043f4 <vQueueAddToRegistry>
#endif

  return q;
 800771a:	693b      	ldr	r3, [r7, #16]
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 800771c:	4a3c      	ldr	r2, [pc, #240]	; (8007810 <tud_init+0x178>)
 800771e:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8007720:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <tud_init+0x178>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <tud_init+0xa6>
 8007728:	4b37      	ldr	r3, [pc, #220]	; (8007808 <tud_init+0x170>)
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d000      	beq.n	800773a <tud_init+0xa2>
 8007738:	be00      	bkpt	0x0000
 800773a:	2300      	movs	r3, #0
 800773c:	e05a      	b.n	80077f4 <tud_init+0x15c>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 800773e:	4b35      	ldr	r3, [pc, #212]	; (8007814 <tud_init+0x17c>)
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <tud_init+0xb8>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8007744:	4834      	ldr	r0, [pc, #208]	; (8007818 <tud_init+0x180>)
 8007746:	f3af 8000 	nop.w
 800774a:	4603      	mov	r3, r0
 800774c:	4a33      	ldr	r2, [pc, #204]	; (800781c <tud_init+0x184>)
 800774e:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007750:	2300      	movs	r3, #0
 8007752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007756:	e03b      	b.n	80077d0 <tud_init+0x138>
 8007758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800775c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007762:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <tud_init+0x180>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	7bfa      	ldrb	r2, [r7, #15]
 8007768:	429a      	cmp	r2, r3
 800776a:	d209      	bcs.n	8007780 <tud_init+0xe8>
    driver = &_app_driver[drvid];
 800776c:	4b2b      	ldr	r3, [pc, #172]	; (800781c <tud_init+0x184>)
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	7bfa      	ldrb	r2, [r7, #15]
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	440b      	add	r3, r1
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	e00f      	b.n	80077a0 <tud_init+0x108>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <tud_init+0x180>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	7bfa      	ldrb	r2, [r7, #15]
 8007786:	429a      	cmp	r2, r3
 8007788:	d80a      	bhi.n	80077a0 <tud_init+0x108>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <tud_init+0x180>)
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	1a9a      	subs	r2, r3, r2
 8007792:	4613      	mov	r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <tud_init+0x188>)
 800779c:	4413      	add	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]
  return driver;
 80077a0:	68bb      	ldr	r3, [r7, #8]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
    TU_ASSERT(driver);
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10a      	bne.n	80077c0 <tud_init+0x128>
 80077aa:	4b17      	ldr	r3, [pc, #92]	; (8007808 <tud_init+0x170>)
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d000      	beq.n	80077bc <tud_init+0x124>
 80077ba:	be00      	bkpt	0x0000
 80077bc:	2300      	movs	r3, #0
 80077be:	e019      	b.n	80077f4 <tud_init+0x15c>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80077c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ca:	3301      	adds	r3, #1
 80077cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077d0:	4b11      	ldr	r3, [pc, #68]	; (8007818 <tud_init+0x180>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077d8:	429a      	cmp	r2, r3
 80077da:	d9bd      	bls.n	8007758 <tud_init+0xc0>
  }

  _usbd_rhport = rhport;
 80077dc:	4a11      	ldr	r2, [pc, #68]	; (8007824 <tud_init+0x18c>)
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f002 f831 	bl	800984c <dcd_init>
  dcd_int_enable(rhport);
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f002 f8b5 	bl	800995c <dcd_int_enable>

  return true;
 80077f2:	2301      	movs	r3, #1
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3734      	adds	r7, #52	; 0x34
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd90      	pop	{r4, r7, pc}
 80077fc:	20005168 	.word	0x20005168
 8007800:	20005260 	.word	0x20005260
 8007804:	200052b0 	.word	0x200052b0
 8007808:	e000edf0 	.word	0xe000edf0
 800780c:	20000024 	.word	0x20000024
 8007810:	2000525c 	.word	0x2000525c
 8007814:	00000000 	.word	0x00000000
 8007818:	20005198 	.word	0x20005198
 800781c:	20005194 	.word	0x20005194
 8007820:	0800b008 	.word	0x0800b008
 8007824:	20000020 	.word	0x20000020

08007828 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8007832:	2300      	movs	r3, #0
 8007834:	77fb      	strb	r3, [r7, #31]
 8007836:	e039      	b.n	80078ac <configuration_reset+0x84>
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <configuration_reset+0xb8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	7cfa      	ldrb	r2, [r7, #19]
 8007846:	429a      	cmp	r2, r3
 8007848:	d209      	bcs.n	800785e <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 800784a:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <configuration_reset+0xbc>)
 800784c:	6819      	ldr	r1, [r3, #0]
 800784e:	7cfa      	ldrb	r2, [r7, #19]
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	440b      	add	r3, r1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e00f      	b.n	800787e <configuration_reset+0x56>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800785e:	4b20      	ldr	r3, [pc, #128]	; (80078e0 <configuration_reset+0xb8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	7cfa      	ldrb	r2, [r7, #19]
 8007864:	429a      	cmp	r2, r3
 8007866:	d80a      	bhi.n	800787e <configuration_reset+0x56>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007868:	7cfb      	ldrb	r3, [r7, #19]
 800786a:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <configuration_reset+0xb8>)
 800786c:	7812      	ldrb	r2, [r2, #0]
 800786e:	1a9a      	subs	r2, r3, r2
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4a1b      	ldr	r2, [pc, #108]	; (80078e8 <configuration_reset+0xc0>)
 800787a:	4413      	add	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  return driver;
 800787e:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8007880:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <configuration_reset+0x74>
 8007888:	4b18      	ldr	r3, [pc, #96]	; (80078ec <configuration_reset+0xc4>)
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01e      	beq.n	80078d6 <configuration_reset+0xae>
 8007898:	be00      	bkpt	0x0000
 800789a:	e01c      	b.n	80078d6 <configuration_reset+0xae>
    driver->reset(rhport);
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	79fa      	ldrb	r2, [r7, #7]
 80078a2:	4610      	mov	r0, r2
 80078a4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80078a6:	7ffb      	ldrb	r3, [r7, #31]
 80078a8:	3301      	adds	r3, #1
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <configuration_reset+0xb8>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	7ffa      	ldrb	r2, [r7, #31]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d9c0      	bls.n	8007838 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80078b6:	222b      	movs	r2, #43	; 0x2b
 80078b8:	2100      	movs	r1, #0
 80078ba:	480d      	ldr	r0, [pc, #52]	; (80078f0 <configuration_reset+0xc8>)
 80078bc:	f003 fabd 	bl	800ae3a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80078c0:	2210      	movs	r2, #16
 80078c2:	21ff      	movs	r1, #255	; 0xff
 80078c4:	480b      	ldr	r0, [pc, #44]	; (80078f4 <configuration_reset+0xcc>)
 80078c6:	f003 fab8 	bl	800ae3a <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80078ca:	220c      	movs	r2, #12
 80078cc:	21ff      	movs	r1, #255	; 0xff
 80078ce:	480a      	ldr	r0, [pc, #40]	; (80078f8 <configuration_reset+0xd0>)
 80078d0:	f003 fab3 	bl	800ae3a <memset>
 80078d4:	e000      	b.n	80078d8 <configuration_reset+0xb0>
    TU_ASSERT(driver, );
 80078d6:	bf00      	nop
}
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20005198 	.word	0x20005198
 80078e4:	20005194 	.word	0x20005194
 80078e8:	0800b008 	.word	0x0800b008
 80078ec:	e000edf0 	.word	0xe000edf0
 80078f0:	20005168 	.word	0x20005168
 80078f4:	2000516b 	.word	0x2000516b
 80078f8:	2000517b 	.word	0x2000517b

080078fc <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff ff8d 	bl	8007828 <configuration_reset>
  usbd_control_reset();
 800790e:	f001 fb1d 	bl	8008f4c <usbd_control_reset>
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b093      	sub	sp, #76	; 0x4c
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8007928:	f7ff fea6 	bl	8007678 <tud_inited>
 800792c:	4603      	mov	r3, r0
 800792e:	f083 0301 	eor.w	r3, r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 8187 	bne.w	8007c48 <tud_task_ext+0x32c>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800793a:	4bb1      	ldr	r3, [pc, #708]	; (8007c00 <tud_task_ext+0x2e4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	633b      	str	r3, [r7, #48]	; 0x30
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007954:	d102      	bne.n	800795c <tud_task_ext+0x40>
 8007956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800795a:	e014      	b.n	8007986 <tud_task_ext+0x6a>
  if ( msec == 0 ) return 0;
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <tud_task_ext+0x4a>
 8007962:	2300      	movs	r3, #0
 8007964:	e00f      	b.n	8007986 <tud_task_ext+0x6a>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800796c:	fb02 f303 	mul.w	r3, r2, r3
 8007970:	4aa4      	ldr	r2, [pc, #656]	; (8007c04 <tud_task_ext+0x2e8>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
  if ( ticks == 0 ) ticks = 1;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <tud_task_ext+0x68>
 8007980:	2301      	movs	r3, #1
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  return ticks;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  return xQueueReceive(qhdl, data, _osal_ms2tick(msec));
 8007986:	461a      	mov	r2, r3
 8007988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800798a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800798c:	f7fc fa00 	bl	8003d90 <xQueueReceive>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f083 0301 	eor.w	r3, r3, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 8152 	bne.w	8007c4c <tud_task_ext+0x330>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 80079a8:	7b7b      	ldrb	r3, [r7, #13]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	2b07      	cmp	r3, #7
 80079ae:	f200 8113 	bhi.w	8007bd8 <tud_task_ext+0x2bc>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <tud_task_ext+0x9c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	08007bd9 	.word	0x08007bd9
 80079c4:	08007b7f 	.word	0x08007b7f
 80079c8:	08007baf 	.word	0x08007baf
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	08007a6d 	.word	0x08007a6d
 80079d4:	08007bc9 	.word	0x08007bc9
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80079d8:	7b3b      	ldrb	r3, [r7, #12]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff ff8e 	bl	80078fc <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80079e0:	7c3a      	ldrb	r2, [r7, #16]
 80079e2:	4b89      	ldr	r3, [pc, #548]	; (8007c08 <tud_task_ext+0x2ec>)
 80079e4:	709a      	strb	r2, [r3, #2]
      break;
 80079e6:	e120      	b.n	8007c2a <tud_task_ext+0x30e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80079e8:	7b3b      	ldrb	r3, [r7, #12]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff ff86 	bl	80078fc <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80079f0:	4b86      	ldr	r3, [pc, #536]	; (8007c0c <tud_task_ext+0x2f0>)
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 80fa 	beq.w	8007bec <tud_task_ext+0x2d0>
 80079f8:	f3af 8000 	nop.w
      break;
 80079fc:	e0f6      	b.n	8007bec <tud_task_ext+0x2d0>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80079fe:	4a82      	ldr	r2, [pc, #520]	; (8007c08 <tud_task_ext+0x2ec>)
 8007a00:	7813      	ldrb	r3, [r2, #0]
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007a08:	4a7f      	ldr	r2, [pc, #508]	; (8007c08 <tud_task_ext+0x2ec>)
 8007a0a:	7fd3      	ldrb	r3, [r2, #31]
 8007a0c:	f36f 0300 	bfc	r3, #0, #1
 8007a10:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8007a12:	4a7d      	ldr	r2, [pc, #500]	; (8007c08 <tud_task_ext+0x2ec>)
 8007a14:	7fd3      	ldrb	r3, [r2, #31]
 8007a16:	f36f 0382 	bfc	r3, #2, #1
 8007a1a:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8007a1c:	4a7a      	ldr	r2, [pc, #488]	; (8007c08 <tud_task_ext+0x2ec>)
 8007a1e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007a22:	f36f 0300 	bfc	r3, #0, #1
 8007a26:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8007a2a:	4a77      	ldr	r2, [pc, #476]	; (8007c08 <tud_task_ext+0x2ec>)
 8007a2c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007a30:	f36f 0382 	bfc	r3, #2, #1
 8007a34:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8007a38:	7b3a      	ldrb	r2, [r7, #12]
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f000 f924 	bl	8007c90 <process_control_request>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f083 0301 	eor.w	r3, r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 80cd 	beq.w	8007bf0 <tud_task_ext+0x2d4>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007a56:	7b3b      	ldrb	r3, [r7, #12]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f002 fad4 	bl	800a008 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8007a60:	7b3b      	ldrb	r3, [r7, #12]
 8007a62:	2180      	movs	r1, #128	; 0x80
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 facf 	bl	800a008 <dcd_edpt_stall>
        }
      break;
 8007a6a:	e0c1      	b.n	8007bf0 <tud_task_ext+0x2d4>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8007a6c:	7c3b      	ldrb	r3, [r7, #16]
 8007a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a82:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8007a84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007a88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a94:	09db      	lsrs	r3, r3, #7
 8007a96:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007a98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8007a9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007aa0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007aa4:	4958      	ldr	r1, [pc, #352]	; (8007c08 <tud_task_ext+0x2ec>)
 8007aa6:	0052      	lsls	r2, r2, #1
 8007aa8:	440a      	add	r2, r1
 8007aaa:	4413      	add	r3, r2
 8007aac:	f103 0218 	add.w	r2, r3, #24
 8007ab0:	79d3      	ldrb	r3, [r2, #7]
 8007ab2:	f36f 0300 	bfc	r3, #0, #1
 8007ab6:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8007ab8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007abc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007ac0:	4951      	ldr	r1, [pc, #324]	; (8007c08 <tud_task_ext+0x2ec>)
 8007ac2:	0052      	lsls	r2, r2, #1
 8007ac4:	440a      	add	r2, r1
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f103 0218 	add.w	r2, r3, #24
 8007acc:	79d3      	ldrb	r3, [r2, #7]
 8007ace:	f36f 0382 	bfc	r3, #2, #1
 8007ad2:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8007ad4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <tud_task_ext+0x1d0>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 8007adc:	7b38      	ldrb	r0, [r7, #12]
 8007ade:	7c7a      	ldrb	r2, [r7, #17]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007ae6:	f001 fa67 	bl	8008fb8 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8007aea:	e09e      	b.n	8007c2a <tud_task_ext+0x30e>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8007aec:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007af0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007af4:	4944      	ldr	r1, [pc, #272]	; (8007c08 <tud_task_ext+0x2ec>)
 8007af6:	0052      	lsls	r2, r2, #1
 8007af8:	440a      	add	r2, r1
 8007afa:	4413      	add	r3, r2
 8007afc:	3313      	adds	r3, #19
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  usbd_class_driver_t const * driver = NULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
  if ( drvid < _app_driver_count ) {
 8007b08:	4b41      	ldr	r3, [pc, #260]	; (8007c10 <tud_task_ext+0x2f4>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d20a      	bcs.n	8007b2a <tud_task_ext+0x20e>
    driver = &_app_driver[drvid];
 8007b14:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <tud_task_ext+0x2f8>)
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	4413      	add	r3, r2
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	440b      	add	r3, r1
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	e011      	b.n	8007b4e <tud_task_ext+0x232>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007b2a:	4b39      	ldr	r3, [pc, #228]	; (8007c10 <tud_task_ext+0x2f4>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d80b      	bhi.n	8007b4e <tud_task_ext+0x232>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007b36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007b3a:	4a35      	ldr	r2, [pc, #212]	; (8007c10 <tud_task_ext+0x2f4>)
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	1a9a      	subs	r2, r3, r2
 8007b40:	4613      	mov	r3, r2
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4a33      	ldr	r2, [pc, #204]	; (8007c18 <tud_task_ext+0x2fc>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	61fb      	str	r3, [r7, #28]
  return driver;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8007b50:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver, );
 8007b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <tud_task_ext+0x250>
 8007b58:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <tud_task_ext+0x300>)
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d073      	beq.n	8007c50 <tud_task_ext+0x334>
 8007b68:	be00      	bkpt	0x0000
 8007b6a:	e071      	b.n	8007c50 <tud_task_ext+0x334>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	691c      	ldr	r4, [r3, #16]
 8007b70:	7b38      	ldrb	r0, [r7, #12]
 8007b72:	7c7a      	ldrb	r2, [r7, #17]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007b7a:	47a0      	blx	r4
      break;
 8007b7c:	e055      	b.n	8007c2a <tud_task_ext+0x30e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8007b7e:	4b22      	ldr	r3, [pc, #136]	; (8007c08 <tud_task_ext+0x2ec>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d033      	beq.n	8007bf4 <tud_task_ext+0x2d8>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007b8c:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <tud_task_ext+0x304>)
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d030      	beq.n	8007bf4 <tud_task_ext+0x2d8>
 8007b92:	4b1d      	ldr	r3, [pc, #116]	; (8007c08 <tud_task_ext+0x2ec>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bf14      	ite	ne
 8007ba0:	2301      	movne	r3, #1
 8007ba2:	2300      	moveq	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 8007bac:	e022      	b.n	8007bf4 <tud_task_ext+0x2d8>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8007bae:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <tud_task_ext+0x2ec>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01d      	beq.n	8007bf8 <tud_task_ext+0x2dc>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <tud_task_ext+0x308>)
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01a      	beq.n	8007bf8 <tud_task_ext+0x2dc>
 8007bc2:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 8007bc6:	e017      	b.n	8007bf8 <tud_task_ext+0x2dc>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <tud_task_ext+0x2e0>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4798      	blx	r3
      break;
 8007bd6:	e011      	b.n	8007bfc <tud_task_ext+0x2e0>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <tud_task_ext+0x300>)
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01f      	beq.n	8007c28 <tud_task_ext+0x30c>
 8007be8:	be00      	bkpt	0x0000
      break;
 8007bea:	e01d      	b.n	8007c28 <tud_task_ext+0x30c>
      break;
 8007bec:	bf00      	nop
 8007bee:	e01c      	b.n	8007c2a <tud_task_ext+0x30e>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e01a      	b.n	8007c2a <tud_task_ext+0x30e>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e018      	b.n	8007c2a <tud_task_ext+0x30e>
      break;
 8007bf8:	bf00      	nop
 8007bfa:	e016      	b.n	8007c2a <tud_task_ext+0x30e>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e014      	b.n	8007c2a <tud_task_ext+0x30e>
 8007c00:	2000525c 	.word	0x2000525c
 8007c04:	10624dd3 	.word	0x10624dd3
 8007c08:	20005168 	.word	0x20005168
 8007c0c:	00000000 	.word	0x00000000
 8007c10:	20005198 	.word	0x20005198
 8007c14:	20005194 	.word	0x20005194
 8007c18:	0800b008 	.word	0x0800b008
 8007c1c:	e000edf0 	.word	0xe000edf0
	...
      break;
 8007c28:	bf00      	nop
    }

#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <tud_task_ext+0x340>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	61bb      	str	r3, [r7, #24]
    return res != 0;
  }
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_empty(osal_queue_t qhdl) {
  return uxQueueMessagesWaiting(qhdl) == 0;
 8007c30:	69b8      	ldr	r0, [r7, #24]
 8007c32:	f7fc fa99 	bl	8004168 <uxQueueMessagesWaiting>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <tud_task_ext+0x338>
  {
 8007c46:	e678      	b.n	800793a <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 8007c48:	bf00      	nop
 8007c4a:	e004      	b.n	8007c56 <tud_task_ext+0x33a>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8007c4c:	bf00      	nop
 8007c4e:	e002      	b.n	8007c56 <tud_task_ext+0x33a>
          TU_ASSERT(driver, );
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <tud_task_ext+0x33a>
    if (osal_queue_empty(_usbd_q)) return;
 8007c54:	bf00      	nop
#endif
  }
}
 8007c56:	374c      	adds	r7, #76	; 0x4c
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd90      	pop	{r4, r7, pc}
 8007c5c:	2000525c 	.word	0x2000525c

08007c60 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 f976 	bl	8008f64 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	7bf8      	ldrb	r0, [r7, #15]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	2101      	movs	r1, #1
 8007c82:	4798      	blx	r3
 8007c84:	4603      	mov	r3, r0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b09a      	sub	sp, #104	; 0x68
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f001 f961 	bl	8008f64 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b60      	cmp	r3, #96	; 0x60
 8007cae:	d10a      	bne.n	8007cc6 <process_control_request+0x36>
 8007cb0:	4ba9      	ldr	r3, [pc, #676]	; (8007f58 <process_control_request+0x2c8>)
 8007cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d000      	beq.n	8007cc2 <process_control_request+0x32>
 8007cc0:	be00      	bkpt	0x0000
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e2d3      	b.n	800826e <process_control_request+0x5de>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d10f      	bne.n	8007cf4 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8007cd4:	4ba1      	ldr	r3, [pc, #644]	; (8007f5c <process_control_request+0x2cc>)
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <process_control_request+0x4e>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e2c7      	b.n	800826e <process_control_request+0x5de>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8007cde:	489f      	ldr	r0, [pc, #636]	; (8007f5c <process_control_request+0x2cc>)
 8007ce0:	f001 f940 	bl	8008f64 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	2101      	movs	r1, #1
 8007cea:	4618      	mov	r0, r3
 8007cec:	f3af 8000 	nop.w
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	e2bc      	b.n	800826e <process_control_request+0x5de>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	f000 81d8 	beq.w	80080b4 <process_control_request+0x424>
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	f300 82a5 	bgt.w	8008254 <process_control_request+0x5c4>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <process_control_request+0x86>
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	f000 815a 	beq.w	8007fc8 <process_control_request+0x338>
 8007d14:	e29e      	b.n	8008254 <process_control_request+0x5c4>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d148      	bne.n	8007db6 <process_control_request+0x126>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	889b      	ldrh	r3, [r3, #4]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	d901      	bls.n	8007d40 <process_control_request+0xb0>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e296      	b.n	800826e <process_control_request+0x5de>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d44:	4a86      	ldr	r2, [pc, #536]	; (8007f60 <process_control_request+0x2d0>)
 8007d46:	4413      	add	r3, r2
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 8007d52:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <process_control_request+0x2d4>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20a      	bcs.n	8007d74 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 8007d5e:	4b82      	ldr	r3, [pc, #520]	; (8007f68 <process_control_request+0x2d8>)
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007d66:	4613      	mov	r3, r2
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	4413      	add	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	440b      	add	r3, r1
 8007d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d72:	e011      	b.n	8007d98 <process_control_request+0x108>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007d74:	4b7b      	ldr	r3, [pc, #492]	; (8007f64 <process_control_request+0x2d4>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d80b      	bhi.n	8007d98 <process_control_request+0x108>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d84:	4a77      	ldr	r2, [pc, #476]	; (8007f64 <process_control_request+0x2d4>)
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	1a9a      	subs	r2, r3, r2
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	4413      	add	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4a76      	ldr	r2, [pc, #472]	; (8007f6c <process_control_request+0x2dc>)
 8007d94:	4413      	add	r3, r2
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <process_control_request+0x116>
 8007da2:	2300      	movs	r3, #0
 8007da4:	e263      	b.n	800826e <process_control_request+0x5de>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff57 	bl	8007c60 <invoke_class_control>
 8007db2:	4603      	mov	r3, r0
 8007db4:	e25b      	b.n	800826e <process_control_request+0x5de>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <process_control_request+0x14a>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8007dc4:	4b64      	ldr	r3, [pc, #400]	; (8007f58 <process_control_request+0x2c8>)
 8007dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d000      	beq.n	8007dd6 <process_control_request+0x146>
 8007dd4:	be00      	bkpt	0x0000
        return false;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e249      	b.n	800826e <process_control_request+0x5de>
      }

      switch ( p_request->bRequest )
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	785b      	ldrb	r3, [r3, #1]
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	f200 80e5 	bhi.w	8007fae <process_control_request+0x31e>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <process_control_request+0x15c>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007f79 	.word	0x08007f79
 8007df0:	08007f33 	.word	0x08007f33
 8007df4:	08007faf 	.word	0x08007faf
 8007df8:	08007f0f 	.word	0x08007f0f
 8007dfc:	08007faf 	.word	0x08007faf
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007ef5 	.word	0x08007ef5
 8007e08:	08007faf 	.word	0x08007faf
 8007e0c:	08007e39 	.word	0x08007e39
 8007e10:	08007e51 	.word	0x08007e51
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007e14:	6838      	ldr	r0, [r7, #0]
 8007e16:	f001 f8b5 	bl	8008f84 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fdb0 	bl	800998c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007e2c:	4a4c      	ldr	r2, [pc, #304]	; (8007f60 <process_control_request+0x2d0>)
 8007e2e:	7813      	ldrb	r3, [r2, #0]
 8007e30:	f043 0302 	orr.w	r3, r3, #2
 8007e34:	7013      	strb	r3, [r2, #0]
        break;
 8007e36:	e0c6      	b.n	8007fc6 <process_control_request+0x336>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007e38:	4b49      	ldr	r3, [pc, #292]	; (8007f60 <process_control_request+0x2d0>)
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007e40:	f107 0213 	add.w	r2, r7, #19
 8007e44:	79f8      	ldrb	r0, [r7, #7]
 8007e46:	2301      	movs	r3, #1
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	f001 f80f 	bl	8008e6c <tud_control_xfer>
        }
        break;
 8007e4e:	e0ba      	b.n	8007fc6 <process_control_request+0x336>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	885b      	ldrh	r3, [r3, #2]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8007e5a:	4b41      	ldr	r3, [pc, #260]	; (8007f60 <process_control_request+0x2d0>)
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d03b      	beq.n	8007ee0 <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 8007e68:	4b3d      	ldr	r3, [pc, #244]	; (8007f60 <process_control_request+0x2d0>)
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 ff27 	bl	8009cc8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007e7a:	4b39      	ldr	r3, [pc, #228]	; (8007f60 <process_control_request+0x2d0>)
 8007e7c:	789b      	ldrb	r3, [r3, #2]
 8007e7e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fccf 	bl	8007828 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007e8a:	4a35      	ldr	r2, [pc, #212]	; (8007f60 <process_control_request+0x2d0>)
 8007e8c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007e90:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 8007e92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01d      	beq.n	8007ed6 <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 8007e9a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f9ec 	bl	8008280 <process_set_config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f083 0301 	eor.w	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <process_control_request+0x23a>
 8007eb4:	4b28      	ldr	r3, [pc, #160]	; (8007f58 <process_control_request+0x2c8>)
 8007eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d000      	beq.n	8007ec6 <process_control_request+0x236>
 8007ec4:	be00      	bkpt	0x0000
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e1d1      	b.n	800826e <process_control_request+0x5de>

              if ( tud_mount_cb ) tud_mount_cb();
 8007eca:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <process_control_request+0x2e0>)
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <process_control_request+0x250>
 8007ed0:	f3af 8000 	nop.w
 8007ed4:	e004      	b.n	8007ee0 <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 8007ed6:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <process_control_request+0x2e4>)
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <process_control_request+0x250>
 8007edc:	f3af 8000 	nop.w
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 8007ee0:	4a1f      	ldr	r2, [pc, #124]	; (8007f60 <process_control_request+0x2d0>)
 8007ee2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007ee6:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 ff4b 	bl	8008d88 <tud_control_status>
        }
        break;
 8007ef2:	e068      	b.n	8007fc6 <process_control_request+0x336>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 faf9 	bl	80084f0 <process_get_descriptor>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f083 0301 	eor.w	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05c      	beq.n	8007fc4 <process_control_request+0x334>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e1af      	b.n	800826e <process_control_request+0x5de>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	885b      	ldrh	r3, [r3, #2]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d001      	beq.n	8007f1c <process_control_request+0x28c>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e1a8      	b.n	800826e <process_control_request+0x5de>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8007f1c:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <process_control_request+0x2d0>)
 8007f1e:	7813      	ldrb	r3, [r2, #0]
 8007f20:	f043 0308 	orr.w	r3, r3, #8
 8007f24:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 ff2c 	bl	8008d88 <tud_control_status>
        break;
 8007f30:	e049      	b.n	8007fc6 <process_control_request+0x336>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d001      	beq.n	8007f40 <process_control_request+0x2b0>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e196      	b.n	800826e <process_control_request+0x5de>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007f40:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <process_control_request+0x2d0>)
 8007f42:	7813      	ldrb	r3, [r2, #0]
 8007f44:	f36f 03c3 	bfc	r3, #3, #1
 8007f48:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 ff1a 	bl	8008d88 <tud_control_status>
        break;
 8007f54:	e037      	b.n	8007fc6 <process_control_request+0x336>
 8007f56:	bf00      	nop
 8007f58:	e000edf0 	.word	0xe000edf0
 8007f5c:	00000000 	.word	0x00000000
 8007f60:	20005168 	.word	0x20005168
 8007f64:	20005198 	.word	0x20005198
 8007f68:	20005194 	.word	0x20005194
 8007f6c:	0800b008 	.word	0x0800b008
	...
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007f78:	4b9a      	ldr	r3, [pc, #616]	; (80081e4 <process_control_request+0x554>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	095b      	lsrs	r3, r3, #5
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	4b96      	ldr	r3, [pc, #600]	; (80081e4 <process_control_request+0x554>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	089b      	lsrs	r3, r3, #2
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007f9e:	f107 0210 	add.w	r2, r7, #16
 8007fa2:	79f8      	ldrb	r0, [r7, #7]
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	f000 ff60 	bl	8008e6c <tud_control_xfer>
        }
        break;
 8007fac:	e00b      	b.n	8007fc6 <process_control_request+0x336>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007fae:	4b8e      	ldr	r3, [pc, #568]	; (80081e8 <process_control_request+0x558>)
 8007fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d000      	beq.n	8007fc0 <process_control_request+0x330>
 8007fbe:	be00      	bkpt	0x0000
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e154      	b.n	800826e <process_control_request+0x5de>
        break;
 8007fc4:	bf00      	nop
      }
    break;
 8007fc6:	e151      	b.n	800826c <process_control_request+0x5dc>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	889b      	ldrh	r3, [r3, #4]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fdc:	2b0f      	cmp	r3, #15
 8007fde:	d901      	bls.n	8007fe4 <process_control_request+0x354>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e144      	b.n	800826e <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fe8:	4a7e      	ldr	r2, [pc, #504]	; (80081e4 <process_control_request+0x554>)
 8007fea:	4413      	add	r3, r2
 8007fec:	78db      	ldrb	r3, [r3, #3]
 8007fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007ff6:	4b7d      	ldr	r3, [pc, #500]	; (80081ec <process_control_request+0x55c>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d20a      	bcs.n	8008018 <process_control_request+0x388>
    driver = &_app_driver[drvid];
 8008002:	4b7b      	ldr	r3, [pc, #492]	; (80081f0 <process_control_request+0x560>)
 8008004:	6819      	ldr	r1, [r3, #0]
 8008006:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800800a:	4613      	mov	r3, r2
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4413      	add	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	440b      	add	r3, r1
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	e011      	b.n	800803c <process_control_request+0x3ac>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008018:	4b74      	ldr	r3, [pc, #464]	; (80081ec <process_control_request+0x55c>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008020:	429a      	cmp	r2, r3
 8008022:	d80b      	bhi.n	800803c <process_control_request+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008024:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008028:	4a70      	ldr	r2, [pc, #448]	; (80081ec <process_control_request+0x55c>)
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	1a9a      	subs	r2, r3, r2
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4a6f      	ldr	r2, [pc, #444]	; (80081f4 <process_control_request+0x564>)
 8008038:	4413      	add	r3, r2
 800803a:	623b      	str	r3, [r7, #32]
  return driver;
 800803c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800803e:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 8008040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <process_control_request+0x3ba>
 8008046:	2300      	movs	r3, #0
 8008048:	e111      	b.n	800826e <process_control_request+0x5de>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fe05 	bl	8007c60 <invoke_class_control>
 8008056:	4603      	mov	r3, r0
 8008058:	f083 0301 	eor.w	r3, r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8103 	beq.w	800826a <process_control_request+0x5da>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <process_control_request+0x3e6>
 8008072:	2300      	movs	r3, #0
 8008074:	e0fb      	b.n	800826e <process_control_request+0x5de>

        switch(p_request->bRequest)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	3b0a      	subs	r3, #10
 800807c:	2b01      	cmp	r3, #1
 800807e:	d816      	bhi.n	80080ae <process_control_request+0x41e>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8008080:	2000      	movs	r0, #0
 8008082:	f000 ff6f 	bl	8008f64 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b0a      	cmp	r3, #10
 800808c:	d109      	bne.n	80080a2 <process_control_request+0x412>
            {
              uint8_t alternate = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8008092:	f107 020f 	add.w	r2, r7, #15
 8008096:	79f8      	ldrb	r0, [r7, #7]
 8008098:	2301      	movs	r3, #1
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	f000 fee6 	bl	8008e6c <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 80080a0:	e007      	b.n	80080b2 <process_control_request+0x422>
              tud_control_status(rhport, p_request);
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fe6e 	bl	8008d88 <tud_control_status>
          break;
 80080ac:	e001      	b.n	80080b2 <process_control_request+0x422>

          default: return false;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e0dd      	b.n	800826e <process_control_request+0x5de>
        }
      }
    }
    break;
 80080b2:	e0da      	b.n	800826a <process_control_request+0x5da>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	889b      	ldrh	r3, [r3, #4]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	83bb      	strh	r3, [r7, #28]
 80080bc:	8bbb      	ldrh	r3, [r7, #28]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c8:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80080ca:	7fbb      	ldrb	r3, [r7, #30]
 80080cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d0:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80080d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80080d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080da:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80080dc:	7ffb      	ldrb	r3, [r7, #31]
 80080de:	09db      	lsrs	r3, r3, #7
 80080e0:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80080e2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80080e6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d90a      	bls.n	8008104 <process_control_request+0x474>
 80080ee:	4b3e      	ldr	r3, [pc, #248]	; (80081e8 <process_control_request+0x558>)
 80080f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80080f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d000      	beq.n	8008100 <process_control_request+0x470>
 80080fe:	be00      	bkpt	0x0000
 8008100:	2300      	movs	r3, #0
 8008102:	e0b4      	b.n	800826e <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8008104:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008108:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800810c:	4935      	ldr	r1, [pc, #212]	; (80081e4 <process_control_request+0x554>)
 800810e:	0052      	lsls	r2, r2, #1
 8008110:	440a      	add	r2, r1
 8008112:	4413      	add	r3, r2
 8008114:	3313      	adds	r3, #19
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 800811e:	4b33      	ldr	r3, [pc, #204]	; (80081ec <process_control_request+0x55c>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	7efa      	ldrb	r2, [r7, #27]
 8008124:	429a      	cmp	r2, r3
 8008126:	d209      	bcs.n	800813c <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
 8008128:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <process_control_request+0x560>)
 800812a:	6819      	ldr	r1, [r3, #0]
 800812c:	7efa      	ldrb	r2, [r7, #27]
 800812e:	4613      	mov	r3, r2
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	4413      	add	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	440b      	add	r3, r1
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	e00f      	b.n	800815c <process_control_request+0x4cc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800813c:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <process_control_request+0x55c>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	7efa      	ldrb	r2, [r7, #27]
 8008142:	429a      	cmp	r2, r3
 8008144:	d80a      	bhi.n	800815c <process_control_request+0x4cc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008146:	7efb      	ldrb	r3, [r7, #27]
 8008148:	4a28      	ldr	r2, [pc, #160]	; (80081ec <process_control_request+0x55c>)
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	1a9a      	subs	r2, r3, r2
 800814e:	4613      	mov	r3, r2
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	4413      	add	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <process_control_request+0x564>)
 8008158:	4413      	add	r3, r2
 800815a:	617b      	str	r3, [r7, #20]
  return driver;
 800815c:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800815e:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <process_control_request+0x4f8>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 800816e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <process_control_request+0x4e8>
 8008174:	2300      	movs	r3, #0
 8008176:	e07a      	b.n	800826e <process_control_request+0x5de>
        return invoke_class_control(rhport, driver, p_request);
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fd6e 	bl	8007c60 <invoke_class_control>
 8008184:	4603      	mov	r3, r0
 8008186:	e072      	b.n	800826e <process_control_request+0x5de>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d018      	beq.n	80081c2 <process_control_request+0x532>
 8008190:	2b03      	cmp	r3, #3
 8008192:	dc52      	bgt.n	800823a <process_control_request+0x5aa>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <process_control_request+0x50e>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d012      	beq.n	80081c2 <process_control_request+0x532>
 800819c:	e04d      	b.n	800823a <process_control_request+0x5aa>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800819e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fda4 	bl	8008cf4 <usbd_edpt_stalled>
 80081ac:	4603      	mov	r3, r0
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80081b2:	f107 020c 	add.w	r2, r7, #12
 80081b6:	79f8      	ldrb	r0, [r7, #7]
 80081b8:	2302      	movs	r3, #2
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	f000 fe56 	bl	8008e6c <tud_control_xfer>
          }
          break;
 80081c0:	e047      	b.n	8008252 <process_control_request+0x5c2>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11c      	bne.n	8008206 <process_control_request+0x576>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d111      	bne.n	80081f8 <process_control_request+0x568>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 80081d4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fd3d 	bl	8008c5c <usbd_edpt_clear_stall>
 80081e2:	e010      	b.n	8008206 <process_control_request+0x576>
 80081e4:	20005168 	.word	0x20005168
 80081e8:	e000edf0 	.word	0xe000edf0
 80081ec:	20005198 	.word	0x20005198
 80081f0:	20005194 	.word	0x20005194
 80081f4:	0800b008 	.word	0x0800b008
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 80081f8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fcdf 	bl	8008bc4 <usbd_edpt_stall>
              }
            }

            if (driver)
 8008206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008208:	2b00      	cmp	r3, #0
 800820a:	d021      	beq.n	8008250 <process_control_request+0x5c0>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fd24 	bl	8007c60 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8008218:	2000      	movs	r0, #0
 800821a:	f000 fea3 	bl	8008f64 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <process_control_request+0x5e8>)
 8008220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008224:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d110      	bne.n	8008250 <process_control_request+0x5c0>
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fda8 	bl	8008d88 <tud_control_status>
            }
          }
          break;
 8008238:	e00a      	b.n	8008250 <process_control_request+0x5c0>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <process_control_request+0x5ec>)
 800823c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800823e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d000      	beq.n	800824c <process_control_request+0x5bc>
 800824a:	be00      	bkpt	0x0000
 800824c:	2300      	movs	r3, #0
 800824e:	e00e      	b.n	800826e <process_control_request+0x5de>
          break;
 8008250:	bf00      	nop
        }
      }
    }
    break;
 8008252:	e00b      	b.n	800826c <process_control_request+0x5dc>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <process_control_request+0x5ec>)
 8008256:	637b      	str	r3, [r7, #52]	; 0x34
 8008258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d000      	beq.n	8008266 <process_control_request+0x5d6>
 8008264:	be00      	bkpt	0x0000
 8008266:	2300      	movs	r3, #0
 8008268:	e001      	b.n	800826e <process_control_request+0x5de>
    break;
 800826a:	bf00      	nop
  }

  return true;
 800826c:	2301      	movs	r3, #1
}
 800826e:	4618      	mov	r0, r3
 8008270:	3768      	adds	r7, #104	; 0x68
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20005168 	.word	0x20005168
 800827c:	e000edf0 	.word	0xe000edf0

08008280 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b096      	sub	sp, #88	; 0x58
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	460a      	mov	r2, r1
 800828a:	71fb      	strb	r3, [r7, #7]
 800828c:	4613      	mov	r3, r2
 800828e:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8008290:	79bb      	ldrb	r3, [r7, #6]
 8008292:	3b01      	subs	r3, #1
 8008294:	b2db      	uxtb	r3, r3
 8008296:	4618      	mov	r0, r3
 8008298:	f7f8 feda 	bl	8001050 <tud_descriptor_configuration_cb>
 800829c:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <process_set_config+0x2c>
 80082a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d00a      	beq.n	80082c2 <process_set_config+0x42>
 80082ac:	4b89      	ldr	r3, [pc, #548]	; (80084d4 <process_set_config+0x254>)
 80082ae:	623b      	str	r3, [r7, #32]
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d000      	beq.n	80082be <process_set_config+0x3e>
 80082bc:	be00      	bkpt	0x0000
 80082be:	2300      	movs	r3, #0
 80082c0:	e103      	b.n	80084ca <process_set_config+0x24a>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80082c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c4:	79db      	ldrb	r3, [r3, #7]
 80082c6:	115b      	asrs	r3, r3, #5
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	b2d9      	uxtb	r1, r3
 80082ce:	4a82      	ldr	r2, [pc, #520]	; (80084d8 <process_set_config+0x258>)
 80082d0:	7813      	ldrb	r3, [r2, #0]
 80082d2:	f361 1304 	bfi	r3, r1, #4, #1
 80082d6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80082d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082da:	79db      	ldrb	r3, [r3, #7]
 80082dc:	119b      	asrs	r3, r3, #6
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2d9      	uxtb	r1, r3
 80082e4:	4a7c      	ldr	r2, [pc, #496]	; (80084d8 <process_set_config+0x258>)
 80082e6:	7813      	ldrb	r3, [r2, #0]
 80082e8:	f361 1345 	bfi	r3, r1, #5, #1
 80082ec:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80082ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f0:	3309      	adds	r3, #9
 80082f2:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80082f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fe:	4413      	add	r3, r2
 8008300:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 8008302:	e0dc      	b.n	80084be <process_set_config+0x23e>
  {
    uint8_t assoc_itf_count = 1;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800830a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	3301      	adds	r3, #1
 8008312:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8008314:	2b0b      	cmp	r3, #11
 8008316:	d10f      	bne.n	8008338 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8008318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831a:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 800831c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831e:	78db      	ldrb	r3, [r3, #3]
 8008320:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008326:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8008336:	657b      	str	r3, [r7, #84]	; 0x54
 8008338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800833a:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8008342:	2b04      	cmp	r3, #4
 8008344:	d00a      	beq.n	800835c <process_set_config+0xdc>
 8008346:	4b63      	ldr	r3, [pc, #396]	; (80084d4 <process_set_config+0x254>)
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d000      	beq.n	8008358 <process_set_config+0xd8>
 8008356:	be00      	bkpt	0x0000
 8008358:	2300      	movs	r3, #0
 800835a:	e0b6      	b.n	80084ca <process_set_config+0x24a>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 800835c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800835e:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8008360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008368:	2300      	movs	r3, #0
 800836a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800836e:	e08e      	b.n	800848e <process_set_config+0x20e>
 8008370:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008374:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800837a:	4b58      	ldr	r3, [pc, #352]	; (80084dc <process_set_config+0x25c>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	7bfa      	ldrb	r2, [r7, #15]
 8008380:	429a      	cmp	r2, r3
 8008382:	d209      	bcs.n	8008398 <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8008384:	4b56      	ldr	r3, [pc, #344]	; (80084e0 <process_set_config+0x260>)
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	7bfa      	ldrb	r2, [r7, #15]
 800838a:	4613      	mov	r3, r2
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4413      	add	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	e00f      	b.n	80083b8 <process_set_config+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008398:	4b50      	ldr	r3, [pc, #320]	; (80084dc <process_set_config+0x25c>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	7bfa      	ldrb	r2, [r7, #15]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d80a      	bhi.n	80083b8 <process_set_config+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4a4d      	ldr	r2, [pc, #308]	; (80084dc <process_set_config+0x25c>)
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	1a9a      	subs	r2, r3, r2
 80083aa:	4613      	mov	r3, r2
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	4413      	add	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	4a4c      	ldr	r2, [pc, #304]	; (80084e4 <process_set_config+0x264>)
 80083b4:	4413      	add	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
  return driver;
 80083b8:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <process_set_config+0x158>
 80083c2:	4b44      	ldr	r3, [pc, #272]	; (80084d4 <process_set_config+0x254>)
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d000      	beq.n	80083d4 <process_set_config+0x154>
 80083d2:	be00      	bkpt	0x0000
 80083d4:	2300      	movs	r3, #0
 80083d6:	e078      	b.n	80084ca <process_set_config+0x24a>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80083de:	79f8      	ldrb	r0, [r7, #7]
 80083e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083e2:	4798      	blx	r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80083e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d94a      	bls.n	8008484 <process_set_config+0x204>
 80083ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d846      	bhi.n	8008484 <process_set_config+0x204>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80083f6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d107      	bne.n	800840e <process_set_config+0x18e>
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
          #endif

          #if CFG_TUD_MIDI
          if ( driver->open == midid_open ) assoc_itf_count = 2;
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	4a39      	ldr	r2, [pc, #228]	; (80084e8 <process_set_config+0x268>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d102      	bne.n	800840e <process_set_config+0x18e>
 8008408:	2302      	movs	r3, #2
 800840a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800840e:	2300      	movs	r3, #0
 8008410:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8008414:	e024      	b.n	8008460 <process_set_config+0x1e0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8008416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008418:	789a      	ldrb	r2, [r3, #2]
 800841a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800841e:	4413      	add	r3, r2
 8008420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8008424:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008428:	4a2b      	ldr	r2, [pc, #172]	; (80084d8 <process_set_config+0x258>)
 800842a:	4413      	add	r3, r2
 800842c:	78db      	ldrb	r3, [r3, #3]
 800842e:	2bff      	cmp	r3, #255	; 0xff
 8008430:	d00a      	beq.n	8008448 <process_set_config+0x1c8>
 8008432:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <process_set_config+0x254>)
 8008434:	633b      	str	r3, [r7, #48]	; 0x30
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d000      	beq.n	8008444 <process_set_config+0x1c4>
 8008442:	be00      	bkpt	0x0000
 8008444:	2300      	movs	r3, #0
 8008446:	e040      	b.n	80084ca <process_set_config+0x24a>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8008448:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800844c:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <process_set_config+0x258>)
 800844e:	4413      	add	r3, r2
 8008450:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8008454:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008456:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800845a:	3301      	adds	r3, #1
 800845c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8008460:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8008464:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008468:	429a      	cmp	r2, r3
 800846a:	d3d4      	bcc.n	8008416 <process_set_config+0x196>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800846c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008470:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008474:	481d      	ldr	r0, [pc, #116]	; (80084ec <process_set_config+0x26c>)
 8008476:	f002 fc9b 	bl	800adb0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800847a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800847c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800847e:	4413      	add	r3, r2
 8008480:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8008482:	e00b      	b.n	800849c <process_set_config+0x21c>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008484:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008488:	3301      	adds	r3, #1
 800848a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <process_set_config+0x25c>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8008496:	429a      	cmp	r2, r3
 8008498:	f67f af6a 	bls.w	8008370 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800849c:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <process_set_config+0x25c>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d90a      	bls.n	80084be <process_set_config+0x23e>
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <process_set_config+0x254>)
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d000      	beq.n	80084ba <process_set_config+0x23a>
 80084b8:	be00      	bkpt	0x0000
 80084ba:	2300      	movs	r3, #0
 80084bc:	e005      	b.n	80084ca <process_set_config+0x24a>
  while( p_desc < desc_end )
 80084be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c2:	429a      	cmp	r2, r3
 80084c4:	f4ff af1e 	bcc.w	8008304 <process_set_config+0x84>
  }

  return true;
 80084c8:	2301      	movs	r3, #1
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3758      	adds	r7, #88	; 0x58
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	e000edf0 	.word	0xe000edf0
 80084d8:	20005168 	.word	0x20005168
 80084dc:	20005198 	.word	0x20005198
 80084e0:	20005194 	.word	0x20005194
 80084e4:	0800b008 	.word	0x0800b008
 80084e8:	08006615 	.word	0x08006615
 80084ec:	2000517b 	.word	0x2000517b

080084f0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b094      	sub	sp, #80	; 0x50
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	885b      	ldrh	r3, [r3, #2]
 8008500:	b29b      	uxth	r3, r3
 8008502:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	885b      	ldrh	r3, [r3, #2]
 8008514:	b29b      	uxth	r3, r3
 8008516:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8008520:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008524:	3b01      	subs	r3, #1
 8008526:	2b0e      	cmp	r3, #14
 8008528:	f200 80bc 	bhi.w	80086a4 <process_get_descriptor+0x1b4>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <process_get_descriptor+0x44>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008571 	.word	0x08008571
 8008538:	080085d5 	.word	0x080085d5
 800853c:	0800863d 	.word	0x0800863d
 8008540:	080086a5 	.word	0x080086a5
 8008544:	080086a5 	.word	0x080086a5
 8008548:	08008673 	.word	0x08008673
 800854c:	080085d5 	.word	0x080085d5
 8008550:	080086a5 	.word	0x080086a5
 8008554:	080086a5 	.word	0x080086a5
 8008558:	080086a5 	.word	0x080086a5
 800855c:	080086a5 	.word	0x080086a5
 8008560:	080086a5 	.word	0x080086a5
 8008564:	080086a5 	.word	0x080086a5
 8008568:	080086a5 	.word	0x080086a5
 800856c:	08008587 	.word	0x08008587
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8008570:	f7f8 fd64 	bl	800103c <tud_descriptor_device_cb>
 8008574:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8008576:	79f8      	ldrb	r0, [r7, #7]
 8008578:	2312      	movs	r3, #18
 800857a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	f000 fc75 	bl	8008e6c <tud_control_xfer>
 8008582:	4603      	mov	r3, r0
 8008584:	e08f      	b.n	80086a6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8008586:	4b4a      	ldr	r3, [pc, #296]	; (80086b0 <process_get_descriptor+0x1c0>)
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <process_get_descriptor+0xa0>
 800858c:	2300      	movs	r3, #0
 800858e:	e08a      	b.n	80086a6 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8008590:	f3af 8000 	nop.w
 8008594:	4603      	mov	r3, r0
 8008596:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <process_get_descriptor+0xc4>
 800859e:	4b45      	ldr	r3, [pc, #276]	; (80086b4 <process_get_descriptor+0x1c4>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d000      	beq.n	80085b0 <process_get_descriptor+0xc0>
 80085ae:	be00      	bkpt	0x0000
 80085b0:	2300      	movs	r3, #0
 80085b2:	e078      	b.n	80086a6 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80085b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b6:	3302      	adds	r3, #2
 80085b8:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80085c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085c8:	79f8      	ldrb	r0, [r7, #7]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	f000 fc4e 	bl	8008e6c <tud_control_xfer>
 80085d0:	4603      	mov	r3, r0
 80085d2:	e068      	b.n	80086a6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80085d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d107      	bne.n	80085ec <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80085dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f8 fd35 	bl	8001050 <tud_descriptor_configuration_cb>
 80085e6:	4603      	mov	r3, r0
 80085e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ea:	e00b      	b.n	8008604 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80085ec:	4b32      	ldr	r3, [pc, #200]	; (80086b8 <process_get_descriptor+0x1c8>)
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <process_get_descriptor+0x106>
 80085f2:	2300      	movs	r3, #0
 80085f4:	e057      	b.n	80086a6 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80085f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80085fa:	4618      	mov	r0, r3
 80085fc:	f3af 8000 	nop.w
 8008600:	4603      	mov	r3, r0
 8008602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <process_get_descriptor+0x130>
 800860a:	4b2a      	ldr	r3, [pc, #168]	; (80086b4 <process_get_descriptor+0x1c4>)
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d000      	beq.n	800861c <process_get_descriptor+0x12c>
 800861a:	be00      	bkpt	0x0000
 800861c:	2300      	movs	r3, #0
 800861e:	e042      	b.n	80086a6 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8008620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008622:	3302      	adds	r3, #2
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800862c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800862e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008630:	79f8      	ldrb	r0, [r7, #7]
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	f000 fc1a 	bl	8008e6c <tud_control_xfer>
 8008638:	4603      	mov	r3, r0
 800863a:	e034      	b.n	80086a6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	889b      	ldrh	r3, [r3, #4]
 8008640:	b29a      	uxth	r2, r3
 8008642:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7f8 fd0f 	bl	800106c <tud_descriptor_string_cb>
 800864e:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <process_get_descriptor+0x16a>
 8008656:	2300      	movs	r3, #0
 8008658:	e025      	b.n	80086a6 <process_get_descriptor+0x1b6>
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8008662:	b29b      	uxth	r3, r3
 8008664:	79f8      	ldrb	r0, [r7, #7]
 8008666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	f000 fbff 	bl	8008e6c <tud_control_xfer>
 800866e:	4603      	mov	r3, r0
 8008670:	e019      	b.n	80086a6 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <process_get_descriptor+0x1cc>)
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <process_get_descriptor+0x18c>
 8008678:	2300      	movs	r3, #0
 800867a:	e014      	b.n	80086a6 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800867c:	f3af 8000 	nop.w
 8008680:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <process_get_descriptor+0x19c>
 8008688:	2300      	movs	r3, #0
 800868a:	e00c      	b.n	80086a6 <process_get_descriptor+0x1b6>
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8008694:	b29b      	uxth	r3, r3
 8008696:	79f8      	ldrb	r0, [r7, #7]
 8008698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	f000 fbe6 	bl	8008e6c <tud_control_xfer>
 80086a0:	4603      	mov	r3, r0
 80086a2:	e000      	b.n	80086a6 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 80086a4:	2300      	movs	r3, #0
  }
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3750      	adds	r7, #80	; 0x50
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	00000000 	.word	0x00000000
 80086b4:	e000edf0 	.word	0xe000edf0
	...

080086c0 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b098      	sub	sp, #96	; 0x60
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  switch (event->event_id) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	3b02      	subs	r3, #2
 80086d8:	2b03      	cmp	r3, #3
 80086da:	f200 80f3 	bhi.w	80088c4 <dcd_event_handler+0x204>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <dcd_event_handler+0x24>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	08008765 	.word	0x08008765
 80086ec:	08008721 	.word	0x08008721
 80086f0:	08008743 	.word	0x08008743
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80086f4:	4aa1      	ldr	r2, [pc, #644]	; (800897c <dcd_event_handler+0x2bc>)
 80086f6:	7813      	ldrb	r3, [r2, #0]
 80086f8:	f36f 0300 	bfc	r3, #0, #1
 80086fc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80086fe:	4a9f      	ldr	r2, [pc, #636]	; (800897c <dcd_event_handler+0x2bc>)
 8008700:	7813      	ldrb	r3, [r2, #0]
 8008702:	f36f 0341 	bfc	r3, #1, #1
 8008706:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8008708:	4b9c      	ldr	r3, [pc, #624]	; (800897c <dcd_event_handler+0x2bc>)
 800870a:	2200      	movs	r2, #0
 800870c:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 800870e:	4a9b      	ldr	r2, [pc, #620]	; (800897c <dcd_event_handler+0x2bc>)
 8008710:	7813      	ldrb	r3, [r2, #0]
 8008712:	f36f 0382 	bfc	r3, #2, #1
 8008716:	7013      	strb	r3, [r2, #0]
      send = true;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      break;
 800871e:	e0d8      	b.n	80088d2 <dcd_event_handler+0x212>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8008720:	4b96      	ldr	r3, [pc, #600]	; (800897c <dcd_event_handler+0x2bc>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80ce 	beq.w	80088cc <dcd_event_handler+0x20c>
        _usbd_dev.suspended = 1;
 8008730:	4a92      	ldr	r2, [pc, #584]	; (800897c <dcd_event_handler+0x2bc>)
 8008732:	7813      	ldrb	r3, [r2, #0]
 8008734:	f043 0304 	orr.w	r3, r3, #4
 8008738:	7013      	strb	r3, [r2, #0]
        send = true;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      }
      break;
 8008740:	e0c4      	b.n	80088cc <dcd_event_handler+0x20c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8008742:	4b8e      	ldr	r3, [pc, #568]	; (800897c <dcd_event_handler+0x2bc>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80bf 	beq.w	80088d0 <dcd_event_handler+0x210>
        _usbd_dev.suspended = 0;
 8008752:	4a8a      	ldr	r2, [pc, #552]	; (800897c <dcd_event_handler+0x2bc>)
 8008754:	7813      	ldrb	r3, [r2, #0]
 8008756:	f36f 0382 	bfc	r3, #2, #1
 800875a:	7013      	strb	r3, [r2, #0]
        send = true;
 800875c:	2301      	movs	r3, #1
 800875e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      }
      break;
 8008762:	e0b5      	b.n	80088d0 <dcd_event_handler+0x210>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8008764:	4b85      	ldr	r3, [pc, #532]	; (800897c <dcd_event_handler+0x2bc>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d05e      	beq.n	8008830 <dcd_event_handler+0x170>
        _usbd_dev.suspended = 0;
 8008772:	4a82      	ldr	r2, [pc, #520]	; (800897c <dcd_event_handler+0x2bc>)
 8008774:	7813      	ldrb	r3, [r2, #0]
 8008776:	f36f 0382 	bfc	r3, #2, #1
 800877a:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	733b      	strb	r3, [r7, #12]
 800878e:	2305      	movs	r3, #5
 8008790:	737b      	strb	r3, [r7, #13]
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	657b      	str	r3, [r7, #84]	; 0x54
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 800879e:	4b78      	ldr	r3, [pc, #480]	; (8008980 <dcd_event_handler+0x2c0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80087ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( !in_isr ) {
 80087b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80087b4:	f083 0301 	eor.w	r3, r3, #1
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <dcd_event_handler+0x11a>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80087c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80087c8:	f7fb f948 	bl	8003a5c <xQueueGenericSend>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bf14      	ite	ne
 80087d2:	2301      	movne	r3, #1
 80087d4:	2300      	moveq	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	e01a      	b.n	8008810 <dcd_event_handler+0x150>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80087da:	2300      	movs	r3, #0
 80087dc:	60bb      	str	r3, [r7, #8]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 80087de:	f107 0208 	add.w	r2, r7, #8
 80087e2:	2300      	movs	r3, #0
 80087e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80087e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80087e8:	f7fb fa36 	bl	8003c58 <xQueueGenericSendFromISR>
 80087ec:	6438      	str	r0, [r7, #64]	; 0x40
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <dcd_event_handler+0x144>
 80087f4:	4b63      	ldr	r3, [pc, #396]	; (8008984 <dcd_event_handler+0x2c4>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
    return res != 0;
 8008804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	bf14      	ite	ne
 800880a:	2301      	movne	r3, #1
 800880c:	2300      	moveq	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008814:	4b5c      	ldr	r3, [pc, #368]	; (8008988 <dcd_event_handler+0x2c8>)
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <dcd_event_handler+0x16e>
 800881a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881c:	7818      	ldrb	r0, [r3, #0]
 800881e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	4619      	mov	r1, r3
 8008824:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008828:	461a      	mov	r2, r3
 800882a:	f3af 8000 	nop.w
  return ret;
 800882e:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008830:	2300      	movs	r3, #0
 8008832:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8008836:	e03e      	b.n	80088b6 <dcd_event_handler+0x1f6>
 8008838:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800883c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  usbd_class_driver_t const * driver = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
  if ( drvid < _app_driver_count ) {
 8008844:	4b51      	ldr	r3, [pc, #324]	; (800898c <dcd_event_handler+0x2cc>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800884c:	429a      	cmp	r2, r3
 800884e:	d20a      	bcs.n	8008866 <dcd_event_handler+0x1a6>
    driver = &_app_driver[drvid];
 8008850:	4b4f      	ldr	r3, [pc, #316]	; (8008990 <dcd_event_handler+0x2d0>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	440b      	add	r3, r1
 8008862:	63bb      	str	r3, [r7, #56]	; 0x38
 8008864:	e011      	b.n	800888a <dcd_event_handler+0x1ca>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008866:	4b49      	ldr	r3, [pc, #292]	; (800898c <dcd_event_handler+0x2cc>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800886e:	429a      	cmp	r2, r3
 8008870:	d80b      	bhi.n	800888a <dcd_event_handler+0x1ca>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008872:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008876:	4a45      	ldr	r2, [pc, #276]	; (800898c <dcd_event_handler+0x2cc>)
 8008878:	7812      	ldrb	r2, [r2, #0]
 800887a:	1a9a      	subs	r2, r3, r2
 800887c:	4613      	mov	r3, r2
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	4413      	add	r3, r2
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4a43      	ldr	r2, [pc, #268]	; (8008994 <dcd_event_handler+0x2d4>)
 8008886:	4413      	add	r3, r2
 8008888:	63bb      	str	r3, [r7, #56]	; 0x38
  return driver;
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        usbd_class_driver_t const* driver = get_driver(i);
 800888c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (driver && driver->sof) {
 800888e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <dcd_event_handler+0x1ec>
 8008894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <dcd_event_handler+0x1ec>
          driver->sof(event->rhport, event->sof.frame_count);
 800889c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7810      	ldrb	r0, [r2, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6852      	ldr	r2, [r2, #4]
 80088a8:	4611      	mov	r1, r2
 80088aa:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80088ac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80088b0:	3301      	adds	r3, #1
 80088b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80088b6:	4b35      	ldr	r3, [pc, #212]	; (800898c <dcd_event_handler+0x2cc>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80088be:	429a      	cmp	r2, r3
 80088c0:	d9ba      	bls.n	8008838 <dcd_event_handler+0x178>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 80088c2:	e006      	b.n	80088d2 <dcd_event_handler+0x212>

    default:
      send = true;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      break;
 80088ca:	e002      	b.n	80088d2 <dcd_event_handler+0x212>
      break;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <dcd_event_handler+0x212>
      break;
 80088d0:	bf00      	nop
  }

  if (send) {
 80088d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d04b      	beq.n	8008972 <dcd_event_handler+0x2b2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 80088e4:	4b26      	ldr	r3, [pc, #152]	; (8008980 <dcd_event_handler+0x2c0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if ( !in_isr ) {
 80088f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088fa:	f083 0301 	eor.w	r3, r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00d      	beq.n	8008920 <dcd_event_handler+0x260>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800890e:	f7fb f8a5 	bl	8003a5c <xQueueGenericSend>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	e01a      	b.n	8008956 <dcd_event_handler+0x296>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	61bb      	str	r3, [r7, #24]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8008924:	f107 0218 	add.w	r2, r7, #24
 8008928:	2300      	movs	r3, #0
 800892a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800892c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800892e:	f7fb f993 	bl	8003c58 <xQueueGenericSendFromISR>
 8008932:	6238      	str	r0, [r7, #32]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <dcd_event_handler+0x28a>
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <dcd_event_handler+0x2c4>)
 800893c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
    return res != 0;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	2b00      	cmp	r3, #0
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	77fb      	strb	r3, [r7, #31]
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <dcd_event_handler+0x2c8>)
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <dcd_event_handler+0x2b2>
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	7818      	ldrb	r0, [r3, #0]
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	4619      	mov	r1, r3
 8008968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800896c:	461a      	mov	r2, r3
 800896e:	f3af 8000 	nop.w
    queue_event(event, in_isr);
  }
}
 8008972:	bf00      	nop
 8008974:	3760      	adds	r7, #96	; 0x60
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20005168 	.word	0x20005168
 8008980:	2000525c 	.word	0x2000525c
 8008984:	e000ed04 	.word	0xe000ed04
 8008988:	00000000 	.word	0x00000000
 800898c:	20005198 	.word	0x20005198
 8008990:	20005194 	.word	0x20005194
 8008994:	0800b008 	.word	0x0800b008

08008998 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80089a4:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <usbd_edpt_open+0x7c>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	789b      	ldrb	r3, [r3, #2]
 80089ae:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d90a      	bls.n	80089d2 <usbd_edpt_open+0x3a>
 80089bc:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <usbd_edpt_open+0x80>)
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d000      	beq.n	80089ce <usbd_edpt_open+0x36>
 80089cc:	be00      	bkpt	0x0000
 80089ce:	2300      	movs	r3, #0
 80089d0:	e01c      	b.n	8008a0c <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <usbd_edpt_open+0x84>)
 80089d4:	789b      	ldrb	r3, [r3, #2]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6838      	ldr	r0, [r7, #0]
 80089da:	f002 f96d 	bl	800acb8 <tu_edpt_validate>
 80089de:	4603      	mov	r3, r0
 80089e0:	f083 0301 	eor.w	r3, r3, #1
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <usbd_edpt_open+0x68>
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <usbd_edpt_open+0x80>)
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d000      	beq.n	80089fc <usbd_edpt_open+0x64>
 80089fa:	be00      	bkpt	0x0000
 80089fc:	2300      	movs	r3, #0
 80089fe:	e005      	b.n	8008a0c <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f82d 	bl	8009a64 <dcd_edpt_open>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000020 	.word	0x20000020
 8008a18:	e000edf0 	.word	0xe000edf0
 8008a1c:	20005168 	.word	0x20005168

08008a20 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	460a      	mov	r2, r1
 8008a2a:	71fb      	strb	r3, [r7, #7]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	71bb      	strb	r3, [r7, #6]
 8008a30:	79bb      	ldrb	r3, [r7, #6]
 8008a32:	73bb      	strb	r3, [r7, #14]
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8008a3c:	75fb      	strb	r3, [r7, #23]
 8008a3e:	79bb      	ldrb	r3, [r7, #6]
 8008a40:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	09db      	lsrs	r3, r3, #7
 8008a46:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8008a48:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008a4a:	7dfa      	ldrb	r2, [r7, #23]
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
 8008a4e:	0052      	lsls	r2, r2, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	3318      	adds	r3, #24
 8008a54:	4a07      	ldr	r2, [pc, #28]	; (8008a74 <usbd_edpt_claim+0x54>)
 8008a56:	4413      	add	r3, r2
 8008a58:	3307      	adds	r3, #7
 8008a5a:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <usbd_edpt_claim+0x58>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4619      	mov	r1, r3
 8008a62:	6938      	ldr	r0, [r7, #16]
 8008a64:	f002 f84c 	bl	800ab00 <tu_edpt_claim>
 8008a68:	4603      	mov	r3, r0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20005168 	.word	0x20005168
 8008a78:	200052b0 	.word	0x200052b0

08008a7c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	460a      	mov	r2, r1
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71bb      	strb	r3, [r7, #6]
 8008a8c:	79bb      	ldrb	r3, [r7, #6]
 8008a8e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8008a98:	75fb      	strb	r3, [r7, #23]
 8008a9a:	79bb      	ldrb	r3, [r7, #6]
 8008a9c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	09db      	lsrs	r3, r3, #7
 8008aa2:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8008aa4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008aa6:	7dfa      	ldrb	r2, [r7, #23]
 8008aa8:	7dbb      	ldrb	r3, [r7, #22]
 8008aaa:	0052      	lsls	r2, r2, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	3318      	adds	r3, #24
 8008ab0:	4a07      	ldr	r2, [pc, #28]	; (8008ad0 <usbd_edpt_release+0x54>)
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3307      	adds	r3, #7
 8008ab6:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <usbd_edpt_release+0x58>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f002 f894 	bl	800abec <tu_edpt_release>
 8008ac4:	4603      	mov	r3, r0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20005168 	.word	0x20005168
 8008ad4:	200052b0 	.word	0x200052b0

08008ad8 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	603a      	str	r2, [r7, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	71bb      	strb	r3, [r7, #6]
 8008aea:	4613      	mov	r3, r2
 8008aec:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008aee:	4b32      	ldr	r3, [pc, #200]	; (8008bb8 <usbd_edpt_xfer+0xe0>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
 8008af4:	79bb      	ldrb	r3, [r7, #6]
 8008af6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008af8:	7abb      	ldrb	r3, [r7, #10]
 8008afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afe:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008b00:	75fb      	strb	r3, [r7, #23]
 8008b02:	79bb      	ldrb	r3, [r7, #6]
 8008b04:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	09db      	lsrs	r3, r3, #7
 8008b0a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008b0c:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008b0e:	7dfa      	ldrb	r2, [r7, #23]
 8008b10:	7dbb      	ldrb	r3, [r7, #22]
 8008b12:	492a      	ldr	r1, [pc, #168]	; (8008bbc <usbd_edpt_xfer+0xe4>)
 8008b14:	0052      	lsls	r2, r2, #1
 8008b16:	440a      	add	r2, r1
 8008b18:	4413      	add	r3, r2
 8008b1a:	3318      	adds	r3, #24
 8008b1c:	79db      	ldrb	r3, [r3, #7]
 8008b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <usbd_edpt_xfer+0x66>
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <usbd_edpt_xfer+0xe8>)
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d000      	beq.n	8008b3a <usbd_edpt_xfer+0x62>
 8008b38:	be00      	bkpt	0x0000
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e038      	b.n	8008bb0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008b3e:	7dfa      	ldrb	r2, [r7, #23]
 8008b40:	7dbb      	ldrb	r3, [r7, #22]
 8008b42:	491e      	ldr	r1, [pc, #120]	; (8008bbc <usbd_edpt_xfer+0xe4>)
 8008b44:	0052      	lsls	r2, r2, #1
 8008b46:	440a      	add	r2, r1
 8008b48:	4413      	add	r3, r2
 8008b4a:	f103 0218 	add.w	r2, r3, #24
 8008b4e:	79d3      	ldrb	r3, [r2, #7]
 8008b50:	f043 0301 	orr.w	r3, r3, #1
 8008b54:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8008b56:	88bb      	ldrh	r3, [r7, #4]
 8008b58:	79b9      	ldrb	r1, [r7, #6]
 8008b5a:	79f8      	ldrb	r0, [r7, #7]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	f001 f8ff 	bl	8009d60 <dcd_edpt_xfer>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <usbd_edpt_xfer+0x94>
  {
    return true;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e021      	b.n	8008bb0 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008b6c:	7dfa      	ldrb	r2, [r7, #23]
 8008b6e:	7dbb      	ldrb	r3, [r7, #22]
 8008b70:	4912      	ldr	r1, [pc, #72]	; (8008bbc <usbd_edpt_xfer+0xe4>)
 8008b72:	0052      	lsls	r2, r2, #1
 8008b74:	440a      	add	r2, r1
 8008b76:	4413      	add	r3, r2
 8008b78:	f103 0218 	add.w	r2, r3, #24
 8008b7c:	79d3      	ldrb	r3, [r2, #7]
 8008b7e:	f36f 0300 	bfc	r3, #0, #1
 8008b82:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008b84:	7dfa      	ldrb	r2, [r7, #23]
 8008b86:	7dbb      	ldrb	r3, [r7, #22]
 8008b88:	490c      	ldr	r1, [pc, #48]	; (8008bbc <usbd_edpt_xfer+0xe4>)
 8008b8a:	0052      	lsls	r2, r2, #1
 8008b8c:	440a      	add	r2, r1
 8008b8e:	4413      	add	r3, r2
 8008b90:	f103 0218 	add.w	r2, r3, #24
 8008b94:	79d3      	ldrb	r3, [r2, #7]
 8008b96:	f36f 0382 	bfc	r3, #2, #1
 8008b9a:	71d3      	strb	r3, [r2, #7]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8008b9c:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <usbd_edpt_xfer+0xe8>)
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d000      	beq.n	8008bae <usbd_edpt_xfer+0xd6>
 8008bac:	be00      	bkpt	0x0000
    return false;
 8008bae:	2300      	movs	r3, #0
  }
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000020 	.word	0x20000020
 8008bbc:	20005168 	.word	0x20005168
 8008bc0:	e000edf0 	.word	0xe000edf0

08008bc4 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	460a      	mov	r2, r1
 8008bce:	71fb      	strb	r3, [r7, #7]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008bd4:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <usbd_edpt_stall+0x90>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	71fb      	strb	r3, [r7, #7]
 8008bda:	79bb      	ldrb	r3, [r7, #6]
 8008bdc:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008bde:	7b3b      	ldrb	r3, [r7, #12]
 8008be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008be6:	73fb      	strb	r3, [r7, #15]
 8008be8:	79bb      	ldrb	r3, [r7, #6]
 8008bea:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008bec:	7b7b      	ldrb	r3, [r7, #13]
 8008bee:	09db      	lsrs	r3, r3, #7
 8008bf0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008bf2:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8008bf4:	7bfa      	ldrb	r2, [r7, #15]
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	4917      	ldr	r1, [pc, #92]	; (8008c58 <usbd_edpt_stall+0x94>)
 8008bfa:	0052      	lsls	r2, r2, #1
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4413      	add	r3, r2
 8008c00:	3318      	adds	r3, #24
 8008c02:	79db      	ldrb	r3, [r3, #7]
 8008c04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d11d      	bne.n	8008c4a <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8008c0e:	79ba      	ldrb	r2, [r7, #6]
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f9f7 	bl	800a008 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	490e      	ldr	r1, [pc, #56]	; (8008c58 <usbd_edpt_stall+0x94>)
 8008c20:	0052      	lsls	r2, r2, #1
 8008c22:	440a      	add	r2, r1
 8008c24:	4413      	add	r3, r2
 8008c26:	f103 0218 	add.w	r2, r3, #24
 8008c2a:	79d3      	ldrb	r3, [r2, #7]
 8008c2c:	f043 0302 	orr.w	r3, r3, #2
 8008c30:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008c32:	7bfa      	ldrb	r2, [r7, #15]
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	4908      	ldr	r1, [pc, #32]	; (8008c58 <usbd_edpt_stall+0x94>)
 8008c38:	0052      	lsls	r2, r2, #1
 8008c3a:	440a      	add	r2, r1
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f103 0218 	add.w	r2, r3, #24
 8008c42:	79d3      	ldrb	r3, [r2, #7]
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	71d3      	strb	r3, [r2, #7]
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000020 	.word	0x20000020
 8008c58:	20005168 	.word	0x20005168

08008c5c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	460a      	mov	r2, r1
 8008c66:	71fb      	strb	r3, [r7, #7]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008c6c:	4b1f      	ldr	r3, [pc, #124]	; (8008cec <usbd_edpt_clear_stall+0x90>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	71fb      	strb	r3, [r7, #7]
 8008c72:	79bb      	ldrb	r3, [r7, #6]
 8008c74:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008c76:	7b3b      	ldrb	r3, [r7, #12]
 8008c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008c7e:	73fb      	strb	r3, [r7, #15]
 8008c80:	79bb      	ldrb	r3, [r7, #6]
 8008c82:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008c84:	7b7b      	ldrb	r3, [r7, #13]
 8008c86:	09db      	lsrs	r3, r3, #7
 8008c88:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008c8a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8008c8c:	7bfa      	ldrb	r2, [r7, #15]
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	4917      	ldr	r1, [pc, #92]	; (8008cf0 <usbd_edpt_clear_stall+0x94>)
 8008c92:	0052      	lsls	r2, r2, #1
 8008c94:	440a      	add	r2, r1
 8008c96:	4413      	add	r3, r2
 8008c98:	3318      	adds	r3, #24
 8008c9a:	79db      	ldrb	r3, [r3, #7]
 8008c9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01d      	beq.n	8008ce2 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8008ca6:	79ba      	ldrb	r2, [r7, #6]
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	4611      	mov	r1, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 f9bd 	bl	800a02c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008cb2:	7bfa      	ldrb	r2, [r7, #15]
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	490e      	ldr	r1, [pc, #56]	; (8008cf0 <usbd_edpt_clear_stall+0x94>)
 8008cb8:	0052      	lsls	r2, r2, #1
 8008cba:	440a      	add	r2, r1
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f103 0218 	add.w	r2, r3, #24
 8008cc2:	79d3      	ldrb	r3, [r2, #7]
 8008cc4:	f36f 0341 	bfc	r3, #1, #1
 8008cc8:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008cca:	7bfa      	ldrb	r2, [r7, #15]
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	4908      	ldr	r1, [pc, #32]	; (8008cf0 <usbd_edpt_clear_stall+0x94>)
 8008cd0:	0052      	lsls	r2, r2, #1
 8008cd2:	440a      	add	r2, r1
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f103 0218 	add.w	r2, r3, #24
 8008cda:	79d3      	ldrb	r3, [r2, #7]
 8008cdc:	f36f 0300 	bfc	r3, #0, #1
 8008ce0:	71d3      	strb	r3, [r2, #7]
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000020 	.word	0x20000020
 8008cf0:	20005168 	.word	0x20005168

08008cf4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	71fb      	strb	r3, [r7, #7]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71bb      	strb	r3, [r7, #6]
 8008d04:	79bb      	ldrb	r3, [r7, #6]
 8008d06:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008d08:	7b3b      	ldrb	r3, [r7, #12]
 8008d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008d10:	73fb      	strb	r3, [r7, #15]
 8008d12:	79bb      	ldrb	r3, [r7, #6]
 8008d14:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008d16:	7b7b      	ldrb	r3, [r7, #13]
 8008d18:	09db      	lsrs	r3, r3, #7
 8008d1a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008d1c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008d1e:	7bfa      	ldrb	r2, [r7, #15]
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	490a      	ldr	r1, [pc, #40]	; (8008d4c <usbd_edpt_stalled+0x58>)
 8008d24:	0052      	lsls	r2, r2, #1
 8008d26:	440a      	add	r2, r1
 8008d28:	4413      	add	r3, r2
 8008d2a:	3318      	adds	r3, #24
 8008d2c:	79db      	ldrb	r3, [r3, #7]
 8008d2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf14      	ite	ne
 8008d38:	2301      	movne	r3, #1
 8008d3a:	2300      	moveq	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20005168 	.word	0x20005168

08008d50 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <_status_stage_xact+0x1e>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e000      	b.n	8008d70 <_status_stage_xact+0x20>
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8008d72:	7bf9      	ldrb	r1, [r7, #15]
 8008d74:	79f8      	ldrb	r0, [r7, #7]
 8008d76:	2300      	movs	r3, #0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7ff fead 	bl	8008ad8 <usbd_edpt_xfer>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <tud_control_status+0x3c>)
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	6810      	ldr	r0, [r2, #0]
 8008d9a:	6851      	ldr	r1, [r2, #4]
 8008d9c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <tud_control_status+0x3c>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <tud_control_status+0x3c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <tud_control_status+0x3c>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff ffcb 	bl	8008d50 <_status_stage_xact>
 8008dba:	4603      	mov	r3, r0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	200052b4 	.word	0x200052b4

08008dc8 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8008dd2:	4b24      	ldr	r3, [pc, #144]	; (8008e64 <_data_stage_xact+0x9c>)
 8008dd4:	899a      	ldrh	r2, [r3, #12]
 8008dd6:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <_data_stage_xact+0x9c>)
 8008dd8:	89db      	ldrh	r3, [r3, #14]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	837b      	strh	r3, [r7, #26]
 8008de0:	2340      	movs	r3, #64	; 0x40
 8008de2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008de4:	8b7a      	ldrh	r2, [r7, #26]
 8008de6:	8b3b      	ldrh	r3, [r7, #24]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	bf28      	it	cs
 8008dec:	4613      	movcs	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8008df2:	2300      	movs	r3, #0
 8008df4:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8008df6:	4b1b      	ldr	r3, [pc, #108]	; (8008e64 <_data_stage_xact+0x9c>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01e      	beq.n	8008e42 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8008e04:	2380      	movs	r3, #128	; 0x80
 8008e06:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8008e08:	8bbb      	ldrh	r3, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d019      	beq.n	8008e42 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <_data_stage_xact+0x9c>)
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	8bbb      	ldrh	r3, [r7, #28]
 8008e14:	4914      	ldr	r1, [pc, #80]	; (8008e68 <_data_stage_xact+0xa0>)
 8008e16:	6179      	str	r1, [r7, #20]
 8008e18:	2140      	movs	r1, #64	; 0x40
 8008e1a:	6139      	str	r1, [r7, #16]
 8008e1c:	60fa      	str	r2, [r7, #12]
 8008e1e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d202      	bcs.n	8008e2e <_data_stage_xact+0x66>
    return -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2c:	e005      	b.n	8008e3a <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	68f9      	ldr	r1, [r7, #12]
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f002 f82e 	bl	800ae94 <memcpy>
  return 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <_data_stage_xact+0x7a>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e00b      	b.n	8008e5a <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8008e42:	8bbb      	ldrh	r3, [r7, #28]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <_data_stage_xact+0x84>
 8008e48:	4a07      	ldr	r2, [pc, #28]	; (8008e68 <_data_stage_xact+0xa0>)
 8008e4a:	e000      	b.n	8008e4e <_data_stage_xact+0x86>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	8bbb      	ldrh	r3, [r7, #28]
 8008e50:	7ff9      	ldrb	r1, [r7, #31]
 8008e52:	79f8      	ldrb	r0, [r7, #7]
 8008e54:	f7ff fe40 	bl	8008ad8 <usbd_edpt_xfer>
 8008e58:	4603      	mov	r3, r0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200052b4 	.word	0x200052b4
 8008e68:	200052c8 	.word	0x200052c8

08008e6c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	461a      	mov	r2, r3
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8008e80:	4b30      	ldr	r3, [pc, #192]	; (8008f44 <tud_control_xfer+0xd8>)
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	6810      	ldr	r0, [r2, #0]
 8008e86:	6851      	ldr	r1, [r2, #4]
 8008e88:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8008e8a:	4a2e      	ldr	r2, [pc, #184]	; (8008f44 <tud_control_xfer+0xd8>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008e90:	4b2c      	ldr	r3, [pc, #176]	; (8008f44 <tud_control_xfer+0xd8>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	88db      	ldrh	r3, [r3, #6]
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	89bb      	ldrh	r3, [r7, #12]
 8008e9e:	827b      	strh	r3, [r7, #18]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008ea4:	8a7a      	ldrh	r2, [r7, #18]
 8008ea6:	8a3b      	ldrh	r3, [r7, #16]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	bf28      	it	cs
 8008eac:	4613      	movcs	r3, r2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <tud_control_xfer+0xd8>)
 8008eb2:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	88db      	ldrh	r3, [r3, #6]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d026      	beq.n	8008f0c <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <tud_control_xfer+0xd8>)
 8008ec0:	899b      	ldrh	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00d      	beq.n	8008ee2 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <tud_control_xfer+0x76>
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <tud_control_xfer+0xdc>)
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d000      	beq.n	8008ede <tud_control_xfer+0x72>
 8008edc:	be00      	bkpt	0x0000
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e02b      	b.n	8008f3a <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff6f 	bl	8008dc8 <_data_stage_xact>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f083 0301 	eor.w	r3, r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d020      	beq.n	8008f38 <tud_control_xfer+0xcc>
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <tud_control_xfer+0xdc>)
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d000      	beq.n	8008f08 <tud_control_xfer+0x9c>
 8008f06:	be00      	bkpt	0x0000
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e016      	b.n	8008f3a <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff ff1d 	bl	8008d50 <_status_stage_xact>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f083 0301 	eor.w	r3, r3, #1
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <tud_control_xfer+0xcc>
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <tud_control_xfer+0xdc>)
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d000      	beq.n	8008f34 <tud_control_xfer+0xc8>
 8008f32:	be00      	bkpt	0x0000
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <tud_control_xfer+0xce>
  }

  return true;
 8008f38:	2301      	movs	r3, #1
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200052b4 	.word	0x200052b4
 8008f48:	e000edf0 	.word	0xe000edf0

08008f4c <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008f50:	2214      	movs	r2, #20
 8008f52:	2100      	movs	r1, #0
 8008f54:	4802      	ldr	r0, [pc, #8]	; (8008f60 <usbd_control_reset+0x14>)
 8008f56:	f001 ff70 	bl	800ae3a <memset>
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	200052b4 	.word	0x200052b4

08008f64 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <usbd_control_set_complete_callback+0x1c>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6113      	str	r3, [r2, #16]
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	200052b4 	.word	0x200052b4

08008f84 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8008f8c:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <usbd_control_set_request+0x30>)
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6810      	ldr	r0, [r2, #0]
 8008f92:	6851      	ldr	r1, [r2, #4]
 8008f94:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008f96:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <usbd_control_set_request+0x30>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <usbd_control_set_request+0x30>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008fa2:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <usbd_control_set_request+0x30>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	819a      	strh	r2, [r3, #12]
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	200052b4 	.word	0x200052b4

08008fb8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	71fb      	strb	r3, [r7, #7]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	71bb      	strb	r3, [r7, #6]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	717b      	strb	r3, [r7, #5]
 8008fcc:	79bb      	ldrb	r3, [r7, #6]
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	09db      	lsrs	r3, r3, #7
 8008fd4:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8008fd6:	4a50      	ldr	r2, [pc, #320]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8008fd8:	7812      	ldrb	r2, [r2, #0]
 8008fda:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d021      	beq.n	8009028 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <usbd_control_xfer_cb+0x48>
 8008fea:	4b4c      	ldr	r3, [pc, #304]	; (800911c <usbd_control_xfer_cb+0x164>)
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d000      	beq.n	8008ffc <usbd_control_xfer_cb+0x44>
 8008ffa:	be00      	bkpt	0x0000
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e087      	b.n	8009110 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8009000:	4b47      	ldr	r3, [pc, #284]	; (8009120 <usbd_control_xfer_cb+0x168>)
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <usbd_control_xfer_cb+0x58>
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	4943      	ldr	r1, [pc, #268]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800900a:	4618      	mov	r0, r3
 800900c:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8009010:	4b41      	ldr	r3, [pc, #260]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8009018:	4b3f      	ldr	r3, [pc, #252]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	79f8      	ldrb	r0, [r7, #7]
 800901e:	4a3e      	ldr	r2, [pc, #248]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009020:	2103      	movs	r1, #3
 8009022:	4798      	blx	r3
    }

    return true;
 8009024:	2301      	movs	r3, #1
 8009026:	e073      	b.n	8009110 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8009028:	4b3b      	ldr	r3, [pc, #236]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10c      	bne.n	8009050 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8009036:	4b38      	ldr	r3, [pc, #224]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <usbd_control_xfer_cb+0x8a>
 800903e:	2300      	movs	r3, #0
 8009040:	e066      	b.n	8009110 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8009042:	4b35      	ldr	r3, [pc, #212]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4936      	ldr	r1, [pc, #216]	; (8009124 <usbd_control_xfer_cb+0x16c>)
 800904a:	4618      	mov	r0, r3
 800904c:	f001 ff22 	bl	800ae94 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8009050:	4b31      	ldr	r3, [pc, #196]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009052:	89da      	ldrh	r2, [r3, #14]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	4413      	add	r3, r2
 800905a:	b29a      	uxth	r2, r3
 800905c:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800905e:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8009060:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	4413      	add	r3, r2
 8009068:	4a2b      	ldr	r2, [pc, #172]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800906a:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 800906c:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800906e:	88da      	ldrh	r2, [r3, #6]
 8009070:	4b29      	ldr	r3, [pc, #164]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009072:	89db      	ldrh	r3, [r3, #14]
 8009074:	429a      	cmp	r2, r3
 8009076:	d002      	beq.n	800907e <usbd_control_xfer_cb+0xc6>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2b3f      	cmp	r3, #63	; 0x3f
 800907c:	d831      	bhi.n	80090e2 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 800907e:	2301      	movs	r3, #1
 8009080:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8009082:	4b25      	ldr	r3, [pc, #148]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800908a:	4b23      	ldr	r3, [pc, #140]	; (8009118 <usbd_control_xfer_cb+0x160>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	79f8      	ldrb	r0, [r7, #7]
 8009090:	4a21      	ldr	r2, [pc, #132]	; (8009118 <usbd_control_xfer_cb+0x160>)
 8009092:	2102      	movs	r1, #2
 8009094:	4798      	blx	r3
 8009096:	4603      	mov	r3, r0
 8009098:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 800909a:	7ffb      	ldrb	r3, [r7, #31]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d015      	beq.n	80090cc <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	491d      	ldr	r1, [pc, #116]	; (8009118 <usbd_control_xfer_cb+0x160>)
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7ff fe53 	bl	8008d50 <_status_stage_xact>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f083 0301 	eor.w	r3, r3, #1
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d02a      	beq.n	800910c <usbd_control_xfer_cb+0x154>
 80090b6:	4b19      	ldr	r3, [pc, #100]	; (800911c <usbd_control_xfer_cb+0x164>)
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d000      	beq.n	80090c8 <usbd_control_xfer_cb+0x110>
 80090c6:	be00      	bkpt	0x0000
 80090c8:	2300      	movs	r3, #0
 80090ca:	e021      	b.n	8009110 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 ff99 	bl	800a008 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	2180      	movs	r1, #128	; 0x80
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 ff94 	bl	800a008 <dcd_edpt_stall>
  {
 80090e0:	e014      	b.n	800910c <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff fe6f 	bl	8008dc8 <_data_stage_xact>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f083 0301 	eor.w	r3, r3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <usbd_control_xfer_cb+0x156>
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <usbd_control_xfer_cb+0x164>)
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <usbd_control_xfer_cb+0x150>
 8009106:	be00      	bkpt	0x0000
 8009108:	2300      	movs	r3, #0
 800910a:	e001      	b.n	8009110 <usbd_control_xfer_cb+0x158>
  {
 800910c:	bf00      	nop
  }

  return true;
 800910e:	2301      	movs	r3, #1
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200052b4 	.word	0x200052b4
 800911c:	e000edf0 	.word	0xe000edf0
 8009120:	00000000 	.word	0x00000000
 8009124:	200052c8 	.word	0x200052c8

08009128 <__NVIC_EnableIRQ>:
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	db0b      	blt.n	8009152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	f003 021f 	and.w	r2, r3, #31
 8009140:	4907      	ldr	r1, [pc, #28]	; (8009160 <__NVIC_EnableIRQ+0x38>)
 8009142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	2001      	movs	r0, #1
 800914a:	fa00 f202 	lsl.w	r2, r0, r2
 800914e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	e000e100 	.word	0xe000e100

08009164 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
      #else

      #endif
    }
  }
}
 8009182:	e005      	b.n	8009190 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d152      	bne.n	8009254 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 80091ae:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <dwc2_phy_update+0xc4>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a2c      	ldr	r2, [pc, #176]	; (8009264 <dwc2_phy_update+0xc8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d302      	bcc.n	80091be <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 80091b8:	2306      	movs	r3, #6
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e041      	b.n	8009242 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 80091be:	4b28      	ldr	r3, [pc, #160]	; (8009260 <dwc2_phy_update+0xc4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a29      	ldr	r2, [pc, #164]	; (8009268 <dwc2_phy_update+0xcc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d902      	bls.n	80091ce <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 80091c8:	2307      	movs	r3, #7
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e039      	b.n	8009242 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 80091ce:	4b24      	ldr	r3, [pc, #144]	; (8009260 <dwc2_phy_update+0xc4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a26      	ldr	r2, [pc, #152]	; (800926c <dwc2_phy_update+0xd0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d302      	bcc.n	80091de <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 80091d8:	2308      	movs	r3, #8
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	e031      	b.n	8009242 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 80091de:	4b20      	ldr	r3, [pc, #128]	; (8009260 <dwc2_phy_update+0xc4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a23      	ldr	r2, [pc, #140]	; (8009270 <dwc2_phy_update+0xd4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d902      	bls.n	80091ee <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 80091e8:	2309      	movs	r3, #9
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	e029      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 80091ee:	4b1c      	ldr	r3, [pc, #112]	; (8009260 <dwc2_phy_update+0xc4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a20      	ldr	r2, [pc, #128]	; (8009274 <dwc2_phy_update+0xd8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d902      	bls.n	80091fe <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 80091f8:	230a      	movs	r3, #10
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e021      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 80091fe:	4b18      	ldr	r3, [pc, #96]	; (8009260 <dwc2_phy_update+0xc4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <dwc2_phy_update+0xdc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d902      	bls.n	800920e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8009208:	230b      	movs	r3, #11
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e019      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <dwc2_phy_update+0xc4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1a      	ldr	r2, [pc, #104]	; (800927c <dwc2_phy_update+0xe0>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d302      	bcc.n	800921e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8009218:	230c      	movs	r3, #12
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e011      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <dwc2_phy_update+0xc4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a17      	ldr	r2, [pc, #92]	; (8009280 <dwc2_phy_update+0xe4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d302      	bcc.n	800922e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8009228:	230d      	movs	r3, #13
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e009      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <dwc2_phy_update+0xc4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a14      	ldr	r2, [pc, #80]	; (8009284 <dwc2_phy_update+0xe8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d302      	bcc.n	800923e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8009238:	230e      	movs	r3, #14
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e001      	b.n	8009242 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800923e:	230f      	movs	r3, #15
 8009240:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	029b      	lsls	r3, r3, #10
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60da      	str	r2, [r3, #12]
  }
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000000 	.word	0x20000000
 8009264:	01e84800 	.word	0x01e84800
 8009268:	01a39ddf 	.word	0x01a39ddf
 800926c:	016e3600 	.word	0x016e3600
 8009270:	014ca43f 	.word	0x014ca43f
 8009274:	01312cff 	.word	0x01312cff
 8009278:	011a499f 	.word	0x011a499f
 800927c:	01067380 	.word	0x01067380
 8009280:	00f42400 	.word	0x00f42400
 8009284:	00e4e1c0 	.word	0x00e4e1c0

08009288 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	460a      	mov	r2, r1
 8009292:	80fb      	strh	r3, [r7, #6]
 8009294:	4613      	mov	r3, r2
 8009296:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	089b      	lsrs	r3, r3, #2
 800929c:	b29a      	uxth	r2, r3
 800929e:	797b      	ldrb	r3, [r7, #5]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4413      	add	r3, r2
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	330f      	adds	r3, #15
 80092ac:	b29b      	uxth	r3, r3
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	4a1b      	ldr	r2, [pc, #108]	; (8009338 <update_grxfsiz+0x7c>)
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	4413      	add	r3, r2
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	4a18      	ldr	r2, [pc, #96]	; (8009338 <update_grxfsiz+0x7c>)
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	4413      	add	r3, r2
 80092da:	3308      	adds	r3, #8
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80092e4:	2300      	movs	r3, #0
 80092e6:	757b      	strb	r3, [r7, #21]
 80092e8:	e013      	b.n	8009312 <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 80092ea:	7d7b      	ldrb	r3, [r7, #21]
 80092ec:	4a13      	ldr	r2, [pc, #76]	; (800933c <update_grxfsiz+0x80>)
 80092ee:	015b      	lsls	r3, r3, #5
 80092f0:	4413      	add	r3, r2
 80092f2:	330a      	adds	r3, #10
 80092f4:	881a      	ldrh	r2, [r3, #0]
 80092f6:	8afb      	ldrh	r3, [r7, #22]
 80092f8:	81bb      	strh	r3, [r7, #12]
 80092fa:	4613      	mov	r3, r2
 80092fc:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 80092fe:	89ba      	ldrh	r2, [r7, #12]
 8009300:	897b      	ldrh	r3, [r7, #10]
 8009302:	4293      	cmp	r3, r2
 8009304:	bf38      	it	cc
 8009306:	4613      	movcc	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800930c:	7d7b      	ldrb	r3, [r7, #21]
 800930e:	3301      	adds	r3, #1
 8009310:	757b      	strb	r3, [r7, #21]
 8009312:	7d7a      	ldrb	r2, [r7, #21]
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	429a      	cmp	r2, r3
 8009318:	d3e7      	bcc.n	80092ea <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 800931a:	7bfa      	ldrb	r2, [r7, #15]
 800931c:	8afb      	ldrh	r3, [r7, #22]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff ffb1 	bl	8009288 <calc_grxfsiz>
 8009326:	4603      	mov	r3, r0
 8009328:	461a      	mov	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800932e:	bf00      	nop
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	0800b020 	.word	0x0800b020
 800933c:	20005310 	.word	0x20005310

08009340 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	4a3c      	ldr	r2, [pc, #240]	; (8009440 <bus_reset+0x100>)
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	4413      	add	r3, r2
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	4a39      	ldr	r2, [pc, #228]	; (8009440 <bus_reset+0x100>)
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4413      	add	r3, r2
 800935e:	3308      	adds	r3, #8
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8009364:	22c0      	movs	r2, #192	; 0xc0
 8009366:	2100      	movs	r1, #0
 8009368:	4836      	ldr	r0, [pc, #216]	; (8009444 <bus_reset+0x104>)
 800936a:	f001 fd66 	bl	800ae3a <memset>
  _out_ep_closed = false;
 800936e:	4b36      	ldr	r3, [pc, #216]	; (8009448 <bus_reset+0x108>)
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8009374:	4b35      	ldr	r3, [pc, #212]	; (800944c <bus_reset+0x10c>)
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009380:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]
 800938e:	e010      	b.n	80093b2 <bus_reset+0x72>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	3358      	adds	r3, #88	; 0x58
 8009396:	015b      	lsls	r3, r3, #5
 8009398:	4413      	add	r3, r2
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80093a2:	6939      	ldr	r1, [r7, #16]
 80093a4:	3358      	adds	r3, #88	; 0x58
 80093a6:	015b      	lsls	r3, r3, #5
 80093a8:	440b      	add	r3, r1
 80093aa:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	3301      	adds	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]
 80093b2:	7dfa      	ldrb	r2, [r7, #23]
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d3ea      	bcc.n	8009390 <bus_reset+0x50>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80093c0:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2209      	movs	r2, #9
 80093c8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2209      	movs	r2, #9
 80093d0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	4619      	mov	r1, r3
 80093d8:	2040      	movs	r0, #64	; 0x40
 80093da:	f7ff ff55 	bl	8009288 <calc_grxfsiz>
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 80093e6:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <bus_reset+0x110>)
 80093e8:	2210      	movs	r2, #16
 80093ea:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 80093ec:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80093f0:	089b      	lsrs	r3, r3, #2
 80093f2:	4a17      	ldr	r2, [pc, #92]	; (8009450 <bus_reset+0x110>)
 80093f4:	8812      	ldrh	r2, [r2, #0]
 80093f6:	1a9b      	subs	r3, r3, r2
 80093f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8009406:	f023 0203 	bic.w	r2, r3, #3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <bus_reset+0x104>)
 8009412:	2240      	movs	r2, #64	; 0x40
 8009414:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <bus_reset+0x104>)
 8009418:	2240      	movs	r2, #64	; 0x40
 800941a:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8009422:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	619a      	str	r2, [r3, #24]
}
 8009438:	bf00      	nop
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	0800b020 	.word	0x0800b020
 8009444:	20005310 	.word	0x20005310
 8009448:	200053d6 	.word	0x200053d6
 800944c:	200053d7 	.word	0x200053d7
 8009450:	200053d4 	.word	0x200053d4

08009454 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8009454:	b490      	push	{r4, r7}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	4611      	mov	r1, r2
 8009460:	461a      	mov	r2, r3
 8009462:	4623      	mov	r3, r4
 8009464:	71fb      	strb	r3, [r7, #7]
 8009466:	4603      	mov	r3, r0
 8009468:	71bb      	strb	r3, [r7, #6]
 800946a:	460b      	mov	r3, r1
 800946c:	717b      	strb	r3, [r7, #5]
 800946e:	4613      	mov	r3, r2
 8009470:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	4a71      	ldr	r2, [pc, #452]	; (800963c <edpt_schedule_packets+0x1e8>)
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	4413      	add	r3, r2
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 800947e:	79bb      	ldrb	r3, [r7, #6]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d121      	bne.n	80094c8 <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8009484:	79ba      	ldrb	r2, [r7, #6]
 8009486:	797b      	ldrb	r3, [r7, #5]
 8009488:	0052      	lsls	r2, r2, #1
 800948a:	4413      	add	r3, r2
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	4a6c      	ldr	r2, [pc, #432]	; (8009640 <edpt_schedule_packets+0x1ec>)
 8009490:	4413      	add	r3, r2
 8009492:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8009494:	797b      	ldrb	r3, [r7, #5]
 8009496:	4a6b      	ldr	r2, [pc, #428]	; (8009644 <edpt_schedule_packets+0x1f0>)
 8009498:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	895b      	ldrh	r3, [r3, #10]
 80094a0:	81fa      	strh	r2, [r7, #14]
 80094a2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80094a4:	89fa      	ldrh	r2, [r7, #14]
 80094a6:	89bb      	ldrh	r3, [r7, #12]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bf28      	it	cs
 80094ac:	4613      	movcs	r3, r2
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 80094b2:	797b      	ldrb	r3, [r7, #5]
 80094b4:	4a63      	ldr	r2, [pc, #396]	; (8009644 <edpt_schedule_packets+0x1f0>)
 80094b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80094ba:	797b      	ldrb	r3, [r7, #5]
 80094bc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80094be:	1a8a      	subs	r2, r1, r2
 80094c0:	b291      	uxth	r1, r2
 80094c2:	4a60      	ldr	r2, [pc, #384]	; (8009644 <edpt_schedule_packets+0x1f0>)
 80094c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 80094c8:	797b      	ldrb	r3, [r7, #5]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d156      	bne.n	800957c <edpt_schedule_packets+0x128>
    dwc2_epin_t* epin = dwc2->epin;
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80094d6:	887b      	ldrh	r3, [r7, #2]
 80094d8:	04db      	lsls	r3, r3, #19
 80094da:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 80094dc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80094de:	79bb      	ldrb	r3, [r7, #6]
 80094e0:	015b      	lsls	r3, r3, #5
 80094e2:	6979      	ldr	r1, [r7, #20]
 80094e4:	440b      	add	r3, r1
 80094e6:	4302      	orrs	r2, r0
 80094e8:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80094ea:	79bb      	ldrb	r3, [r7, #6]
 80094ec:	015b      	lsls	r3, r3, #5
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4413      	add	r3, r2
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	79bb      	ldrb	r3, [r7, #6]
 80094f6:	015b      	lsls	r3, r3, #5
 80094f8:	6979      	ldr	r1, [r7, #20]
 80094fa:	440b      	add	r3, r1
 80094fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8009500:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8009502:	79bb      	ldrb	r3, [r7, #6]
 8009504:	015b      	lsls	r3, r3, #5
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009514:	d123      	bne.n	800955e <edpt_schedule_packets+0x10a>
 8009516:	79ba      	ldrb	r2, [r7, #6]
 8009518:	797b      	ldrb	r3, [r7, #5]
 800951a:	4949      	ldr	r1, [pc, #292]	; (8009640 <edpt_schedule_packets+0x1ec>)
 800951c:	0052      	lsls	r2, r2, #1
 800951e:	4413      	add	r3, r2
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	440b      	add	r3, r1
 8009524:	330c      	adds	r3, #12
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d118      	bne.n	800955e <edpt_schedule_packets+0x10a>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009536:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8009538:	79bb      	ldrb	r3, [r7, #6]
 800953a:	015b      	lsls	r3, r3, #5
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	4413      	add	r3, r2
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <edpt_schedule_packets+0xfa>
 8009548:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800954c:	e001      	b.n	8009552 <edpt_schedule_packets+0xfe>
 800954e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8009552:	79bb      	ldrb	r3, [r7, #6]
 8009554:	015b      	lsls	r3, r3, #5
 8009556:	6978      	ldr	r0, [r7, #20]
 8009558:	4403      	add	r3, r0
 800955a:	430a      	orrs	r2, r1
 800955c:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 800955e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d065      	beq.n	8009630 <edpt_schedule_packets+0x1dc>
      dwc2->diepempmsk |= (1 << epnum);
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800956a:	79ba      	ldrb	r2, [r7, #6]
 800956c:	2101      	movs	r1, #1
 800956e:	fa01 f202 	lsl.w	r2, r1, r2
 8009572:	431a      	orrs	r2, r3
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 800957a:	e059      	b.n	8009630 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8009584:	79bb      	ldrb	r3, [r7, #6]
 8009586:	015b      	lsls	r3, r3, #5
 8009588:	69fa      	ldr	r2, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	79bb      	ldrb	r3, [r7, #6]
 8009590:	015b      	lsls	r3, r3, #5
 8009592:	69f9      	ldr	r1, [r7, #28]
 8009594:	440b      	add	r3, r1
 8009596:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 800959a:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 800959c:	79bb      	ldrb	r3, [r7, #6]
 800959e:	015b      	lsls	r3, r3, #5
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	6919      	ldr	r1, [r3, #16]
 80095a6:	887b      	ldrh	r3, [r7, #2]
 80095a8:	04db      	lsls	r3, r3, #19
 80095aa:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 80095ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80095ae:	431a      	orrs	r2, r3
 80095b0:	79bb      	ldrb	r3, [r7, #6]
 80095b2:	015b      	lsls	r3, r3, #5
 80095b4:	69f8      	ldr	r0, [r7, #28]
 80095b6:	4403      	add	r3, r0
 80095b8:	430a      	orrs	r2, r1
 80095ba:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80095bc:	79bb      	ldrb	r3, [r7, #6]
 80095be:	015b      	lsls	r3, r3, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	79bb      	ldrb	r3, [r7, #6]
 80095c8:	015b      	lsls	r3, r3, #5
 80095ca:	69f9      	ldr	r1, [r7, #28]
 80095cc:	440b      	add	r3, r1
 80095ce:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80095d2:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80095d4:	79bb      	ldrb	r3, [r7, #6]
 80095d6:	015b      	lsls	r3, r3, #5
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80095e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e6:	d123      	bne.n	8009630 <edpt_schedule_packets+0x1dc>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 80095e8:	79ba      	ldrb	r2, [r7, #6]
 80095ea:	797b      	ldrb	r3, [r7, #5]
 80095ec:	4914      	ldr	r1, [pc, #80]	; (8009640 <edpt_schedule_packets+0x1ec>)
 80095ee:	0052      	lsls	r2, r2, #1
 80095f0:	4413      	add	r3, r2
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	440b      	add	r3, r1
 80095f6:	330c      	adds	r3, #12
 80095f8:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d118      	bne.n	8009630 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009608:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 800960a:	79bb      	ldrb	r3, [r7, #6]
 800960c:	015b      	lsls	r3, r3, #5
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	4413      	add	r3, r2
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <edpt_schedule_packets+0x1cc>
 800961a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800961e:	e001      	b.n	8009624 <edpt_schedule_packets+0x1d0>
 8009620:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8009624:	79bb      	ldrb	r3, [r7, #6]
 8009626:	015b      	lsls	r3, r3, #5
 8009628:	69f8      	ldr	r0, [r7, #28]
 800962a:	4403      	add	r3, r0
 800962c:	430a      	orrs	r2, r1
 800962e:	601a      	str	r2, [r3, #0]
}
 8009630:	bf00      	nop
 8009632:	3728      	adds	r7, #40	; 0x28
 8009634:	46bd      	mov	sp, r7
 8009636:	bc90      	pop	{r4, r7}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	0800b020 	.word	0x0800b020
 8009640:	20005310 	.word	0x20005310
 8009644:	200053d0 	.word	0x200053d0

08009648 <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f043 0201 	orr.w	r2, r3, #1
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800965c:	bf00      	nop
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1f9      	bne.n	800965e <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 800966a:	bf00      	nop
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dafb      	bge.n	800966c <reset_core+0x24>

  // wait for device mode ?
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 800968a:	2300      	movs	r3, #0
#endif
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fd58 	bl	8009164 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff ffc7 	bl	8009648 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80096c2:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 80096ca:	2100      	movs	r1, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fd65 	bl	800919c <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80096d8:	f043 0203 	orr.w	r2, r3, #3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096fe:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b80      	cmp	r3, #128	; 0x80
 800970e:	d110      	bne.n	8009732 <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f043 0310 	orr.w	r3, r3, #16
 8009716:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800971e:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009726:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	e00f      	b.n	8009752 <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f023 0318 	bic.w	r3, r3, #24
 8009738:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <phy_hs_init+0x68>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f043 0308 	orr.w	r3, r3, #8
 8009750:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800975e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fcfc 	bl	8009164 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff ff6b 	bl	8009648 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8009778:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009780:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <phy_hs_init+0xa6>
 800978a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800978e:	e001      	b.n	8009794 <phy_hs_init+0xaa>
 8009790:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80097a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fcf4 	bl	800919c <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097ba:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80097ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b80      	cmp	r3, #128	; 0x80
 80097d2:	d103      	bne.n	80097dc <phy_hs_init+0xf2>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097da:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	0c1b      	lsrs	r3, r3, #16
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4a0e      	ldr	r2, [pc, #56]	; (800983c <check_dwc2+0x50>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d012      	beq.n	800982c <check_dwc2+0x40>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <check_dwc2+0x54>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d00e      	beq.n	800982c <check_dwc2+0x40>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <check_dwc2+0x58>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00a      	beq.n	800982c <check_dwc2+0x40>
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <check_dwc2+0x5c>)
 8009818:	60bb      	str	r3, [r7, #8]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d000      	beq.n	8009828 <check_dwc2+0x3c>
 8009826:	be00      	bkpt	0x0000
 8009828:	2300      	movs	r3, #0
 800982a:	e000      	b.n	800982e <check_dwc2+0x42>
#endif

  return true;
 800982c:	2301      	movs	r3, #1
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	4f540000 	.word	0x4f540000
 8009840:	55310000 	.word	0x55310000
 8009844:	55320000 	.word	0x55320000
 8009848:	e000edf0 	.word	0xe000edf0

0800984c <dcd_init>:

void dcd_init(uint8_t rhport) {
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	4a3e      	ldr	r2, [pc, #248]	; (8009954 <dcd_init+0x108>)
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	4413      	add	r3, r2
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff ffc2 	bl	80097ec <check_dwc2>
 8009868:	4603      	mov	r3, r0
 800986a:	f083 0301 	eor.w	r3, r3, #1
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d16b      	bne.n	800994c <dcd_init+0x100>
  dcd_disconnect(rhport);
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f8d8 	bl	8009a2c <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff ff00 	bl	8009682 <phy_hs_supported>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff ff2e 	bl	80096ea <phy_hs_init>
 800988e:	e002      	b.n	8009896 <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff ff01 	bl	8009698 <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800989c:	f023 020f 	bic.w	r2, r3, #15
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f043 0207 	orr.w	r2, r3, #7
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80098ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80098ca:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80098d8:	f043 0204 	orr.w	r2, r3, #4
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80098e8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80098ea:	bf00      	nop
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1f9      	bne.n	80098ec <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2210      	movs	r2, #16
 80098fc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80098fe:	bf00      	nop
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1f9      	bne.n	8009900 <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	695a      	ldr	r2, [r3, #20]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	431a      	orrs	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	431a      	orrs	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4a09      	ldr	r2, [pc, #36]	; (8009958 <dcd_init+0x10c>)
 8009934:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f043 0201 	orr.w	r2, r3, #1
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f855 	bl	80099f4 <dcd_connect>
 800994a:	e000      	b.n	800994e <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 800994c:	bf00      	nop
}
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	0800b020 	.word	0x0800b020
 8009958:	80003816 	.word	0x80003816

0800995c <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	4a06      	ldr	r2, [pc, #24]	; (8009988 <dcd_int_enable+0x2c>)
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	3304      	adds	r3, #4
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	b25b      	sxtb	r3, r3
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fbd5 	bl	8009128 <__NVIC_EnableIRQ>
}
 800997e:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	0800b020 	.word	0x0800b020

0800998c <dcd_set_address>:

void dcd_int_disable(uint8_t rhport) {
  dwc2_dcd_int_disable(rhport);
}

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	460a      	mov	r2, r1
 8009996:	71fb      	strb	r3, [r7, #7]
 8009998:	4613      	mov	r3, r2
 800999a:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	4a14      	ldr	r2, [pc, #80]	; (80099f0 <dcd_set_address+0x64>)
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	4413      	add	r3, r2
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80099ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099b2:	79ba      	ldrb	r2, [r7, #6]
 80099b4:	0112      	lsls	r2, r2, #4
 80099b6:	431a      	orrs	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80099be:	2300      	movs	r3, #0
 80099c0:	72fb      	strb	r3, [r7, #11]
 80099c2:	2301      	movs	r3, #1
 80099c4:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80099c6:	7abb      	ldrb	r3, [r7, #10]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <dcd_set_address+0x46>
 80099cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80099d0:	e000      	b.n	80099d4 <dcd_set_address+0x48>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80099d8:	4313      	orrs	r3, r2
 80099da:	b25b      	sxtb	r3, r3
 80099dc:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80099de:	79f8      	ldrb	r0, [r7, #7]
 80099e0:	2300      	movs	r3, #0
 80099e2:	2200      	movs	r2, #0
 80099e4:	f000 f9bc 	bl	8009d60 <dcd_edpt_xfer>
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	0800b020 	.word	0x0800b020

080099f4 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <dcd_connect+0x34>)
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	4413      	add	r3, r2
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8009a10:	f023 0202 	bic.w	r2, r3, #2
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	0800b020 	.word	0x0800b020

08009a2c <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <dcd_disconnect+0x34>)
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	4413      	add	r3, r2
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8009a48:	f043 0202 	orr.w	r2, r3, #2
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	0800b020 	.word	0x0800b020

08009a64 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	; 0x38
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	4a91      	ldr	r2, [pc, #580]	; (8009cb8 <dcd_edpt_open+0x254>)
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	4413      	add	r3, r2
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	4a8e      	ldr	r2, [pc, #568]	; (8009cb8 <dcd_edpt_open+0x254>)
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	4413      	add	r3, r2
 8009a84:	3308      	adds	r3, #8
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	789b      	ldrb	r3, [r3, #2]
 8009a90:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009a92:	7dbb      	ldrb	r3, [r7, #22]
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	789b      	ldrb	r3, [r3, #2]
 8009aa2:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	09db      	lsrs	r3, r3, #7
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 8009aae:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d30a      	bcc.n	8009ad0 <dcd_edpt_open+0x6c>
 8009aba:	4b80      	ldr	r3, [pc, #512]	; (8009cbc <dcd_edpt_open+0x258>)
 8009abc:	61bb      	str	r3, [r7, #24]
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d000      	beq.n	8009acc <dcd_edpt_open+0x68>
 8009aca:	be00      	bkpt	0x0000
 8009acc:	2300      	movs	r3, #0
 8009ace:	e0ef      	b.n	8009cb0 <dcd_edpt_open+0x24c>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009ad0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009ad4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009ad8:	0052      	lsls	r2, r2, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	4a78      	ldr	r2, [pc, #480]	; (8009cc0 <dcd_edpt_open+0x25c>)
 8009ae0:	4413      	add	r3, r2
 8009ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	889b      	ldrh	r3, [r3, #4]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af2:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	799a      	ldrb	r2, [r3, #6]
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	895b      	ldrh	r3, [r3, #10]
 8009b04:	613b      	str	r3, [r7, #16]
 8009b06:	2304      	movs	r3, #4
 8009b08:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	1e5a      	subs	r2, r3, #1
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b18:	857b      	strh	r3, [r7, #42]	; 0x2a

  if (dir == TUSB_DIR_OUT) {
 8009b1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d15c      	bne.n	8009bdc <dcd_edpt_open+0x178>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 8009b22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fbaa 	bl	8009288 <calc_grxfsiz>
 8009b34:	4603      	mov	r3, r0
 8009b36:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 8009b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d217      	bcs.n	8009b72 <dcd_edpt_open+0x10e>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8009b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b44:	4a5f      	ldr	r2, [pc, #380]	; (8009cc4 <dcd_edpt_open+0x260>)
 8009b46:	8812      	ldrh	r2, [r2, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009b50:	089b      	lsrs	r3, r3, #2
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d90a      	bls.n	8009b6c <dcd_edpt_open+0x108>
 8009b56:	4b59      	ldr	r3, [pc, #356]	; (8009cbc <dcd_edpt_open+0x258>)
 8009b58:	61fb      	str	r3, [r7, #28]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d000      	beq.n	8009b68 <dcd_edpt_open+0x104>
 8009b66:	be00      	bkpt	0x0000
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e0a1      	b.n	8009cb0 <dcd_edpt_open+0x24c>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 8009b6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8009b72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b78:	3358      	adds	r3, #88	; 0x58
 8009b7a:	015b      	lsls	r3, r3, #5
 8009b7c:	4413      	add	r3, r2
 8009b7e:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	78db      	ldrb	r3, [r3, #3]
 8009b84:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	049b      	lsls	r3, r3, #18
 8009b8c:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	78db      	ldrb	r3, [r3, #3]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d002      	beq.n	8009ba2 <dcd_edpt_open+0x13e>
 8009b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ba0:	e000      	b.n	8009ba4 <dcd_edpt_open+0x140>
 8009ba2:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8009ba4:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8009ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ba8:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009baa:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8009bac:	431a      	orrs	r2, r3
 8009bae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bb8:	3358      	adds	r3, #88	; 0x58
 8009bba:	015b      	lsls	r3, r3, #5
 8009bbc:	440b      	add	r3, r1
 8009bbe:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009bc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009bca:	3310      	adds	r3, #16
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8009bda:	e068      	b.n	8009cae <dcd_edpt_open+0x24a>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8009bdc:	4b39      	ldr	r3, [pc, #228]	; (8009cc4 <dcd_edpt_open+0x260>)
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009be4:	4413      	add	r3, r2
 8009be6:	461a      	mov	r2, r3
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	441a      	add	r2, r3
 8009bee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009bf2:	089b      	lsrs	r3, r3, #2
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d90a      	bls.n	8009c0e <dcd_edpt_open+0x1aa>
 8009bf8:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <dcd_edpt_open+0x258>)
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d000      	beq.n	8009c0a <dcd_edpt_open+0x1a6>
 8009c08:	be00      	bkpt	0x0000
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e050      	b.n	8009cb0 <dcd_edpt_open+0x24c>

    _allocated_fifo_words_tx += fifo_size;
 8009c0e:	4b2d      	ldr	r3, [pc, #180]	; (8009cc4 <dcd_edpt_open+0x260>)
 8009c10:	881a      	ldrh	r2, [r3, #0]
 8009c12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c14:	4413      	add	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <dcd_edpt_open+0x260>)
 8009c1a:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8009c1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c1e:	041b      	lsls	r3, r3, #16
 8009c20:	4619      	mov	r1, r3
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8009c22:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009c26:	089b      	lsrs	r3, r3, #2
 8009c28:	4a26      	ldr	r2, [pc, #152]	; (8009cc4 <dcd_edpt_open+0x260>)
 8009c2a:	8812      	ldrh	r2, [r2, #0]
 8009c2c:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8009c2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c32:	3b01      	subs	r3, #1
 8009c34:	430a      	orrs	r2, r1
 8009c36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c38:	3340      	adds	r3, #64	; 0x40
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8009c40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c46:	3348      	adds	r3, #72	; 0x48
 8009c48:	015b      	lsls	r3, r3, #5
 8009c4a:	4413      	add	r3, r2
 8009c4c:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8009c4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c52:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8009c54:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	78db      	ldrb	r3, [r3, #3]
 8009c5c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8009c64:	4313      	orrs	r3, r2
 8009c66:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	78db      	ldrb	r3, [r3, #3]
 8009c6c:	f003 0303 	and.w	r3, r3, #3
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d002      	beq.n	8009c7c <dcd_edpt_open+0x218>
 8009c76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c7a:	e000      	b.n	8009c7e <dcd_edpt_open+0x21a>
 8009c7c:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8009c7e:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 8009c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c82:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8009c84:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8009c86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c8e:	3348      	adds	r3, #72	; 0x48
 8009c90:	015b      	lsls	r3, r3, #5
 8009c92:	440b      	add	r3, r1
 8009c94:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8009c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c98:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8009c9c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009caa:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 8009cae:	2301      	movs	r3, #1
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3738      	adds	r7, #56	; 0x38
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	0800b020 	.word	0x0800b020
 8009cbc:	e000edf0 	.word	0xe000edf0
 8009cc0:	20005310 	.word	0x20005310
 8009cc4:	200053d4 	.word	0x200053d4

08009cc8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <dcd_edpt_close_all+0x8c>)
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	4413      	add	r3, r2
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	; (8009d54 <dcd_edpt_close_all+0x8c>)
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009cf2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
 8009cfa:	e01e      	b.n	8009d3a <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	3358      	adds	r3, #88	; 0x58
 8009d02:	015b      	lsls	r3, r3, #5
 8009d04:	4413      	add	r3, r2
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	4a12      	ldr	r2, [pc, #72]	; (8009d58 <dcd_edpt_close_all+0x90>)
 8009d0e:	015b      	lsls	r3, r3, #5
 8009d10:	4413      	add	r3, r2
 8009d12:	330a      	adds	r3, #10
 8009d14:	2200      	movs	r2, #0
 8009d16:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	3348      	adds	r3, #72	; 0x48
 8009d1e:	015b      	lsls	r3, r3, #5
 8009d20:	4413      	add	r3, r2
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	4a0b      	ldr	r2, [pc, #44]	; (8009d58 <dcd_edpt_close_all+0x90>)
 8009d2a:	015b      	lsls	r3, r3, #5
 8009d2c:	4413      	add	r3, r2
 8009d2e:	331a      	adds	r3, #26
 8009d30:	2200      	movs	r2, #0
 8009d32:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	3301      	adds	r3, #1
 8009d38:	75fb      	strb	r3, [r7, #23]
 8009d3a:	7dfa      	ldrb	r2, [r7, #23]
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d3dc      	bcc.n	8009cfc <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <dcd_edpt_close_all+0x94>)
 8009d44:	2210      	movs	r2, #16
 8009d46:	801a      	strh	r2, [r3, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	0800b020 	.word	0x0800b020
 8009d58:	20005310 	.word	0x20005310
 8009d5c:	200053d4 	.word	0x200053d4

08009d60 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009d60:	b590      	push	{r4, r7, lr}
 8009d62:	b089      	sub	sp, #36	; 0x24
 8009d64:	af02      	add	r7, sp, #8
 8009d66:	603a      	str	r2, [r7, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	71fb      	strb	r3, [r7, #7]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	71bb      	strb	r3, [r7, #6]
 8009d72:	4613      	mov	r3, r2
 8009d74:	80bb      	strh	r3, [r7, #4]
 8009d76:	79bb      	ldrb	r3, [r7, #6]
 8009d78:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009d7a:	7b3b      	ldrb	r3, [r7, #12]
 8009d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d80:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009d82:	757b      	strb	r3, [r7, #21]
 8009d84:	79bb      	ldrb	r3, [r7, #6]
 8009d86:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009d88:	7b7b      	ldrb	r3, [r7, #13]
 8009d8a:	09db      	lsrs	r3, r3, #7
 8009d8c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009d8e:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009d90:	7d7a      	ldrb	r2, [r7, #21]
 8009d92:	7d3b      	ldrb	r3, [r7, #20]
 8009d94:	0052      	lsls	r2, r2, #1
 8009d96:	4413      	add	r3, r2
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	4a23      	ldr	r2, [pc, #140]	; (8009e28 <dcd_edpt_xfer+0xc8>)
 8009d9c:	4413      	add	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2200      	movs	r2, #0
 8009daa:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	88ba      	ldrh	r2, [r7, #4]
 8009db0:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8009db2:	7d7b      	ldrb	r3, [r7, #21]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d110      	bne.n	8009dda <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 8009db8:	7d3b      	ldrb	r3, [r7, #20]
 8009dba:	491c      	ldr	r1, [pc, #112]	; (8009e2c <dcd_edpt_xfer+0xcc>)
 8009dbc:	88ba      	ldrh	r2, [r7, #4]
 8009dbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8009dc2:	7d3b      	ldrb	r3, [r7, #20]
 8009dc4:	4a19      	ldr	r2, [pc, #100]	; (8009e2c <dcd_edpt_xfer+0xcc>)
 8009dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dca:	7d3a      	ldrb	r2, [r7, #20]
 8009dcc:	7d79      	ldrb	r1, [r7, #21]
 8009dce:	79f8      	ldrb	r0, [r7, #7]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f7ff fb3e 	bl	8009454 <edpt_schedule_packets>
 8009dd8:	e020      	b.n	8009e1c <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	895b      	ldrh	r3, [r3, #10]
 8009dde:	88ba      	ldrh	r2, [r7, #4]
 8009de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de4:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	895a      	ldrh	r2, [r3, #10]
 8009dea:	88bb      	ldrh	r3, [r7, #4]
 8009dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8009df0:	fb01 f202 	mul.w	r2, r1, r2
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 8009df8:	89fb      	ldrh	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <dcd_edpt_xfer+0xa4>
 8009dfe:	88bb      	ldrh	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <dcd_edpt_xfer+0xaa>
 8009e04:	8afb      	ldrh	r3, [r7, #22]
 8009e06:	3301      	adds	r3, #1
 8009e08:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8009e0a:	8afc      	ldrh	r4, [r7, #22]
 8009e0c:	7d3a      	ldrb	r2, [r7, #20]
 8009e0e:	7d79      	ldrb	r1, [r7, #21]
 8009e10:	79f8      	ldrb	r0, [r7, #7]
 8009e12:	88bb      	ldrh	r3, [r7, #4]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4623      	mov	r3, r4
 8009e18:	f7ff fb1c 	bl	8009454 <edpt_schedule_packets>
  }

  return true;
 8009e1c:	2301      	movs	r3, #1
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd90      	pop	{r4, r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20005310 	.word	0x20005310
 8009e2c:	200053d0 	.word	0x200053d0

08009e30 <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8009e30:	b480      	push	{r7}
 8009e32:	b089      	sub	sp, #36	; 0x24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	71fb      	strb	r3, [r7, #7]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	71bb      	strb	r3, [r7, #6]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	4a6e      	ldr	r2, [pc, #440]	; (800a000 <dcd_edpt_disable+0x1d0>)
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	4413      	add	r3, r2
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	79bb      	ldrb	r3, [r7, #6]
 8009e50:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e58:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009e5a:	76fb      	strb	r3, [r7, #27]
 8009e5c:	79bb      	ldrb	r3, [r7, #6]
 8009e5e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	09db      	lsrs	r3, r3, #7
 8009e64:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009e66:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 8009e68:	7ebb      	ldrb	r3, [r7, #26]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d167      	bne.n	8009f3e <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 8009e76:	7efb      	ldrb	r3, [r7, #27]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d006      	beq.n	8009e8a <dcd_edpt_disable+0x5a>
 8009e7c:	7efb      	ldrb	r3, [r7, #27]
 8009e7e:	015b      	lsls	r3, r3, #5
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	db13      	blt.n	8009eb2 <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8009e8a:	7efb      	ldrb	r3, [r7, #27]
 8009e8c:	015b      	lsls	r3, r3, #5
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4413      	add	r3, r2
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	797b      	ldrb	r3, [r7, #5]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <dcd_edpt_disable+0x70>
 8009e9a:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8009e9e:	e001      	b.n	8009ea4 <dcd_edpt_disable+0x74>
 8009ea0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009ea4:	7efb      	ldrb	r3, [r7, #27]
 8009ea6:	015b      	lsls	r3, r3, #5
 8009ea8:	6938      	ldr	r0, [r7, #16]
 8009eaa:	4403      	add	r3, r0
 8009eac:	430a      	orrs	r2, r1
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e037      	b.n	8009f22 <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8009eb2:	7efb      	ldrb	r3, [r7, #27]
 8009eb4:	015b      	lsls	r3, r3, #5
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	7efb      	ldrb	r3, [r7, #27]
 8009ebe:	015b      	lsls	r3, r3, #5
 8009ec0:	6939      	ldr	r1, [r7, #16]
 8009ec2:	440b      	add	r3, r1
 8009ec4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009ec8:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 8009eca:	bf00      	nop
 8009ecc:	7efb      	ldrb	r3, [r7, #27]
 8009ece:	015b      	lsls	r3, r3, #5
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f6      	beq.n	8009ecc <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8009ede:	7efb      	ldrb	r3, [r7, #27]
 8009ee0:	015b      	lsls	r3, r3, #5
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	797b      	ldrb	r3, [r7, #5]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <dcd_edpt_disable+0xc2>
 8009eee:	4945      	ldr	r1, [pc, #276]	; (800a004 <dcd_edpt_disable+0x1d4>)
 8009ef0:	e001      	b.n	8009ef6 <dcd_edpt_disable+0xc6>
 8009ef2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009ef6:	7efb      	ldrb	r3, [r7, #27]
 8009ef8:	015b      	lsls	r3, r3, #5
 8009efa:	6938      	ldr	r0, [r7, #16]
 8009efc:	4403      	add	r3, r0
 8009efe:	430a      	orrs	r2, r1
 8009f00:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8009f02:	bf00      	nop
 8009f04:	7efb      	ldrb	r3, [r7, #27]
 8009f06:	015b      	lsls	r3, r3, #5
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f6      	beq.n	8009f04 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8009f16:	7efb      	ldrb	r3, [r7, #27]
 8009f18:	015b      	lsls	r3, r3, #5
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	2202      	movs	r2, #2
 8009f20:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8009f22:	7efb      	ldrb	r3, [r7, #27]
 8009f24:	019b      	lsls	r3, r3, #6
 8009f26:	f043 0220 	orr.w	r2, r3, #32
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 8009f2e:	bf00      	nop
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f9      	bne.n	8009f30 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8009f3c:	e059      	b.n	8009ff2 <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 8009f46:	7efb      	ldrb	r3, [r7, #27]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <dcd_edpt_disable+0x12a>
 8009f4c:	7efb      	ldrb	r3, [r7, #27]
 8009f4e:	015b      	lsls	r3, r3, #5
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	4413      	add	r3, r2
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	db12      	blt.n	8009f80 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8009f5a:	7efb      	ldrb	r3, [r7, #27]
 8009f5c:	015b      	lsls	r3, r3, #5
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4413      	add	r3, r2
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	797b      	ldrb	r3, [r7, #5]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <dcd_edpt_disable+0x140>
 8009f6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f6e:	e000      	b.n	8009f72 <dcd_edpt_disable+0x142>
 8009f70:	2100      	movs	r1, #0
 8009f72:	7efb      	ldrb	r3, [r7, #27]
 8009f74:	015b      	lsls	r3, r3, #5
 8009f76:	6978      	ldr	r0, [r7, #20]
 8009f78:	4403      	add	r3, r0
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	601a      	str	r2, [r3, #0]
}
 8009f7e:	e038      	b.n	8009ff2 <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8009f86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8009f90:	bf00      	nop
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f9      	beq.n	8009f92 <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8009f9e:	7efb      	ldrb	r3, [r7, #27]
 8009fa0:	015b      	lsls	r3, r3, #5
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	797b      	ldrb	r3, [r7, #5]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <dcd_edpt_disable+0x182>
 8009fae:	4915      	ldr	r1, [pc, #84]	; (800a004 <dcd_edpt_disable+0x1d4>)
 8009fb0:	e001      	b.n	8009fb6 <dcd_edpt_disable+0x186>
 8009fb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009fb6:	7efb      	ldrb	r3, [r7, #27]
 8009fb8:	015b      	lsls	r3, r3, #5
 8009fba:	6978      	ldr	r0, [r7, #20]
 8009fbc:	4403      	add	r3, r0
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009fc2:	bf00      	nop
 8009fc4:	7efb      	ldrb	r3, [r7, #27]
 8009fc6:	015b      	lsls	r3, r3, #5
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0f6      	beq.n	8009fc4 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8009fd6:	7efb      	ldrb	r3, [r7, #27]
 8009fd8:	015b      	lsls	r3, r3, #5
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4413      	add	r3, r2
 8009fde:	2202      	movs	r2, #2
 8009fe0:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8009fe8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8009ff2:	bf00      	nop
 8009ff4:	3724      	adds	r7, #36	; 0x24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	0800b020 	.word	0x0800b020
 800a004:	40200000 	.word	0x40200000

0800a008 <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	460a      	mov	r2, r1
 800a012:	71fb      	strb	r3, [r7, #7]
 800a014:	4613      	mov	r3, r2
 800a016:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 800a018:	79b9      	ldrb	r1, [r7, #6]
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	2201      	movs	r2, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff ff06 	bl	8009e30 <dcd_edpt_disable>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	460a      	mov	r2, r1
 800a036:	71fb      	strb	r3, [r7, #7]
 800a038:	4613      	mov	r3, r2
 800a03a:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4a2a      	ldr	r2, [pc, #168]	; (800a0e8 <dcd_edpt_clear_stall+0xbc>)
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	4413      	add	r3, r2
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	79bb      	ldrb	r3, [r7, #6]
 800a04a:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a04c:	7a3b      	ldrb	r3, [r7, #8]
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a054:	72fb      	strb	r3, [r7, #11]
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a05a:	7a7b      	ldrb	r3, [r7, #9]
 800a05c:	09db      	lsrs	r3, r3, #7
 800a05e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a060:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 800a062:	7abb      	ldrb	r3, [r7, #10]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d11c      	bne.n	800a0a2 <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	3348      	adds	r3, #72	; 0x48
 800a06e:	015b      	lsls	r3, r3, #5
 800a070:	4413      	add	r3, r2
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	3348      	adds	r3, #72	; 0x48
 800a07e:	015b      	lsls	r3, r3, #5
 800a080:	440b      	add	r3, r1
 800a082:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	3348      	adds	r3, #72	; 0x48
 800a08a:	015b      	lsls	r3, r3, #5
 800a08c:	4413      	add	r3, r2
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	3348      	adds	r3, #72	; 0x48
 800a09a:	015b      	lsls	r3, r3, #5
 800a09c:	440b      	add	r3, r1
 800a09e:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 800a0a0:	e01b      	b.n	800a0da <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	3358      	adds	r3, #88	; 0x58
 800a0a8:	015b      	lsls	r3, r3, #5
 800a0aa:	4413      	add	r3, r2
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a0b4:	68f9      	ldr	r1, [r7, #12]
 800a0b6:	3358      	adds	r3, #88	; 0x58
 800a0b8:	015b      	lsls	r3, r3, #5
 800a0ba:	440b      	add	r3, r1
 800a0bc:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	3358      	adds	r3, #88	; 0x58
 800a0c4:	015b      	lsls	r3, r3, #5
 800a0c6:	4413      	add	r3, r2
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
 800a0cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	3358      	adds	r3, #88	; 0x58
 800a0d4:	015b      	lsls	r3, r3, #5
 800a0d6:	440b      	add	r3, r1
 800a0d8:	601a      	str	r2, [r3, #0]
}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	0800b020 	.word	0x0800b020

0800a0ec <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 800a0ec:	b480      	push	{r7}
 800a0ee:	b08d      	sub	sp, #52	; 0x34
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	4a27      	ldr	r2, [pc, #156]	; (800a19c <read_fifo_packet+0xb0>)
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	4413      	add	r3, r2
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 800a110:	88bb      	ldrh	r3, [r7, #4]
 800a112:	089b      	lsrs	r3, r3, #2
 800a114:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while (full_words--) {
 800a116:	e00b      	b.n	800a130 <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	61ba      	str	r2, [r7, #24]
 800a120:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	601a      	str	r2, [r3, #0]
}
 800a128:	bf00      	nop
    dst += 4;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 800a130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a132:	1e5a      	subs	r2, r3, #1
 800a134:	85fa      	strh	r2, [r7, #46]	; 0x2e
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1ee      	bne.n	800a118 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 800a13a:	88bb      	ldrh	r3, [r7, #4]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (bytes_rem != 0) {
 800a146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d020      	beq.n	800a190 <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 800a160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a164:	2b01      	cmp	r3, #1
 800a166:	d907      	bls.n	800a178 <read_fifo_packet+0x8c>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	3301      	adds	r3, #1
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	0a12      	lsrs	r2, r2, #8
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 800a178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d907      	bls.n	800a190 <read_fifo_packet+0xa4>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	3302      	adds	r3, #2
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	0c12      	lsrs	r2, r2, #16
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]
  }
}
 800a190:	bf00      	nop
 800a192:	3734      	adds	r7, #52	; 0x34
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	0800b020 	.word	0x0800b020

0800a1a0 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 800a1a0:	b480      	push	{r7}
 800a1a2:	b089      	sub	sp, #36	; 0x24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	603a      	str	r2, [r7, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	71bb      	strb	r3, [r7, #6]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	4a23      	ldr	r2, [pc, #140]	; (800a248 <write_fifo_packet+0xa8>)
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	4413      	add	r3, r2
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800a1c2:	79bb      	ldrb	r3, [r7, #6]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	031b      	lsls	r3, r3, #12
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800a1ce:	88bb      	ldrh	r3, [r7, #4]
 800a1d0:	089b      	lsrs	r3, r3, #2
 800a1d2:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 800a1d4:	e008      	b.n	800a1e8 <write_fifo_packet+0x48>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	601a      	str	r2, [r3, #0]
    src += 4;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 800a1e8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	83fa      	strh	r2, [r7, #30]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f1      	bne.n	800a1d6 <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 800a1f2:	88bb      	ldrh	r3, [r7, #4]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01b      	beq.n	800a23a <write_fifo_packet+0x9a>
    uint32_t tmp_word = src[0];
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d907      	bls.n	800a21e <write_fifo_packet+0x7e>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	461a      	mov	r2, r3
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d907      	bls.n	800a234 <write_fifo_packet+0x94>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	3302      	adds	r3, #2
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	461a      	mov	r2, r3
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	4313      	orrs	r3, r2
 800a232:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	601a      	str	r2, [r3, #0]
  }
}
 800a23a:	bf00      	nop
 800a23c:	3724      	adds	r7, #36	; 0x24
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	0800b020 	.word	0x0800b020

0800a24c <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08c      	sub	sp, #48	; 0x30
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	4a5d      	ldr	r2, [pc, #372]	; (800a3d0 <handle_rxflvl_irq+0x184>)
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	4413      	add	r3, r2
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a268:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	0c5b      	lsrs	r3, r3, #17
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 030f 	and.w	r3, r3, #15
 800a27a:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	f003 030f 	and.w	r3, r3, #15
 800a284:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	091b      	lsrs	r3, r3, #4
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a290:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 800a292:	7fbb      	ldrb	r3, [r7, #30]
 800a294:	3358      	adds	r3, #88	; 0x58
 800a296:	015b      	lsls	r3, r3, #5
 800a298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a29a:	4413      	add	r3, r2
 800a29c:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 800a29e:	7ffb      	ldrb	r3, [r7, #31]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	2b05      	cmp	r3, #5
 800a2a4:	d87e      	bhi.n	800a3a4 <handle_rxflvl_irq+0x158>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <handle_rxflvl_irq+0x60>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a3b9 	.word	0x0800a3b9
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a35f 	.word	0x0800a35f
 800a2b8:	0800a2d7 	.word	0x0800a2d7
 800a2bc:	0800a3a5 	.word	0x0800a3a5
 800a2c0:	0800a2c5 	.word	0x0800a2c5
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a42      	ldr	r2, [pc, #264]	; (800a3d4 <handle_rxflvl_irq+0x188>)
 800a2ca:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a40      	ldr	r2, [pc, #256]	; (800a3d4 <handle_rxflvl_irq+0x188>)
 800a2d2:	6053      	str	r3, [r2, #4]
      break;
 800a2d4:	e077      	b.n	800a3c6 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	611a      	str	r2, [r3, #16]
      break;
 800a2e2:	e070      	b.n	800a3c6 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a2e4:	7fbb      	ldrb	r3, [r7, #30]
 800a2e6:	015b      	lsls	r3, r3, #5
 800a2e8:	4a3b      	ldr	r2, [pc, #236]	; (800a3d8 <handle_rxflvl_irq+0x18c>)
 800a2ea:	4413      	add	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	8bba      	ldrh	r2, [r7, #28]
 800a2fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fd f90c 	bl	800751c <tu_fifo_write_n_const_addr_full_words>
 800a304:	e00c      	b.n	800a320 <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	8bba      	ldrh	r2, [r7, #28]
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff feec 	bl	800a0ec <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	8bbb      	ldrh	r3, [r7, #28]
 800a31a:	441a      	add	r2, r3
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	895b      	ldrh	r3, [r3, #10]
 800a324:	8bba      	ldrh	r2, [r7, #28]
 800a326:	429a      	cmp	r2, r3
 800a328:	d248      	bcs.n	800a3bc <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	891a      	ldrh	r2, [r3, #8]
 800a336:	b28b      	uxth	r3, r1
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 800a340:	7fbb      	ldrb	r3, [r7, #30]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d13a      	bne.n	800a3bc <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	891a      	ldrh	r2, [r3, #8]
 800a34a:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <handle_rxflvl_irq+0x190>)
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	b29a      	uxth	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 800a356:	4b21      	ldr	r3, [pc, #132]	; (800a3dc <handle_rxflvl_irq+0x190>)
 800a358:	2200      	movs	r2, #0
 800a35a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 800a35c:	e02e      	b.n	800a3bc <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 800a35e:	7fbb      	ldrb	r3, [r7, #30]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d12d      	bne.n	800a3c0 <handle_rxflvl_irq+0x174>
 800a364:	8bbb      	ldrh	r3, [r7, #28]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d12a      	bne.n	800a3c0 <handle_rxflvl_irq+0x174>
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	4a1c      	ldr	r2, [pc, #112]	; (800a3e0 <handle_rxflvl_irq+0x194>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d925      	bls.n	800a3c0 <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	f248 0320 	movw	r3, #32800	; 0x8020
 800a380:	4013      	ands	r3, r2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01c      	beq.n	800a3c0 <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 800a386:	2301      	movs	r3, #1
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f003 0320 	and.w	r3, r3, #32
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <handle_rxflvl_irq+0x150>
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	f043 0320 	orr.w	r3, r3, #32
 800a39a:	62fb      	str	r3, [r7, #44]	; 0x2c

          epout->doepint = clear_flags;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3a0:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 800a3a2:	e00d      	b.n	800a3c0 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 800a3a4:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <handle_rxflvl_irq+0x198>)
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d007      	beq.n	800a3c4 <handle_rxflvl_irq+0x178>
 800a3b4:	be00      	bkpt	0x0000
      break;
 800a3b6:	e005      	b.n	800a3c4 <handle_rxflvl_irq+0x178>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e004      	b.n	800a3c6 <handle_rxflvl_irq+0x17a>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <handle_rxflvl_irq+0x17a>
      break;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <handle_rxflvl_irq+0x17a>
      break;
 800a3c4:	bf00      	nop
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	3730      	adds	r7, #48	; 0x30
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800b020 	.word	0x0800b020
 800a3d4:	20005308 	.word	0x20005308
 800a3d8:	20005310 	.word	0x20005310
 800a3dc:	200053d0 	.word	0x200053d0
 800a3e0:	4f543009 	.word	0x4f543009
 800a3e4:	e000edf0 	.word	0xe000edf0

0800a3e8 <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b096      	sub	sp, #88	; 0x58
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	4a60      	ldr	r2, [pc, #384]	; (800a578 <handle_epout_irq+0x190>)
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	4a5d      	ldr	r2, [pc, #372]	; (800a578 <handle_epout_irq+0x190>)
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	4413      	add	r3, r2
 800a406:	3308      	adds	r3, #8
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 800a40e:	2300      	movs	r3, #0
 800a410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a414:	e0a4      	b.n	800a560 <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 800a416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a418:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a41c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a420:	3310      	adds	r3, #16
 800a422:	fa22 f303 	lsr.w	r3, r2, r3
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8093 	beq.w	800a556 <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 800a430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a434:	3358      	adds	r3, #88	; 0x58
 800a436:	015b      	lsls	r3, r3, #5
 800a438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a43a:	4413      	add	r3, r2
 800a43c:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d034      	beq.n	800a4b8 <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 800a44e:	2308      	movs	r3, #8
 800a450:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d008      	beq.n	800a46e <handle_epout_irq+0x86>
 800a45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a460:	4a46      	ldr	r2, [pc, #280]	; (800a57c <handle_epout_irq+0x194>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d903      	bls.n	800a46e <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 800a466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a46c:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 800a46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	4b41      	ldr	r3, [pc, #260]	; (800a580 <handle_epout_irq+0x198>)
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_handler(&event, in_isr);
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800a484:	f107 0314 	add.w	r3, r7, #20
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	605a      	str	r2, [r3, #4]
 800a48e:	609a      	str	r2, [r3, #8]
 800a490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a494:	753b      	strb	r3, [r7, #20]
 800a496:	2306      	movs	r3, #6
 800a498:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800a49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a49c:	f107 0318 	add.w	r3, r7, #24
 800a4a0:	6810      	ldr	r0, [r2, #0]
 800a4a2:	6851      	ldr	r1, [r2, #4]
 800a4a4:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 800a4a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a4aa:	f107 0314 	add.w	r3, r7, #20
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe f905 	bl	80086c0 <dcd_event_handler>
}
 800a4b6:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 800a4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d048      	beq.n	800a556 <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 800a4ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a4ce:	015b      	lsls	r3, r3, #5
 800a4d0:	4a2c      	ldr	r2, [pc, #176]	; (800a584 <handle_epout_irq+0x19c>)
 800a4d2:	4413      	add	r3, r2
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 800a4d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10e      	bne.n	800a4fc <handle_epout_irq+0x114>
 800a4de:	4b2a      	ldr	r3, [pc, #168]	; (800a588 <handle_epout_irq+0x1a0>)
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800a4e6:	4b28      	ldr	r3, [pc, #160]	; (800a588 <handle_epout_irq+0x1a0>)
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 800a4ee:	79f8      	ldrb	r0, [r7, #7]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f7fe ffad 	bl	8009454 <edpt_schedule_packets>
 800a4fa:	e02c      	b.n	800a556 <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	891b      	ldrh	r3, [r3, #8]
 800a500:	461a      	mov	r2, r3
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a508:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a50c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a510:	627a      	str	r2, [r7, #36]	; 0x24
 800a512:	2300      	movs	r3, #0
 800a514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800a51e:	f107 0308 	add.w	r3, r7, #8
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	605a      	str	r2, [r3, #4]
 800a528:	609a      	str	r2, [r3, #8]
 800a52a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a52e:	723b      	strb	r3, [r7, #8]
 800a530:	2307      	movs	r3, #7
 800a532:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 800a534:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a538:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800a53e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a542:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 800a544:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a548:	f107 0308 	add.w	r3, r7, #8
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe f8b6 	bl	80086c0 <dcd_event_handler>
}
 800a554:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 800a556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a55a:	3301      	adds	r3, #1
 800a55c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a560:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a568:	429a      	cmp	r2, r3
 800a56a:	f4ff af54 	bcc.w	800a416 <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	3750      	adds	r7, #80	; 0x50
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	0800b020 	.word	0x0800b020
 800a57c:	4f543009 	.word	0x4f543009
 800a580:	20005308 	.word	0x20005308
 800a584:	20005310 	.word	0x20005310
 800a588:	200053d0 	.word	0x200053d0

0800a58c <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b094      	sub	sp, #80	; 0x50
 800a590:	af02      	add	r7, sp, #8
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	4a88      	ldr	r2, [pc, #544]	; (800a7bc <handle_epin_irq+0x230>)
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	4413      	add	r3, r2
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	4a85      	ldr	r2, [pc, #532]	; (800a7bc <handle_epin_irq+0x230>)
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a5c0:	e0f0      	b.n	800a7a4 <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 800a5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a5c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 80e0 	beq.w	800a79a <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 800a5da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5de:	015b      	lsls	r3, r3, #5
 800a5e0:	3310      	adds	r3, #16
 800a5e2:	4a77      	ldr	r2, [pc, #476]	; (800a7c0 <handle_epin_irq+0x234>)
 800a5e4:	4413      	add	r3, r2
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 800a5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5ec:	015b      	lsls	r3, r3, #5
 800a5ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f0:	4413      	add	r3, r2
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d046      	beq.n	800a68a <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 800a5fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a600:	015b      	lsls	r3, r3, #5
 800a602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a604:	4413      	add	r3, r2
 800a606:	2201      	movs	r2, #1
 800a608:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 800a60a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10e      	bne.n	800a630 <handle_epin_irq+0xa4>
 800a612:	4b6c      	ldr	r3, [pc, #432]	; (800a7c4 <handle_epin_irq+0x238>)
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 800a61a:	4b6a      	ldr	r3, [pc, #424]	; (800a7c4 <handle_epin_irq+0x238>)
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800a622:	79f8      	ldrb	r0, [r7, #7]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	2301      	movs	r3, #1
 800a628:	2201      	movs	r2, #1
 800a62a:	f7fe ff13 	bl	8009454 <edpt_schedule_packets>
 800a62e:	e02c      	b.n	800a68a <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a630:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a638:	b2d9      	uxtb	r1, r3
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	891b      	ldrh	r3, [r3, #8]
 800a63e:	461a      	mov	r2, r3
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a646:	460b      	mov	r3, r1
 800a648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a64c:	623a      	str	r2, [r7, #32]
 800a64e:	2300      	movs	r3, #0
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	2301      	movs	r3, #1
 800a654:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	605a      	str	r2, [r3, #4]
 800a660:	609a      	str	r2, [r3, #8]
 800a662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a666:	733b      	strb	r3, [r7, #12]
 800a668:	2307      	movs	r3, #7
 800a66a:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800a66c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a670:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 800a676:	7ffb      	ldrb	r3, [r7, #31]
 800a678:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 800a67a:	7fba      	ldrb	r2, [r7, #30]
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4611      	mov	r1, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f81c 	bl	80086c0 <dcd_event_handler>
}
 800a688:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 800a68a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a68e:	015b      	lsls	r3, r3, #5
 800a690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a692:	4413      	add	r3, r2
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d07d      	beq.n	800a79a <handle_epin_irq+0x20e>
 800a69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800a6a4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	fa01 f202 	lsl.w	r2, r1, r2
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d072      	beq.n	800a79a <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 800a6b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a6b8:	015b      	lsls	r3, r3, #5
 800a6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6bc:	4413      	add	r3, r2
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	0cdb      	lsrs	r3, r3, #19
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6c8:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a6d0:	e045      	b.n	800a75e <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 800a6d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a6d6:	015b      	lsls	r3, r3, #5
 800a6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6da:	4413      	add	r3, r2
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e2:	895a      	ldrh	r2, [r3, #10]
 800a6e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a6e6:	83bb      	strh	r3, [r7, #28]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a6ec:	8bba      	ldrh	r2, [r7, #28]
 800a6ee:	8b7b      	ldrh	r3, [r7, #26]
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	bf28      	it	cs
 800a6f4:	4613      	movcs	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800a6fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a700:	015b      	lsls	r3, r3, #5
 800a702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a704:	440b      	add	r3, r1
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	0099      	lsls	r1, r3, #2
 800a70a:	4b2f      	ldr	r3, [pc, #188]	; (800a7c8 <handle_epin_irq+0x23c>)
 800a70c:	400b      	ands	r3, r1
 800a70e:	429a      	cmp	r2, r3
 800a710:	d82b      	bhi.n	800a76a <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 800a712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00e      	beq.n	800a738 <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 800a71a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a71e:	3301      	adds	r3, #1
 800a720:	031b      	lsls	r3, r3, #12
 800a722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a724:	4413      	add	r3, r2
 800a726:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a730:	4618      	mov	r0, r3
 800a732:	f7fc fecf 	bl	80074d4 <tu_fifo_read_n_const_addr_full_words>
 800a736:	e00d      	b.n	800a754 <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a73e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800a742:	79f8      	ldrb	r0, [r7, #7]
 800a744:	f7ff fd2c 	bl	800a1a0 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 800a748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a74e:	441a      	add	r2, r3
 800a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a752:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 800a754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a758:	3301      	adds	r3, #1
 800a75a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a75e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a762:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a764:	429a      	cmp	r2, r3
 800a766:	d3b4      	bcc.n	800a6d2 <handle_epin_irq+0x146>
 800a768:	e000      	b.n	800a76c <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800a76a:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 800a76c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a770:	015b      	lsls	r3, r3, #5
 800a772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a774:	4413      	add	r3, r2
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10c      	bne.n	800a79a <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 800a780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a782:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800a786:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a78a:	2101      	movs	r1, #1
 800a78c:	fa01 f202 	lsl.w	r2, r1, r2
 800a790:	43d2      	mvns	r2, r2
 800a792:	401a      	ands	r2, r3
 800a794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a796:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 800a79a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a79e:	3301      	adds	r3, #1
 800a7a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a7a4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a7a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	f4ff af08 	bcc.w	800a5c2 <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	3748      	adds	r7, #72	; 0x48
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	0800b020 	.word	0x0800b020
 800a7c0:	20005310 	.word	0x20005310
 800a7c4:	200053d0 	.word	0x200053d0
 800a7c8:	0003fffc 	.word	0x0003fffc

0800a7cc <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b0a0      	sub	sp, #128	; 0x80
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	4ab7      	ldr	r2, [pc, #732]	; (800aab8 <dcd_int_handler+0x2ec>)
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	4413      	add	r3, r2
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	67bb      	str	r3, [r7, #120]	; 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 800a7e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 800a7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	673b      	str	r3, [r7, #112]	; 0x70

  if (int_status & GINTSTS_USBRST) {
 800a7f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800a7fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a802:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fd9a 	bl	8009340 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 800a80c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a80e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d03e      	beq.n	800a894 <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a81c:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 800a81e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a820:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a824:	085b      	lsrs	r3, r3, #1
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <dcd_int_handler+0x68>
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d004      	beq.n	800a83c <dcd_int_handler+0x70>
 800a832:	e007      	b.n	800a844 <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 800a834:	2302      	movs	r3, #2
 800a836:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800a83a:	e007      	b.n	800a84c <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800a842:	e003      	b.n	800a84c <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 800a844:	2300      	movs	r3, #0
 800a846:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800a84a:	bf00      	nop
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a856:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800a860:	f107 0320 	add.w	r3, r7, #32
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	605a      	str	r2, [r3, #4]
 800a86a:	609a      	str	r2, [r3, #8]
 800a86c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a870:	f887 3020 	strb.w	r3, [r7, #32]
 800a874:	2301      	movs	r3, #1
 800a876:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.bus_reset.speed = speed;
 800a87a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a87e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dcd_event_handler(&event, in_isr);
 800a882:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a886:	f107 0320 	add.w	r3, r7, #32
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fd ff17 	bl	80086c0 <dcd_event_handler>
}
 800a892:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 800a894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d023      	beq.n	800a8e6 <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8a4:	615a      	str	r2, [r3, #20]
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a8b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8bc:	2200      	movs	r2, #0
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	605a      	str	r2, [r3, #4]
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a8c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a8cc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a8d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 800a8d4:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800a8d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fd feee 	bl	80086c0 <dcd_event_handler>
}
 800a8e4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 800a8e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da23      	bge.n	800a934 <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8f2:	615a      	str	r2, [r3, #20]
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800a8fa:	2305      	movs	r3, #5
 800a8fc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800a900:	2301      	movs	r3, #1
 800a902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	605a      	str	r2, [r3, #4]
 800a910:	609a      	str	r2, [r3, #8]
 800a912:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800a916:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a91a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a91e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 800a922:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a92a:	4611      	mov	r1, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fd fec7 	bl	80086c0 <dcd_event_handler>
}
 800a932:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 800a934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d028      	beq.n	800a990 <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 800a93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (otg_int & GOTGINT_SEDET) {
 800a944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d01d      	beq.n	800a98a <dcd_int_handler+0x1be>
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800a954:	2302      	movs	r3, #2
 800a956:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a960:	f107 0314 	add.w	r3, r7, #20
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	605a      	str	r2, [r3, #4]
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a970:	753b      	strb	r3, [r7, #20]
 800a972:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800a976:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a978:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4611      	mov	r1, r2
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd fe9c 	bl	80086c0 <dcd_event_handler>
}
 800a988:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a98a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a98c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a98e:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 800a990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d051      	beq.n	800aa3e <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 800a99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99c:	2208      	movs	r2, #8
 800a99e:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 800a9a0:	4b46      	ldr	r3, [pc, #280]	; (800aabc <dcd_int_handler+0x2f0>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d024      	beq.n	800a9f2 <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 800a9a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9aa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800a9bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9be:	657b      	str	r3, [r7, #84]	; 0x54
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	605a      	str	r2, [r3, #4]
 800a9d0:	609a      	str	r2, [r3, #8]
 800a9d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a9d6:	723b      	strb	r3, [r7, #8]
 800a9d8:	2303      	movs	r3, #3
 800a9da:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9de:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a9e0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd fe68 	bl	80086c0 <dcd_event_handler>
}
 800a9f0:	e005      	b.n	800a9fe <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	f023 0208 	bic.w	r2, r3, #8
 800a9fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9fc:	619a      	str	r2, [r3, #24]
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800aa04:	2303      	movs	r3, #3
 800aa06:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800aa10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	605a      	str	r2, [r3, #4]
 800aa1a:	609a      	str	r2, [r3, #8]
 800aa1c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800aa20:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800aa24:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800aa28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_handler(&event, in_isr);
 800aa2c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800aa30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fd fe42 	bl	80086c0 <dcd_event_handler>
}
 800aa3c:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 800aa3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d020      	beq.n	800aa8a <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 800aa48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	f023 0210 	bic.w	r2, r3, #16
 800aa50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa52:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fbf8 	bl	800a24c <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 800aa5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f003 0310 	and.w	r3, r3, #16
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f5      	bne.n	800aa54 <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 800aa68:	4b15      	ldr	r3, [pc, #84]	; (800aac0 <dcd_int_handler+0x2f4>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fc22 	bl	80092bc <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 800aa78:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <dcd_int_handler+0x2f4>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800aa7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f043 0210 	orr.w	r2, r3, #16
 800aa86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa88:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 800aa8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fca6 	bl	800a3e8 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 800aa9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff fd6f 	bl	800a58c <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 800aaae:	bf00      	nop
 800aab0:	3780      	adds	r7, #128	; 0x80
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	0800b020 	.word	0x0800b020
 800aabc:	200053d7 	.word	0x200053d7
 800aac0:	200053d6 	.word	0x200053d6

0800aac4 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 800aaca:	2000      	movs	r0, #0
 800aacc:	f7fc fde4 	bl	8007698 <tud_init>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f083 0301 	eor.w	r3, r3, #1
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <tusb_init+0x2e>
 800aadc:	4b07      	ldr	r3, [pc, #28]	; (800aafc <tusb_init+0x38>)
 800aade:	607b      	str	r3, [r7, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d000      	beq.n	800aaee <tusb_init+0x2a>
 800aaec:	be00      	bkpt	0x0000
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e000      	b.n	800aaf4 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 800aaf2:	2301      	movs	r3, #1
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	e000edf0 	.word	0xe000edf0

0800ab00 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08a      	sub	sp, #40	; 0x28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <tu_edpt_claim+0x26>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <tu_edpt_claim+0x2a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	e05a      	b.n	800abe0 <tu_edpt_claim+0xe0>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	623b      	str	r3, [r7, #32]
 800ab2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab32:	61fb      	str	r3, [r7, #28]
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	61bb      	str	r3, [r7, #24]
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	613b      	str	r3, [r7, #16]
//--------------------------------------------------------------------+
// TASK API
//--------------------------------------------------------------------+

TU_ATTR_ALWAYS_INLINE static inline uint32_t _osal_ms2tick(uint32_t msec) {
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab46:	d102      	bne.n	800ab4e <tu_edpt_claim+0x4e>
 800ab48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab4c:	e014      	b.n	800ab78 <tu_edpt_claim+0x78>
  if ( msec == 0 ) return 0;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <tu_edpt_claim+0x58>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e00f      	b.n	800ab78 <tu_edpt_claim+0x78>

  uint32_t ticks = pdMS_TO_TICKS(msec);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab5e:	fb02 f303 	mul.w	r3, r2, r3
 800ab62:	4a21      	ldr	r2, [pc, #132]	; (800abe8 <tu_edpt_claim+0xe8>)
 800ab64:	fba2 2303 	umull	r2, r3, r2, r3
 800ab68:	099b      	lsrs	r3, r3, #6
 800ab6a:	60fb      	str	r3, [r7, #12]

  // configTICK_RATE_HZ is less than 1000 and 1 tick > 1 ms
  // we still need to delay at least 1 tick
  if ( ticks == 0 ) ticks = 1;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <tu_edpt_claim+0x76>
 800ab72:	2301      	movs	r3, #1
 800ab74:	60fb      	str	r3, [r7, #12]

  return ticks;
 800ab76:	68fb      	ldr	r3, [r7, #12]
    return res != 0;
  }
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_semaphore_wait(osal_semaphore_t sem_hdl, uint32_t msec) {
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 800ab78:	4619      	mov	r1, r3
 800ab7a:	69b8      	ldr	r0, [r7, #24]
 800ab7c:	f7f9 f9e8 	bl	8003f50 <xQueueSemaphoreTake>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d108      	bne.n	800aba4 <tu_edpt_claim+0xa4>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d101      	bne.n	800aba4 <tu_edpt_claim+0xa4>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e000      	b.n	800aba6 <tu_edpt_claim+0xa6>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (available)
 800abb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <tu_edpt_claim+0xc8>
  {
    ep_state->claimed = 1;
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	7813      	ldrb	r3, [r2, #0]
 800abc2:	f043 0304 	orr.w	r3, r3, #4
 800abc6:	7013      	strb	r3, [r2, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_lock(osal_mutex_t mutex_hdl, uint32_t msec) {
  return osal_semaphore_wait(mutex_hdl, msec);
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl) {
  return xSemaphoreGive(mutex_hdl);
 800abcc:	2300      	movs	r3, #0
 800abce:	2200      	movs	r2, #0
 800abd0:	2100      	movs	r1, #0
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	f7f8 ff42 	bl	8003a5c <xQueueGenericSend>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800abdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3728      	adds	r7, #40	; 0x28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	10624dd3 	.word	0x10624dd3

0800abec <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08a      	sub	sp, #40	; 0x28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	623b      	str	r3, [r7, #32]
 800abfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	613b      	str	r3, [r7, #16]
  if ( msec == OSAL_TIMEOUT_WAIT_FOREVER ) return portMAX_DELAY;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac12:	d102      	bne.n	800ac1a <tu_edpt_release+0x2e>
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac18:	e014      	b.n	800ac44 <tu_edpt_release+0x58>
  if ( msec == 0 ) return 0;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <tu_edpt_release+0x38>
 800ac20:	2300      	movs	r3, #0
 800ac22:	e00f      	b.n	800ac44 <tu_edpt_release+0x58>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac2a:	fb02 f303 	mul.w	r3, r2, r3
 800ac2e:	4a21      	ldr	r2, [pc, #132]	; (800acb4 <tu_edpt_release+0xc8>)
 800ac30:	fba2 2303 	umull	r2, r3, r2, r3
 800ac34:	099b      	lsrs	r3, r3, #6
 800ac36:	60fb      	str	r3, [r7, #12]
  if ( ticks == 0 ) ticks = 1;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <tu_edpt_release+0x56>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
  return ticks;
 800ac42:	68fb      	ldr	r3, [r7, #12]
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 800ac44:	4619      	mov	r1, r3
 800ac46:	69b8      	ldr	r0, [r7, #24]
 800ac48:	f7f9 f982 	bl	8003f50 <xQueueSemaphoreTake>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d108      	bne.n	800ac70 <tu_edpt_release+0x84>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <tu_edpt_release+0x84>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <tu_edpt_release+0x86>
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret)
 800ac82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <tu_edpt_release+0xa8>
  {
    ep_state->claimed = 0;
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	7813      	ldrb	r3, [r2, #0]
 800ac8e:	f36f 0382 	bfc	r3, #2, #1
 800ac92:	7013      	strb	r3, [r2, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	60bb      	str	r3, [r7, #8]
  return xSemaphoreGive(mutex_hdl);
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	68b8      	ldr	r0, [r7, #8]
 800aca0:	f7f8 fedc 	bl	8003a5c <xQueueGenericSend>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 800aca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800acac:	4618      	mov	r0, r3
 800acae:	3728      	adds	r7, #40	; 0x28
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	10624dd3 	.word	0x10624dd3

0800acb8 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 800acb8:	b480      	push	{r7}
 800acba:	b08b      	sub	sp, #44	; 0x2c
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	889b      	ldrh	r3, [r3, #4]
 800accc:	b29b      	uxth	r3, r3
 800acce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acd2:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800acd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d03e      	beq.n	800ad62 <tu_edpt_validate+0xaa>
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	dc53      	bgt.n	800ad90 <tu_edpt_validate+0xd8>
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d002      	beq.n	800acf2 <tu_edpt_validate+0x3a>
 800acec:	2b02      	cmp	r3, #2
 800acee:	d018      	beq.n	800ad22 <tu_edpt_validate+0x6a>
 800acf0:	e04e      	b.n	800ad90 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d102      	bne.n	800acfe <tu_edpt_validate+0x46>
 800acf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acfc:	e001      	b.n	800ad02 <tu_edpt_validate+0x4a>
 800acfe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ad02:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800ad04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad06:	8afb      	ldrh	r3, [r7, #22]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d943      	bls.n	800ad94 <tu_edpt_validate+0xdc>
 800ad0c:	4b27      	ldr	r3, [pc, #156]	; (800adac <tu_edpt_validate+0xf4>)
 800ad0e:	613b      	str	r3, [r7, #16]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d000      	beq.n	800ad1e <tu_edpt_validate+0x66>
 800ad1c:	be00      	bkpt	0x0000
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e03e      	b.n	800ada0 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800ad22:	78fb      	ldrb	r3, [r7, #3]
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d10e      	bne.n	800ad46 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800ad28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad2e:	d033      	beq.n	800ad98 <tu_edpt_validate+0xe0>
 800ad30:	4b1e      	ldr	r3, [pc, #120]	; (800adac <tu_edpt_validate+0xf4>)
 800ad32:	61bb      	str	r3, [r7, #24]
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d000      	beq.n	800ad42 <tu_edpt_validate+0x8a>
 800ad40:	be00      	bkpt	0x0000
 800ad42:	2300      	movs	r3, #0
 800ad44:	e02c      	b.n	800ada0 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800ad46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad48:	2b40      	cmp	r3, #64	; 0x40
 800ad4a:	d925      	bls.n	800ad98 <tu_edpt_validate+0xe0>
 800ad4c:	4b17      	ldr	r3, [pc, #92]	; (800adac <tu_edpt_validate+0xf4>)
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d000      	beq.n	800ad5e <tu_edpt_validate+0xa6>
 800ad5c:	be00      	bkpt	0x0000
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e01e      	b.n	800ada0 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d102      	bne.n	800ad6e <tu_edpt_validate+0xb6>
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	e000      	b.n	800ad70 <tu_edpt_validate+0xb8>
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ad72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d910      	bls.n	800ad9c <tu_edpt_validate+0xe4>
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	; (800adac <tu_edpt_validate+0xf4>)
 800ad7c:	623b      	str	r3, [r7, #32]
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d000      	beq.n	800ad8c <tu_edpt_validate+0xd4>
 800ad8a:	be00      	bkpt	0x0000
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e007      	b.n	800ada0 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e005      	b.n	800ada0 <tu_edpt_validate+0xe8>
    break;
 800ad94:	bf00      	nop
 800ad96:	e002      	b.n	800ad9e <tu_edpt_validate+0xe6>
    break;
 800ad98:	bf00      	nop
 800ad9a:	e000      	b.n	800ad9e <tu_edpt_validate+0xe6>
    break;
 800ad9c:	bf00      	nop
  }

  return true;
 800ad9e:	2301      	movs	r3, #1
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	372c      	adds	r7, #44	; 0x2c
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	e000edf0 	.word	0xe000edf0

0800adb0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b08d      	sub	sp, #52	; 0x34
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	4611      	mov	r1, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	460b      	mov	r3, r1
 800adc0:	80fb      	strh	r3, [r7, #6]
 800adc2:	4613      	mov	r3, r2
 800adc4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adce:	4413      	add	r3, r2
 800add0:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 800add2:	e027      	b.n	800ae24 <tu_edpt_bind_driver+0x74>
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	3301      	adds	r3, #1
 800addc:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800adde:	2b05      	cmp	r3, #5
 800ade0:	d116      	bne.n	800ae10 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	789b      	ldrb	r3, [r3, #2]
 800ade6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adee:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800adf0:	7fbb      	ldrb	r3, [r7, #30]
 800adf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf6:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4413      	add	r3, r2
 800adfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae02:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ae04:	7ffa      	ldrb	r2, [r7, #31]
 800ae06:	09d2      	lsrs	r2, r2, #7
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	797a      	ldrb	r2, [r7, #5]
 800ae0e:	545a      	strb	r2, [r3, r1]
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 800ae24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d3d3      	bcc.n	800add4 <tu_edpt_bind_driver+0x24>
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	3734      	adds	r7, #52	; 0x34
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <memset>:
 800ae3a:	4402      	add	r2, r0
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d100      	bne.n	800ae44 <memset+0xa>
 800ae42:	4770      	bx	lr
 800ae44:	f803 1b01 	strb.w	r1, [r3], #1
 800ae48:	e7f9      	b.n	800ae3e <memset+0x4>
	...

0800ae4c <__libc_init_array>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	4d0d      	ldr	r5, [pc, #52]	; (800ae84 <__libc_init_array+0x38>)
 800ae50:	4c0d      	ldr	r4, [pc, #52]	; (800ae88 <__libc_init_array+0x3c>)
 800ae52:	1b64      	subs	r4, r4, r5
 800ae54:	10a4      	asrs	r4, r4, #2
 800ae56:	2600      	movs	r6, #0
 800ae58:	42a6      	cmp	r6, r4
 800ae5a:	d109      	bne.n	800ae70 <__libc_init_array+0x24>
 800ae5c:	4d0b      	ldr	r5, [pc, #44]	; (800ae8c <__libc_init_array+0x40>)
 800ae5e:	4c0c      	ldr	r4, [pc, #48]	; (800ae90 <__libc_init_array+0x44>)
 800ae60:	f000 f826 	bl	800aeb0 <_init>
 800ae64:	1b64      	subs	r4, r4, r5
 800ae66:	10a4      	asrs	r4, r4, #2
 800ae68:	2600      	movs	r6, #0
 800ae6a:	42a6      	cmp	r6, r4
 800ae6c:	d105      	bne.n	800ae7a <__libc_init_array+0x2e>
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
 800ae70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae74:	4798      	blx	r3
 800ae76:	3601      	adds	r6, #1
 800ae78:	e7ee      	b.n	800ae58 <__libc_init_array+0xc>
 800ae7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7e:	4798      	blx	r3
 800ae80:	3601      	adds	r6, #1
 800ae82:	e7f2      	b.n	800ae6a <__libc_init_array+0x1e>
 800ae84:	0800b038 	.word	0x0800b038
 800ae88:	0800b038 	.word	0x0800b038
 800ae8c:	0800b038 	.word	0x0800b038
 800ae90:	0800b03c 	.word	0x0800b03c

0800ae94 <memcpy>:
 800ae94:	440a      	add	r2, r1
 800ae96:	4291      	cmp	r1, r2
 800ae98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae9c:	d100      	bne.n	800aea0 <memcpy+0xc>
 800ae9e:	4770      	bx	lr
 800aea0:	b510      	push	{r4, lr}
 800aea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeaa:	4291      	cmp	r1, r2
 800aeac:	d1f9      	bne.n	800aea2 <memcpy+0xe>
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <_init>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr

0800aebc <_fini>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr
