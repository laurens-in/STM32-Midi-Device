
STM-Midi-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007028  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ec8  20000010  08007278  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ed8  08007278  00024ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f8d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ec  00000000  00000000  00038010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001071  00000000  00000000  0003cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034b8  00000000  00000000  0003ddc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a0c  00000000  00000000  00041281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd24e  00000000  00000000  00057c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a74  00000000  00000000  00124edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071e0 	.word	0x080071e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080071e0 	.word	0x080071e0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fd30 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f818 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8ba 	bl	8000690 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f888 	bl	8000630 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f004 f8d6 	bl	80046d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x30>)
 8000526:	2100      	movs	r1, #0
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0x34>)
 800052a:	f004 f91b 	bl	8004764 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <main+0x38>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f004 f8f0 	bl	8004718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x2c>
 800053a:	bf00      	nop
 800053c:	0800721c 	.word	0x0800721c
 8000540:	08000c25 	.word	0x08000c25
 8000544:	20000538 	.word	0x20000538

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2234      	movs	r2, #52	; 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fe08 	bl	800716c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <SystemClock_Config+0xe0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <SystemClock_Config+0xe0>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <SystemClock_Config+0xe0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xe4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xe4>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xe4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c4:	2348      	movs	r3, #72	; 0x48
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005cc:	2303      	movs	r3, #3
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fce9 	bl	8002fb0 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005e4:	f000 fb38 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f85f 	bl	80026c8 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000610:	f000 fb22 	bl	8000c58 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2000      	movs	r0, #0
 800061a:	f002 f93b 	bl	8002894 <HAL_RCC_MCOConfig>
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000636:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800063a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800063e:	2206      	movs	r2, #6
 8000640:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000644:	2202      	movs	r2, #2
 8000646:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000650:	2202      	movs	r2, #2
 8000652:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000668:	2200      	movs	r2, #0
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800067a:	f000 ffa3 	bl	80015c4 <HAL_PCD_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 fae8 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000002c 	.word	0x2000002c

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
 80006aa:	4bb1      	ldr	r3, [pc, #708]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4ab0      	ldr	r2, [pc, #704]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4bae      	ldr	r3, [pc, #696]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	623b      	str	r3, [r7, #32]
 80006c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	4baa      	ldr	r3, [pc, #680]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4aa9      	ldr	r2, [pc, #676]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4ba7      	ldr	r3, [pc, #668]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	4ba3      	ldr	r3, [pc, #652]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4aa2      	ldr	r2, [pc, #648]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4ba0      	ldr	r3, [pc, #640]	; (8000970 <MX_GPIO_Init+0x2e0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	4b9c      	ldr	r3, [pc, #624]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a9b      	ldr	r2, [pc, #620]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b99      	ldr	r3, [pc, #612]	; (8000970 <MX_GPIO_Init+0x2e0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b95      	ldr	r3, [pc, #596]	; (8000970 <MX_GPIO_Init+0x2e0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a94      	ldr	r2, [pc, #592]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b92      	ldr	r3, [pc, #584]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b8e      	ldr	r3, [pc, #568]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <MX_GPIO_Init+0x2e0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b8b      	ldr	r3, [pc, #556]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b87      	ldr	r3, [pc, #540]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a86      	ldr	r2, [pc, #536]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b84      	ldr	r3, [pc, #528]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b80      	ldr	r3, [pc, #512]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a7f      	ldr	r2, [pc, #508]	; (8000970 <MX_GPIO_Init+0x2e0>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b7d      	ldr	r3, [pc, #500]	; (8000970 <MX_GPIO_Init+0x2e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	487a      	ldr	r0, [pc, #488]	; (8000974 <MX_GPIO_Init+0x2e4>)
 800078c:	f000 fece 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000796:	4878      	ldr	r0, [pc, #480]	; (8000978 <MX_GPIO_Init+0x2e8>)
 8000798:	f000 fec8 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	4876      	ldr	r0, [pc, #472]	; (800097c <MX_GPIO_Init+0x2ec>)
 80007a4:	f000 fec2 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	4874      	ldr	r0, [pc, #464]	; (8000980 <MX_GPIO_Init+0x2f0>)
 80007b0:	f000 febc 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 80007b4:	230f      	movs	r3, #15
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007b8:	2311      	movs	r3, #17
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	486a      	ldr	r0, [pc, #424]	; (8000974 <MX_GPIO_Init+0x2e4>)
 80007cc:	f000 fd1a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 80007d0:	2310      	movs	r3, #16
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80007e0:	2308      	movs	r3, #8
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4862      	ldr	r0, [pc, #392]	; (8000974 <MX_GPIO_Init+0x2e4>)
 80007ec:	f000 fd0a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_Pin */
  GPIO_InitStruct.Pin = A0_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000800:	230c      	movs	r3, #12
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	485b      	ldr	r0, [pc, #364]	; (8000978 <MX_GPIO_Init+0x2e8>)
 800080c:	f000 fcfa 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000810:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	4853      	ldr	r0, [pc, #332]	; (8000978 <MX_GPIO_Init+0x2e8>)
 800082a:	f000 fceb 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800083e:	2309      	movs	r3, #9
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	484b      	ldr	r0, [pc, #300]	; (8000978 <MX_GPIO_Init+0x2e8>)
 800084a:	f000 fcdb 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800084e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000860:	230a      	movs	r3, #10
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4619      	mov	r1, r3
 800086a:	4843      	ldr	r0, [pc, #268]	; (8000978 <MX_GPIO_Init+0x2e8>)
 800086c:	f000 fcca 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000880:	2308      	movs	r3, #8
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	483e      	ldr	r0, [pc, #248]	; (8000984 <MX_GPIO_Init+0x2f4>)
 800088c:	f000 fcba 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000890:	230c      	movs	r3, #12
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a0:	2307      	movs	r3, #7
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4837      	ldr	r0, [pc, #220]	; (8000988 <MX_GPIO_Init+0x2f8>)
 80008ac:	f000 fcaa 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_WS_Pin;
 80008b0:	2310      	movs	r3, #16
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c0:	2306      	movs	r3, #6
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	482f      	ldr	r0, [pc, #188]	; (8000988 <MX_GPIO_Init+0x2f8>)
 80008cc:	f000 fc9a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80008d0:	2302      	movs	r3, #2
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008e0:	2308      	movs	r3, #8
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4828      	ldr	r0, [pc, #160]	; (800098c <MX_GPIO_Init+0x2fc>)
 80008ec:	f000 fc8a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80008f0:	2304      	movs	r3, #4
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000900:	2309      	movs	r3, #9
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	4820      	ldr	r0, [pc, #128]	; (800098c <MX_GPIO_Init+0x2fc>)
 800090c:	f000 fc7a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8000910:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_GPIO_Init+0x2e8>)
 8000928:	f000 fc6c 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|CODEC_INT_Pin|CTP_INT_Pin;
 800092c:	2327      	movs	r3, #39	; 0x27
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <MX_GPIO_Init+0x2f0>)
 8000942:	f000 fc5f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000946:	f64f 7380 	movw	r3, #65408	; 0xff80
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000958:	230c      	movs	r3, #12
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x2e4>)
 8000964:	f000 fc4e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SCL_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	e00f      	b.n	8000990 <MX_GPIO_Init+0x300>
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40021400 	.word	0x40021400
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40021800 	.word	0x40021800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099c:	2304      	movs	r3, #4
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4885      	ldr	r0, [pc, #532]	; (8000bbc <MX_GPIO_Init+0x52c>)
 80009a8:	f000 fc2c 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 80009ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009be:	2305      	movs	r3, #5
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	487c      	ldr	r0, [pc, #496]	; (8000bbc <MX_GPIO_Init+0x52c>)
 80009ca:	f000 fc1b 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_I2S3_SCK_Pin CODEC_I2S3ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_SCK_Pin|CODEC_I2S3ext_SD_Pin;
 80009ce:	f241 0310 	movw	r3, #4112	; 0x1010
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80009e0:	2307      	movs	r3, #7
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4874      	ldr	r0, [pc, #464]	; (8000bbc <MX_GPIO_Init+0x52c>)
 80009ec:	f000 fc0a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin FMC_NOE_Pin
                           FMC_NWE_Pin FMC_NE1_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80009f0:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a02:	230c      	movs	r3, #12
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	486c      	ldr	r0, [pc, #432]	; (8000bc0 <MX_GPIO_Init+0x530>)
 8000a0e:	f000 fbf9 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4865      	ldr	r0, [pc, #404]	; (8000bc0 <MX_GPIO_Init+0x530>)
 8000a2c:	f000 fbea 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000a30:	2390      	movs	r3, #144	; 0x90
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4860      	ldr	r0, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x534>)
 8000a44:	f000 fbde 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4858      	ldr	r0, [pc, #352]	; (8000bc4 <MX_GPIO_Init+0x534>)
 8000a64:	f000 fbce 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a6e:	2311      	movs	r3, #17
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4850      	ldr	r0, [pc, #320]	; (8000bc4 <MX_GPIO_Init+0x534>)
 8000a82:	f000 fbbf 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_MCK_Pin;
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a96:	2306      	movs	r3, #6
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4849      	ldr	r0, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x538>)
 8000aa2:	f000 fbaf 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D0_Pin uSD_D1_Pin uSD_D2_Pin uSD_D3_Pin
                           uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 8000aa6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4841      	ldr	r0, [pc, #260]	; (8000bc8 <MX_GPIO_Init+0x538>)
 8000ac4:	f000 fb9e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4839      	ldr	r0, [pc, #228]	; (8000bcc <MX_GPIO_Init+0x53c>)
 8000ae6:	f000 fb8d 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000aea:	2304      	movs	r3, #4
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000afa:	230c      	movs	r3, #12
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <MX_GPIO_Init+0x530>)
 8000b06:	f000 fb7d 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4828      	ldr	r0, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0x530>)
 8000b1e:	f000 fb71 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_I2S3_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_I2S3_SD_Pin;
 8000b22:	2320      	movs	r3, #32
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b32:	2306      	movs	r3, #6
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <MX_GPIO_Init+0x52c>)
 8000b3e:	f000 fb61 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b42:	23c0      	movs	r3, #192	; 0xc0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b52:	2304      	movs	r3, #4
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4817      	ldr	r0, [pc, #92]	; (8000bbc <MX_GPIO_Init+0x52c>)
 8000b5e:	f000 fb51 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b74:	2309      	movs	r3, #9
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x52c>)
 8000b80:	f000 fb40 	bl	8001204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2105      	movs	r1, #5
 8000b88:	2006      	movs	r0, #6
 8000b8a:	f000 fb11 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f000 fb2a 	bl	80011e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2007      	movs	r0, #7
 8000b9a:	f000 fb09 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fb22 	bl	80011e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2028      	movs	r0, #40	; 0x28
 8000baa:	f000 fb01 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f000 fb1a 	bl	80011e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// DOCUMENTATION: EXTI Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == JOY_UP_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d103      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED1_Pin); // Toggle The Output (LED) Pin
 8000be0:	2101      	movs	r1, #1
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000be4:	f000 fcbb 	bl	800155e <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_DOWN_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d103      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED2_Pin); // Toggle The Output (LED) Pin
 8000bee:	2102      	movs	r1, #2
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000bf2:	f000 fcb4 	bl	800155e <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_LEFT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bfc:	d103      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x36>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED3_Pin); // Toggle The Output (LED) Pin
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c02:	f000 fcac 	bl	800155e <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == JOY_RIGHT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c0c:	d103      	bne.n	8000c16 <HAL_GPIO_EXTI_Callback+0x46>
    {
    	HAL_GPIO_TogglePin(GPIOE, LED4_Pin); // Toggle The Output (LED) Pin
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c12:	f000 fca4 	bl	800155e <HAL_GPIO_TogglePin>
    }
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f003 fe2b 	bl	8004888 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <StartDefaultTask+0x8>

08000c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c46:	f000 f9b7 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010000 	.word	0x40010000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x54>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f000 fa81 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b098      	sub	sp, #96	; 0x60
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	223c      	movs	r2, #60	; 0x3c
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fa45 	bl	800716c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cea:	d148      	bne.n	8000d7e <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cec:	2320      	movs	r3, #32
 8000cee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 ff8b 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000d04:	f7ff ffa8 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTGFS_DM_Pin|GPIO_PIN_12;
 8000d24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d28:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d36:	230a      	movs	r3, #10
 8000d38:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <HAL_PCD_MspInit+0xd0>)
 8000d42:	f000 fa5f 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6353      	str	r3, [r2, #52]	; 0x34
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_PCD_MspInit+0xcc>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2105      	movs	r1, #5
 8000d72:	2043      	movs	r0, #67	; 0x43
 8000d74:	f000 fa1c 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d78:	2043      	movs	r0, #67	; 0x43
 8000d7a:	f000 fa35 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3760      	adds	r7, #96	; 0x60
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_InitTick+0xd0>)
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <HAL_InitTick+0xd0>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6453      	str	r3, [r2, #68]	; 0x44
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <HAL_InitTick+0xd0>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fef2 	bl	8002bb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dcc:	f001 fedc 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8000dd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_InitTick+0xd4>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_InitTick+0xd8>)
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_InitTick+0xdc>)
 8000de4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <HAL_InitTick+0xd8>)
 8000de8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_InitTick+0xd8>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_InitTick+0xd8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_InitTick+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_InitTick+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <HAL_InitTick+0xd8>)
 8000e08:	f002 fb56 	bl	80034b8 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11b      	bne.n	8000e52 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <HAL_InitTick+0xd8>)
 8000e1c:	f002 fba6 	bl	800356c <HAL_TIM_Base_Start_IT>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d111      	bne.n	8000e52 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e2e:	2019      	movs	r0, #25
 8000e30:	f000 f9da 	bl	80011e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d808      	bhi.n	8000e4c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	2019      	movs	r0, #25
 8000e40:	f000 f9b6 	bl	80011b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_InitTick+0xe0>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e002      	b.n	8000e52 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	431bde83 	.word	0x431bde83
 8000e68:	2000053c 	.word	0x2000053c
 8000e6c:	40010000 	.word	0x40010000
 8000e70:	20000004 	.word	0x20000004

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fb75 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 fb6e 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ec2:	f002 fbc3 	bl	800364c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000053c 	.word	0x2000053c

08000ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8000ed4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed8:	f000 fb5c 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 8000edc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ee0:	f000 fb58 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f000 fc8d 	bl	800180c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000002c 	.word	0x2000002c

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f006 f915 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fadb 	bl	800050c <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f58:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f64:	08007268 	.word	0x08007268
  ldr r2, =_sbss
 8000f68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f6c:	20004ed8 	.word	0x20004ed8

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f8fc 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fef4 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fe5c 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000584 	.word	0x20000584

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000584 	.word	0x20000584

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff61 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb1 	bl	8001134 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff80 	bl	80010e0 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff54 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e165      	b.n	80014ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8154 	bne.w	80014e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80ae 	beq.w	80014e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_GPIO_Init+0x300>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a5c      	ldr	r2, [pc, #368]	; (8001504 <HAL_GPIO_Init+0x300>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_GPIO_Init+0x300>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_GPIO_Init+0x304>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x308>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x30c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x310>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x314>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x318>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x20a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_GPIO_Init+0x31c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x206>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x320>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x202>
 8001402:	2306      	movs	r3, #6
 8001404:	e00c      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001406:	2307      	movs	r3, #7
 8001408:	e00a      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800140e:	2304      	movs	r3, #4
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800141e:	2300      	movs	r3, #0
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001462:	4a31      	ldr	r2, [pc, #196]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_GPIO_Init+0x324>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x324>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	f67f ae96 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40013800 	.word	0x40013800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020400 	.word	0x40020400
 8001514:	40020800 	.word	0x40020800
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40021000 	.word	0x40021000
 8001520:	40021400 	.word	0x40021400
 8001524:	40021800 	.word	0x40021800
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43d9      	mvns	r1, r3
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb0c 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	b08f      	sub	sp, #60	; 0x3c
 80015c8:	af0a      	add	r7, sp, #40	; 0x28
 80015ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e116      	b.n	8001804 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d106      	bne.n	80015f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fb63 	bl	8000cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fb01 	bl	8003c1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	687e      	ldr	r6, [r7, #4]
 8001622:	466d      	mov	r5, sp
 8001624:	f106 0410 	add.w	r4, r6, #16
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001630:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001634:	e885 0003 	stmia.w	r5, {r0, r1}
 8001638:	1d33      	adds	r3, r6, #4
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f002 f9e9 	bl	8003a14 <USB_CoreInit>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d7      	b.n	8001804 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f002 faef 	bl	8003c3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e04a      	b.n	80016fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	333d      	adds	r3, #61	; 0x3d
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	333c      	adds	r3, #60	; 0x3c
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	b298      	uxth	r0, r3
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3344      	adds	r3, #68	; 0x44
 80016a2:	4602      	mov	r2, r0
 80016a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3340      	adds	r3, #64	; 0x40
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3348      	adds	r3, #72	; 0x48
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	334c      	adds	r3, #76	; 0x4c
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3354      	adds	r3, #84	; 0x54
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3af      	bcc.n	8001666 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e044      	b.n	8001796 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	3301      	adds	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3b5      	bcc.n	800170c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	687e      	ldr	r6, [r7, #4]
 80017a8:	466d      	mov	r5, sp
 80017aa:	f106 0410 	add.w	r4, r6, #16
 80017ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80017be:	1d33      	adds	r3, r6, #4
 80017c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f002 fa88 	bl	8003cd8 <USB_DevInit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e014      	b.n	8001804 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 ff38 	bl	8002668 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fdab 	bl	8004358 <USB_DevDisconnect>

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800180c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08d      	sub	sp, #52	; 0x34
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fe4c 	bl	80044c0 <USB_GetMode>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 84b7 	bne.w	800219e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fdb0 	bl	800439a <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 84ad 	beq.w	800219c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fd9d 	bl	800439a <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f002 0202 	and.w	r2, r2, #2
 8001878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fd8b 	bl	800439a <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b10      	cmp	r3, #16
 800188c:	d161      	bne.n	8001952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0210 	bic.w	r2, r2, #16
 800189c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 020f 	and.w	r2, r3, #15
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	0c5b      	lsrs	r3, r3, #17
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d124      	bne.n	8001914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d035      	beq.n	8001942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	6a38      	ldr	r0, [r7, #32]
 80018ea:	f002 fcdd 	bl	80042a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018fa:	441a      	add	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190c:	441a      	add	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	621a      	str	r2, [r3, #32]
 8001912:	e016      	b.n	8001942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	0c5b      	lsrs	r3, r3, #17
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	2b06      	cmp	r3, #6
 800191e:	d110      	bne.n	8001942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001926:	2208      	movs	r2, #8
 8001928:	4619      	mov	r1, r3
 800192a:	6a38      	ldr	r0, [r7, #32]
 800192c:	f002 fcbc 	bl	80042a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800193c:	441a      	add	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699a      	ldr	r2, [r3, #24]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0210 	orr.w	r2, r2, #16
 8001950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fd1f 	bl	800439a <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001962:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001966:	f040 80a7 	bne.w	8001ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fd24 	bl	80043c0 <USB_ReadDevAllOutEpInterrupt>
 8001978:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800197a:	e099      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 808e 	beq.w	8001aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fd48 	bl	8004428 <USB_ReadDevOutEPInterrupt>
 8001998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b0:	461a      	mov	r2, r3
 80019b2:	2301      	movs	r3, #1
 80019b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fd27 	bl	800240c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	461a      	mov	r2, r3
 80019d6:	2308      	movs	r3, #8
 80019d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fdfd 	bl	80025dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f8:	461a      	mov	r2, r3
 80019fa:	2310      	movs	r3, #16
 80019fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d030      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a10:	2b80      	cmp	r3, #128	; 0x80
 8001a12:	d109      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fbf0 	bl	8002238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a64:	461a      	mov	r2, r3
 8001a66:	2302      	movs	r3, #2
 8001a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a80:	461a      	mov	r2, r3
 8001a82:	2320      	movs	r3, #32
 8001a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f47f af62 	bne.w	800197c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fc6c 	bl	800439a <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001acc:	f040 80db 	bne.w	8001c86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fc8d 	bl	80043f4 <USB_ReadDevAllInEpInterrupt>
 8001ada:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ae0:	e0cd      	b.n	8001c7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80c2 	beq.w	8001c72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fcb3 	bl	8004464 <USB_ReadDevInEPInterrupt>
 8001afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d057      	beq.n	8001bba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d132      	bne.n	8001bae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	334c      	adds	r3, #76	; 0x4c
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	3348      	adds	r3, #72	; 0x48
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4419      	add	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4403      	add	r3, r0
 8001b7c:	334c      	adds	r3, #76	; 0x4c
 8001b7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d113      	bne.n	8001bae <HAL_PCD_IRQHandler+0x3a2>
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3354      	adds	r3, #84	; 0x54
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d108      	bne.n	8001bae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2101      	movs	r1, #1
 8001baa:	f002 fcbb 	bl	8004524 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fb01 	bl	80021bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bec:	461a      	mov	r2, r3
 8001bee:	2310      	movs	r3, #16
 8001bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1a:	6a38      	ldr	r0, [r7, #32]
 8001c1c:	f002 f9ba 	bl	8003f94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fb01 	bl	8002250 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fb40 	bl	80022f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f af2e 	bne.w	8001ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fb85 	bl	800439a <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c9a:	d122      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d108      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fcf3 	bl	80026b0 <HAL_PCDEx_LPM_Callback>
 8001cca:	e002      	b.n	8001cd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 faa9 	bl	8002224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fb57 	bl	800439a <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf6:	d112      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fa81 	bl	8002210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d1c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fb39 	bl	800439a <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d32:	d121      	bne.n	8001d78 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d111      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fca0 	bl	80026b0 <HAL_PCDEx_LPM_Callback>
 8001d70:	e002      	b.n	8001d78 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa4c 	bl	8002210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 fb0c 	bl	800439a <USB_ReadInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8c:	f040 80b7 	bne.w	8001efe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2110      	movs	r1, #16
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 f8f2 	bl	8003f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db4:	e046      	b.n	8001e44 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df6:	461a      	mov	r2, r3
 8001df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2e:	0151      	lsls	r1, r2, #5
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	440a      	add	r2, r1
 8001e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	3301      	adds	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3b3      	bcc.n	8001db6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7a:	f043 030b 	orr.w	r3, r3, #11
 8001e7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e90:	f043 030b 	orr.w	r3, r3, #11
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	e015      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001eae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ebe:	f043 030b 	orr.w	r3, r3, #11
 8001ec2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ed6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f002 fb1b 	bl	8004524 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fa49 	bl	800439a <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f12:	d124      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fadf 	bl	80044dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 f8b3 	bl	800408e <USB_GetDevSpeed>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681c      	ldr	r4, [r3, #0]
 8001f34:	f000 fe1c 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	f001 fdc8 	bl	8003ad8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f957 	bl	80021fc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 fa19 	bl	800439a <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d10a      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f938 	bl	80021e8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f002 0208 	and.w	r2, r2, #8
 8001f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fa04 	bl	800439a <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d122      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fa8:	2301      	movs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	e014      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f95f 	bl	8002290 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3e5      	bcc.n	8001fae <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 f9d7 	bl	800439a <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff6:	d13b      	bne.n	8002070 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	e02b      	b.n	8002056 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3340      	adds	r3, #64	; 0x40
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d115      	bne.n	8002050 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002024:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	da12      	bge.n	8002050 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f920 	bl	8002290 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3301      	adds	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	429a      	cmp	r2, r3
 800205e:	d3ce      	bcc.n	8001ffe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800206e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 f990 	bl	800439a <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002084:	d155      	bne.n	8002132 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e045      	b.n	8002118 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d12e      	bne.n	8002112 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da2b      	bge.n	8002112 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d121      	bne.n	8002112 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6053      	str	r3, [r2, #4]
            break;
 8002110:	e007      	b.n	8002122 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	3301      	adds	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	429a      	cmp	r2, r3
 8002120:	d3b4      	bcc.n	800208c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f92f 	bl	800439a <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d10a      	bne.n	800215e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f88d 	bl	8002268 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800215c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f002 f919 	bl	800439a <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d115      	bne.n	800219e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f879 	bl	800227c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e000      	b.n	800219e <HAL_PCD_IRQHandler+0x992>
      return;
 800219c:	bf00      	nop
    }
  }
}
 800219e:	3734      	adds	r7, #52	; 0x34
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}

080021a4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800229c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da0c      	bge.n	80022be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 020f 	and.w	r2, r3, #15
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3338      	adds	r3, #56	; 0x38
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e00c      	b.n	80022d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fefa 	bl	80040d8 <USB_EPStopXfer>
 80022e4:	4603      	mov	r3, r0
 80022e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08a      	sub	sp, #40	; 0x28
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	429a      	cmp	r2, r3
 8002324:	d901      	bls.n	800232a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06c      	b.n	8002404 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	d902      	bls.n	8002346 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3303      	adds	r3, #3
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234e:	e02b      	b.n	80023a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d902      	bls.n	800236c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3303      	adds	r3, #3
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002384:	b2db      	uxtb	r3, r3
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4603      	mov	r3, r0
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f001 ff4e 	bl	800422c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	441a      	add	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	441a      	add	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d809      	bhi.n	80023d2 <PCD_WriteEmptyTxFifo+0xe0>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d203      	bcs.n	80023d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1be      	bne.n	8002350 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d811      	bhi.n	8002402 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	2201      	movs	r2, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023fe:	4013      	ands	r3, r2
 8002400:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d17b      	bne.n	800253a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4a61      	ldr	r2, [pc, #388]	; (80025d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	f240 80b9 	bls.w	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80b3 	beq.w	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002474:	6093      	str	r3, [r2, #8]
 8002476:	e0a7      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	2320      	movs	r3, #32
 8002492:	6093      	str	r3, [r2, #8]
 8002494:	e098      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 8093 	bne.w	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d90f      	bls.n	80024ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	e07e      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	0159      	lsls	r1, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	1ad2      	subs	r2, r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d114      	bne.n	800252c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002514:	461a      	mov	r2, r3
 8002516:	2101      	movs	r1, #1
 8002518:	f002 f804 	bl	8004524 <USB_EP0_OutStart>
 800251c:	e006      	b.n	800252c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	441a      	add	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fe36 	bl	80021a4 <HAL_PCD_DataOutStageCallback>
 8002538:	e046      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d124      	bne.n	800258c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255e:	6093      	str	r3, [r2, #8]
 8002560:	e032      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002578:	461a      	mov	r2, r3
 800257a:	2320      	movs	r3, #32
 800257c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fe0d 	bl	80021a4 <HAL_PCD_DataOutStageCallback>
 800258a:	e01d      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d114      	bne.n	80025bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d108      	bne.n	80025bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025b4:	461a      	mov	r2, r3
 80025b6:	2100      	movs	r1, #0
 80025b8:	f001 ffb4 	bl	8004524 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fdee 	bl	80021a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	4f54300a 	.word	0x4f54300a
 80025d8:	4f54310a 	.word	0x4f54310a

080025dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	333c      	adds	r3, #60	; 0x3c
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <PCD_EP_OutSetupPacket_int+0x88>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d90e      	bls.n	8002630 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fdcf 	bl	80021d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <PCD_EP_OutSetupPacket_int+0x88>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d90c      	bls.n	8002658 <PCD_EP_OutSetupPacket_int+0x7c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002650:	461a      	mov	r2, r3
 8002652:	2101      	movs	r1, #1
 8002654:	f001 ff66 	bl	8004524 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	4f54300a 	.word	0x4f54300a

08002668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	f043 0303 	orr.w	r3, r3, #3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fc12 	bl	8000fe0 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fc0e 	bl	8000fe0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f889 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fa8e 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08007240 	.word	0x08007240
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d129      	bne.n	80028fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	481f      	ldr	r0, [pc, #124]	; (800295c <HAL_RCC_MCOConfig+0xc8>)
 80028e0:	f7fe fc90 	bl	8001204 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	4919      	ldr	r1, [pc, #100]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80028f8:	e029      	b.n	800294e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	480b      	ldr	r0, [pc, #44]	; (8002960 <HAL_RCC_MCOConfig+0xcc>)
 8002934:	f7fe fc66 	bl	8001204 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	00d9      	lsls	r1, r3, #3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	430b      	orrs	r3, r1
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_MCOConfig+0xc4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
}
 800294e:	bf00      	nop
 8002950:	3730      	adds	r7, #48	; 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020800 	.word	0x40020800

08002964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002968:	b094      	sub	sp, #80	; 0x50
 800296a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	2300      	movs	r3, #0
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002974:	2300      	movs	r3, #0
 8002976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800297c:	4b79      	ldr	r3, [pc, #484]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d00d      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002988:	2b08      	cmp	r3, #8
 800298a:	f200 80e1 	bhi.w	8002b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x34>
 8002992:	2b04      	cmp	r3, #4
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x3a>
 8002996:	e0db      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800299c:	e0db      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299e:	4b73      	ldr	r3, [pc, #460]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a2:	e0d8      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ba:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	2200      	movs	r2, #0
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
 80029ce:	2300      	movs	r3, #0
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
 80029d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029d6:	4622      	mov	r2, r4
 80029d8:	462b      	mov	r3, r5
 80029da:	f04f 0000 	mov.w	r0, #0
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	0159      	lsls	r1, r3, #5
 80029e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e8:	0150      	lsls	r0, r2, #5
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4621      	mov	r1, r4
 80029f0:	1a51      	subs	r1, r2, r1
 80029f2:	6139      	str	r1, [r7, #16]
 80029f4:	4629      	mov	r1, r5
 80029f6:	eb63 0301 	sbc.w	r3, r3, r1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a08:	4659      	mov	r1, fp
 8002a0a:	018b      	lsls	r3, r1, #6
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a12:	4651      	mov	r1, sl
 8002a14:	018a      	lsls	r2, r1, #6
 8002a16:	4651      	mov	r1, sl
 8002a18:	ebb2 0801 	subs.w	r8, r2, r1
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a36:	4690      	mov	r8, r2
 8002a38:	4699      	mov	r9, r3
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	eb18 0303 	adds.w	r3, r8, r3
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	462b      	mov	r3, r5
 8002a44:	eb49 0303 	adc.w	r3, r9, r3
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a56:	4629      	mov	r1, r5
 8002a58:	024b      	lsls	r3, r1, #9
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a60:	4621      	mov	r1, r4
 8002a62:	024a      	lsls	r2, r1, #9
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a74:	f7fd fbcc 	bl	8000210 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a80:	e058      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	f04f 0000 	mov.w	r0, #0
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	0159      	lsls	r1, r3, #5
 8002aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aae:	0150      	lsls	r0, r2, #5
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aba:	4649      	mov	r1, r9
 8002abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	00eb      	lsls	r3, r5, #3
 8002ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aea:	00e2      	lsls	r2, r4, #3
 8002aec:	4614      	mov	r4, r2
 8002aee:	461d      	mov	r5, r3
 8002af0:	4643      	mov	r3, r8
 8002af2:	18e3      	adds	r3, r4, r3
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	464b      	mov	r3, r9
 8002af8:	eb45 0303 	adc.w	r3, r5, r3
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	028b      	lsls	r3, r1, #10
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b14:	4621      	mov	r1, r4
 8002b16:	028a      	lsls	r2, r1, #10
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	61fa      	str	r2, [r7, #28]
 8002b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b28:	f7fd fb72 	bl	8000210 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0c1b      	lsrs	r3, r3, #16
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b4e:	e002      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3750      	adds	r7, #80	; 0x50
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b8c:	f7ff fff0 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0b5b      	lsrs	r3, r3, #13
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	08007250 	.word	0x08007250

08002bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_RCC_GetClockConfig+0x60>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0207 	and.w	r2, r3, #7
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c34:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4984      	ldr	r1, [pc, #528]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002c52:	2301      	movs	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c62:	4b7c      	ldr	r3, [pc, #496]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c68:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4978      	ldr	r1, [pc, #480]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8083 	beq.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f991 	bl	8000fe0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe f98d 	bl	8000fe0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e162      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cd4:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02f      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d06:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d08:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d14:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d114      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe f95b 	bl	8000fe0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe f957 	bl	8000fe0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e12a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d5c:	d10d      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	4938      	ldr	r1, [pc, #224]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
 8002d78:	e005      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d92:	4930      	ldr	r1, [pc, #192]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dac:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	4922      	ldr	r1, [pc, #136]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	491a      	ldr	r1, [pc, #104]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d004      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	f040 8091 	bne.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fe f8d2 	bl	8000fe0 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e3e:	e013      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e40:	f7fe f8ce 	bl	8000fe0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d90c      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0a3      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42470e40 	.word	0x42470e40
 8002e60:	424711e0 	.word	0x424711e0
 8002e64:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e68:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002e74:	4a4c      	ldr	r2, [pc, #304]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed6:	d110      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	492c      	ldr	r1, [pc, #176]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	019b      	lsls	r3, r3, #6
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	071b      	lsls	r3, r3, #28
 8002f20:	4920      	ldr	r1, [pc, #128]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe f857 	bl	8000fe0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f36:	f7fe f853 	bl	8000fe0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e028      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	424710d8 	.word	0x424710d8
 8002fac:	42470068 	.word	0x42470068

08002fb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e273      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d075      	beq.n	80030ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d112      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d10b      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x108>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d157      	bne.n	80030b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e24e      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x74>
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x98>
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6f      	ldr	r2, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6c      	ldr	r2, [pc, #432]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a68      	ldr	r2, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd ffba 	bl	8000fe0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd ffb6 	bl	8000fe0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e213      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xc0>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fd ffa6 	bl	8000fe0 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7fd ffa2 	bl	8000fe0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1ff      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b51      	ldr	r3, [pc, #324]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0xe8>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d063      	beq.n	800318e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d11c      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e1d3      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4937      	ldr	r1, [pc, #220]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e03a      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fd ff5b 	bl	8000fe0 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312e:	f7fd ff57 	bl	8000fe0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1b4      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4925      	ldr	r1, [pc, #148]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e015      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd ff3a 	bl	8000fe0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003170:	f7fd ff36 	bl	8000fe0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e193      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d036      	beq.n	8003208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd ff1a 	bl	8000fe0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fd ff16 	bl	8000fe0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e173      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x200>
 80031ce:	e01b      	b.n	8003208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fd ff03 	bl	8000fe0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	e00e      	b.n	80031fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031de:	f7fd feff 	bl	8000fe0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d907      	bls.n	80031fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e15c      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470000 	.word	0x42470000
 80031f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b8a      	ldr	r3, [pc, #552]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ea      	bne.n	80031de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8097 	beq.w	8003344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b83      	ldr	r3, [pc, #524]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a7e      	ldr	r2, [pc, #504]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b7c      	ldr	r3, [pc, #496]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003246:	4b79      	ldr	r3, [pc, #484]	; (800342c <HAL_RCC_OscConfig+0x47c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x47c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a75      	ldr	r2, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x47c>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325e:	f7fd febf 	bl	8000fe0 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003266:	f7fd febb 	bl	8000fe0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e118      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_OscConfig+0x47c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x2ea>
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a65      	ldr	r2, [pc, #404]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e01c      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x30c>
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a60      	ldr	r2, [pc, #384]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	4b5e      	ldr	r3, [pc, #376]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 80032bc:	4b5a      	ldr	r3, [pc, #360]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a59      	ldr	r2, [pc, #356]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
 80032c8:	4b57      	ldr	r3, [pc, #348]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fd fe80 	bl	8000fe0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fd fe7c 	bl	8000fe0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0d7      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ee      	beq.n	80032e4 <HAL_RCC_OscConfig+0x334>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fd fe6a 	bl	8000fe0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fd fe66 	bl	8000fe0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0c1      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ee      	bne.n	8003310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003342:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80ad 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334e:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d060      	beq.n	800341c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d145      	bne.n	80033ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_OscConfig+0x480>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fe3a 	bl	8000fe0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fd fe36 	bl	8000fe0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e093      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	491b      	ldr	r1, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_RCC_OscConfig+0x480>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fe0b 	bl	8000fe0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fd fe07 	bl	8000fe0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e064      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x41e>
 80033ec:	e05c      	b.n	80034a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCC_OscConfig+0x480>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fdf4 	bl	8000fe0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd fdf0 	bl	8000fe0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04d      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x44c>
 800341a:	e045      	b.n	80034a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d107      	bne.n	8003434 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e040      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
 8003428:	40023800 	.word	0x40023800
 800342c:	40007000 	.word	0x40007000
 8003430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d030      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d129      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d122      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346c:	4293      	cmp	r3, r2
 800346e:	d119      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	3b01      	subs	r3, #1
 800347e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d10f      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e041      	b.n	800354e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f839 	bl	8003556 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 f9d8 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04e      	b.n	8003622 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_TIM_Base_Start_IT+0xc4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d01d      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_Base_Start_IT+0xc8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_TIM_Base_Start_IT+0xcc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_TIM_Base_Start_IT+0xd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_TIM_Base_Start_IT+0xd8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_TIM_Base_Start_IT+0xdc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d010      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	e007      	b.n	8003620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40010400 	.word	0x40010400
 8003644:	40014000 	.word	0x40014000
 8003648:	40001800 	.word	0x40001800

0800364c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0202 	mvn.w	r2, #2
 8003678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8ee 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8e0 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8f1 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0204 	mvn.w	r2, #4
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8c4 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b6 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8c7 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0208 	mvn.w	r2, #8
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f89a 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f88c 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f89d 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b10      	cmp	r3, #16
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f870 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f862 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f873 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0201 	mvn.w	r2, #1
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fa32 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f902 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f838 	bl	8003898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b20      	cmp	r3, #32
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b20      	cmp	r3, #32
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0220 	mvn.w	r2, #32
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8cc 	bl	80039ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d00f      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3d      	ldr	r2, [pc, #244]	; (80039c4 <TIM_Base_SetConfig+0x118>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00b      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <TIM_Base_SetConfig+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <TIM_Base_SetConfig+0x120>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d108      	bne.n	80038fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d027      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <TIM_Base_SetConfig+0x118>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d023      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2b      	ldr	r2, [pc, #172]	; (80039c8 <TIM_Base_SetConfig+0x11c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <TIM_Base_SetConfig+0x120>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d017      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <TIM_Base_SetConfig+0x128>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <TIM_Base_SetConfig+0x12c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00f      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a26      	ldr	r2, [pc, #152]	; (80039dc <TIM_Base_SetConfig+0x130>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <TIM_Base_SetConfig+0x134>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <TIM_Base_SetConfig+0x138>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <TIM_Base_SetConfig+0x13c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_Base_SetConfig+0xf8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	615a      	str	r2, [r3, #20]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40010400 	.word	0x40010400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	40001800 	.word	0x40001800
 80039e4:	40001c00 	.word	0x40001c00
 80039e8:	40002000 	.word	0x40002000

080039ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a14:	b084      	sub	sp, #16
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	f107 001c 	add.w	r0, r7, #28
 8003a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d122      	bne.n	8003a72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fdba 	bl	80045e0 <USB_CoreReset>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e01a      	b.n	8003aa8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fdae 	bl	80045e0 <USB_CoreReset>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9a:	e005      	b.n	8003aa8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10b      	bne.n	8003ac6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f043 0206 	orr.w	r2, r3, #6
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	4770      	bx	lr
	...

08003ad8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d165      	bne.n	8003bb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <USB_SetTurnaroundTime+0x11c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d906      	bls.n	8003b02 <USB_SetTurnaroundTime+0x2a>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4a40      	ldr	r2, [pc, #256]	; (8003bf8 <USB_SetTurnaroundTime+0x120>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d202      	bcs.n	8003b02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003afc:	230f      	movs	r3, #15
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e062      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <USB_SetTurnaroundTime+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d306      	bcc.n	8003b18 <USB_SetTurnaroundTime+0x40>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <USB_SetTurnaroundTime+0x124>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d202      	bcs.n	8003b18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b12:	230e      	movs	r3, #14
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e057      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <USB_SetTurnaroundTime+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d306      	bcc.n	8003b2e <USB_SetTurnaroundTime+0x56>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4a37      	ldr	r2, [pc, #220]	; (8003c00 <USB_SetTurnaroundTime+0x128>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d202      	bcs.n	8003b2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b28:	230d      	movs	r3, #13
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e04c      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <USB_SetTurnaroundTime+0x128>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d306      	bcc.n	8003b44 <USB_SetTurnaroundTime+0x6c>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4a32      	ldr	r2, [pc, #200]	; (8003c04 <USB_SetTurnaroundTime+0x12c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d802      	bhi.n	8003b44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b3e:	230c      	movs	r3, #12
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e041      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <USB_SetTurnaroundTime+0x12c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d906      	bls.n	8003b5a <USB_SetTurnaroundTime+0x82>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4a2e      	ldr	r2, [pc, #184]	; (8003c08 <USB_SetTurnaroundTime+0x130>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d802      	bhi.n	8003b5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b54:	230b      	movs	r3, #11
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e036      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <USB_SetTurnaroundTime+0x130>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d906      	bls.n	8003b70 <USB_SetTurnaroundTime+0x98>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <USB_SetTurnaroundTime+0x134>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d802      	bhi.n	8003b70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e02b      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <USB_SetTurnaroundTime+0x134>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d906      	bls.n	8003b86 <USB_SetTurnaroundTime+0xae>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <USB_SetTurnaroundTime+0x138>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d202      	bcs.n	8003b86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b80:	2309      	movs	r3, #9
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e020      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <USB_SetTurnaroundTime+0x138>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d306      	bcc.n	8003b9c <USB_SetTurnaroundTime+0xc4>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <USB_SetTurnaroundTime+0x13c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d802      	bhi.n	8003b9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b96:	2308      	movs	r3, #8
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e015      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <USB_SetTurnaroundTime+0x13c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d906      	bls.n	8003bb2 <USB_SetTurnaroundTime+0xda>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <USB_SetTurnaroundTime+0x140>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d202      	bcs.n	8003bb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bac:	2307      	movs	r3, #7
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e00a      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e007      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bbe:	2309      	movs	r3, #9
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e001      	b.n	8003bc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bc4:	2309      	movs	r3, #9
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	029b      	lsls	r3, r3, #10
 8003bdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	00d8acbf 	.word	0x00d8acbf
 8003bf8:	00e4e1c0 	.word	0x00e4e1c0
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	01067380 	.word	0x01067380
 8003c04:	011a499f 	.word	0x011a499f
 8003c08:	01312cff 	.word	0x01312cff
 8003c0c:	014ca43f 	.word	0x014ca43f
 8003c10:	016e3600 	.word	0x016e3600
 8003c14:	01a6ab1f 	.word	0x01a6ab1f
 8003c18:	01e84800 	.word	0x01e84800

08003c1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 0201 	bic.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d115      	bne.n	8003c8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7fd f9c3 	bl	8000ff8 <HAL_Delay>
      ms++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3301      	adds	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fc21 	bl	80044c0 <USB_GetMode>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d01e      	beq.n	8003cc2 <USB_SetCurrentMode+0x84>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b31      	cmp	r3, #49	; 0x31
 8003c88:	d9f0      	bls.n	8003c6c <USB_SetCurrentMode+0x2e>
 8003c8a:	e01a      	b.n	8003cc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d115      	bne.n	8003cbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7fd f9aa 	bl	8000ff8 <HAL_Delay>
      ms++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc08 	bl	80044c0 <USB_GetMode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <USB_SetCurrentMode+0x84>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b31      	cmp	r3, #49	; 0x31
 8003cba:	d9f0      	bls.n	8003c9e <USB_SetCurrentMode+0x60>
 8003cbc:	e001      	b.n	8003cc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e005      	b.n	8003cce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b32      	cmp	r3, #50	; 0x32
 8003cc6:	d101      	bne.n	8003ccc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cd8:	b084      	sub	sp, #16
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	e009      	b.n	8003d0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3340      	adds	r3, #64	; 0x40
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0e      	cmp	r3, #14
 8003d10:	d9f2      	bls.n	8003cf8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11c      	bne.n	8003d52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e005      	b.n	8003d5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d64:	461a      	mov	r2, r3
 8003d66:	2300      	movs	r3, #0
 8003d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	4619      	mov	r1, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	461a      	mov	r2, r3
 8003d7a:	680b      	ldr	r3, [r1, #0]
 8003d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10c      	bne.n	8003d9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f965 	bl	800405c <USB_SetDevSpeed>
 8003d92:	e008      	b.n	8003da6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d94:	2101      	movs	r1, #1
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f960 	bl	800405c <USB_SetDevSpeed>
 8003d9c:	e003      	b.n	8003da6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f95b 	bl	800405c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003da6:	2110      	movs	r1, #16
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8f3 	bl	8003f94 <USB_FlushTxFifo>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f91f 	bl	8003ffc <USB_FlushRxFifo>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	461a      	mov	r2, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e043      	b.n	8003e7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e08:	d118      	bne.n	8003e3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e013      	b.n	8003e4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	461a      	mov	r2, r3
 8003e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e008      	b.n	8003e4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3301      	adds	r3, #1
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3b7      	bcc.n	8003df2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e043      	b.n	8003f10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9e:	d118      	bne.n	8003ed2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e013      	b.n	8003ee4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e008      	b.n	8003ee4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d3b7      	bcc.n	8003e88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <USB_DevInit+0x2b8>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f8c:	b004      	add	sp, #16
 8003f8e:	4770      	bx	lr
 8003f90:	803c3800 	.word	0x803c3800

08003f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <USB_FlushTxFifo+0x64>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e01b      	b.n	8003fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	daf2      	bge.n	8003fa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <USB_FlushTxFifo+0x64>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e006      	b.n	8003fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d0f0      	beq.n	8003fcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	00030d40 	.word	0x00030d40

08003ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a11      	ldr	r2, [pc, #68]	; (8004058 <USB_FlushRxFifo+0x5c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e018      	b.n	800404c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	daf2      	bge.n	8004008 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2210      	movs	r2, #16
 800402a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <USB_FlushRxFifo+0x5c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e006      	b.n	800404c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d0f0      	beq.n	800402c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	00030d40 	.word	0x00030d40

0800405c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]
 80040b2:	e00a      	b.n	80040ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d002      	beq.n	80040c0 <USB_GetDevSpeed+0x32>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d102      	bne.n	80040c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040c0:	2302      	movs	r3, #2
 80040c2:	75fb      	strb	r3, [r7, #23]
 80040c4:	e001      	b.n	80040ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80040c6:	230f      	movs	r3, #15
 80040c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d14a      	bne.n	800418c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800410a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800410e:	f040 8086 	bne.w	800421e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004134:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f242 7210 	movw	r2, #10000	; 0x2710
 8004166:	4293      	cmp	r3, r2
 8004168:	d902      	bls.n	8004170 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
          break;
 800416e:	e056      	b.n	800421e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004188:	d0e7      	beq.n	800415a <USB_EPStopXfer+0x82>
 800418a:	e048      	b.n	800421e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a4:	d13b      	bne.n	800421e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d902      	bls.n	8004204 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
          break;
 8004202:	e00c      	b.n	800421e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800421c:	d0e7      	beq.n	80041ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004220:	4618      	mov	r0, r3
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	460b      	mov	r3, r1
 800423c:	71fb      	strb	r3, [r7, #7]
 800423e:	4613      	mov	r3, r2
 8004240:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800424a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d123      	bne.n	800429a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004252:	88bb      	ldrh	r3, [r7, #4]
 8004254:	3303      	adds	r3, #3
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	e018      	b.n	8004292 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	031a      	lsls	r2, r3, #12
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	461a      	mov	r2, r3
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3301      	adds	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3301      	adds	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	3301      	adds	r3, #1
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3e2      	bcc.n	8004260 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3724      	adds	r7, #36	; 0x24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b08b      	sub	sp, #44	; 0x2c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	089b      	lsrs	r3, r3, #2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	e014      	b.n	80042fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	601a      	str	r2, [r3, #0]
    pDest++;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	3301      	adds	r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	3301      	adds	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	3301      	adds	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	3301      	adds	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	3301      	adds	r3, #1
 80042fc:	623b      	str	r3, [r7, #32]
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	429a      	cmp	r2, r3
 8004304:	d3e6      	bcc.n	80042d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004306:	8bfb      	ldrh	r3, [r7, #30]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01e      	beq.n	800434a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004316:	461a      	mov	r2, r3
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	701a      	strb	r2, [r3, #0]
      i++;
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	3301      	adds	r3, #1
 8004336:	623b      	str	r3, [r7, #32]
      pDest++;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	3301      	adds	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800433e:	8bfb      	ldrh	r3, [r7, #30]
 8004340:	3b01      	subs	r3, #1
 8004342:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004344:	8bfb      	ldrh	r3, [r7, #30]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ea      	bne.n	8004320 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800434c:	4618      	mov	r0, r3
 800434e:	372c      	adds	r7, #44	; 0x2c
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	0c1b      	lsrs	r3, r3, #16
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	b29b      	uxth	r3, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
 8004494:	01db      	lsls	r3, r3, #7
 8004496:	b2db      	uxtb	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044b2:	68bb      	ldr	r3, [r7, #8]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0301 	and.w	r3, r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	460b      	mov	r3, r1
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	333c      	adds	r3, #60	; 0x3c
 800453a:	3304      	adds	r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4a26      	ldr	r2, [pc, #152]	; (80045dc <USB_EP0_OutStart+0xb8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d90a      	bls.n	800455e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004558:	d101      	bne.n	800455e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e037      	b.n	80045ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458c:	f043 0318 	orr.w	r3, r3, #24
 8004590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80045a6:	7afb      	ldrb	r3, [r7, #11]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10f      	bne.n	80045cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80045ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	4f54300a 	.word	0x4f54300a

080045e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a13      	ldr	r2, [pc, #76]	; (8004644 <USB_CoreReset+0x64>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e01b      	b.n	8004636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	daf2      	bge.n	80045ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3301      	adds	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <USB_CoreReset+0x64>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d0f0      	beq.n	8004616 <USB_CoreReset+0x36>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	00030d40 	.word	0x00030d40

08004648 <__NVIC_SetPriority>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	; (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	; (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <SysTick_Handler+0x1c>)
 80046a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046a4:	f001 fcfe 	bl	80060a4 <xTaskGetSchedulerState>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046ae:	f002 fae3 	bl	8006c78 <xPortSysTickHandler>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000e010 	.word	0xe000e010

080046bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046c0:	2100      	movs	r1, #0
 80046c2:	f06f 0004 	mvn.w	r0, #4
 80046c6:	f7ff ffbf 	bl	8004648 <__NVIC_SetPriority>
#endif
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d6:	f3ef 8305 	mrs	r3, IPSR
 80046da:	603b      	str	r3, [r7, #0]
  return(result);
 80046dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046e2:	f06f 0305 	mvn.w	r3, #5
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e00c      	b.n	8004704 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <osKernelInitialize+0x44>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <osKernelInitialize+0x44>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e002      	b.n	8004704 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004704:	687b      	ldr	r3, [r7, #4]
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000588 	.word	0x20000588

08004718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471e:	f3ef 8305 	mrs	r3, IPSR
 8004722:	603b      	str	r3, [r7, #0]
  return(result);
 8004724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800472a:	f06f 0305 	mvn.w	r3, #5
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	e010      	b.n	8004754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <osKernelStart+0x48>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d109      	bne.n	800474e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800473a:	f7ff ffbf 	bl	80046bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800473e:	4b08      	ldr	r3, [pc, #32]	; (8004760 <osKernelStart+0x48>)
 8004740:	2202      	movs	r2, #2
 8004742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004744:	f001 f866 	bl	8005814 <vTaskStartScheduler>
      stat = osOK;
 8004748:	2300      	movs	r3, #0
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	e002      	b.n	8004754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004754:	687b      	ldr	r3, [r7, #4]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000588 	.word	0x20000588

08004764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af04      	add	r7, sp, #16
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004774:	f3ef 8305 	mrs	r3, IPSR
 8004778:	617b      	str	r3, [r7, #20]
  return(result);
 800477a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800477c:	2b00      	cmp	r3, #0
 800477e:	d17e      	bne.n	800487e <osThreadNew+0x11a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d07b      	beq.n	800487e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800478a:	2318      	movs	r3, #24
 800478c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d045      	beq.n	800482a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <osThreadNew+0x48>
        name = attr->name;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <osThreadNew+0x6e>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b38      	cmp	r3, #56	; 0x38
 80047c4:	d805      	bhi.n	80047d2 <osThreadNew+0x6e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <osThreadNew+0x72>
        return (NULL);
 80047d2:	2300      	movs	r3, #0
 80047d4:	e054      	b.n	8004880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <osThreadNew+0xa8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b5b      	cmp	r3, #91	; 0x5b
 80047f4:	d90a      	bls.n	800480c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <osThreadNew+0xa8>
        mem = 1;
 8004806:	2301      	movs	r3, #1
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e010      	b.n	800482e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10c      	bne.n	800482e <osThreadNew+0xca>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <osThreadNew+0xca>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <osThreadNew+0xca>
          mem = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e001      	b.n	800482e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d110      	bne.n	8004856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800483c:	9202      	str	r2, [sp, #8]
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6a3a      	ldr	r2, [r7, #32]
 8004848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fe0c 	bl	8005468 <xTaskCreateStatic>
 8004850:	4603      	mov	r3, r0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e013      	b.n	800487e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d110      	bne.n	800487e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	b29a      	uxth	r2, r3
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fe57 	bl	8005522 <xTaskCreate>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <osThreadNew+0x11a>
            hTask = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800487e:	693b      	ldr	r3, [r7, #16]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004890:	f3ef 8305 	mrs	r3, IPSR
 8004894:	60bb      	str	r3, [r7, #8]
  return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <osDelay+0x1c>
    stat = osErrorISR;
 800489c:	f06f 0305 	mvn.w	r3, #5
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e007      	b.n	80048b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ff7c 	bl	80057ac <vTaskDelay>
    }
  }

  return (stat);
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <vApplicationGetIdleTaskMemory+0x2c>)
 80048d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vApplicationGetIdleTaskMemory+0x30>)
 80048d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2280      	movs	r2, #128	; 0x80
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	2000058c 	.word	0x2000058c
 80048f0:	200005e8 	.word	0x200005e8

080048f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <vApplicationGetTimerTaskMemory+0x2c>)
 8004904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a06      	ldr	r2, [pc, #24]	; (8004924 <vApplicationGetTimerTaskMemory+0x30>)
 800490a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	200007e8 	.word	0x200007e8
 8004924:	20000844 	.word	0x20000844

08004928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f103 0208 	add.w	r2, r3, #8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f103 0208 	add.w	r2, r3, #8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f103 0208 	add.w	r2, r3, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e0:	d103      	bne.n	80049ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e00c      	b.n	8004a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3308      	adds	r3, #8
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e002      	b.n	80049f8 <vListInsert+0x2e>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d2f6      	bcs.n	80049f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6852      	ldr	r2, [r2, #4]
 8004a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d103      	bne.n	8004a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004aba:	f002 f84b 	bl	8006b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	3b01      	subs	r3, #1
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	22ff      	movs	r2, #255	; 0xff
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d114      	bne.n	8004b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01a      	beq.n	8004b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3310      	adds	r3, #16
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 f903 	bl	8005d28 <xTaskRemoveFromEventList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d012      	beq.n	8004b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <xQueueGenericReset+0xcc>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e009      	b.n	8004b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3310      	adds	r3, #16
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fef2 	bl	8004928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3324      	adds	r3, #36	; 0x24
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff feed 	bl	8004928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b4e:	f002 f831 	bl	8006bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	; 0x38
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <xQueueGenericCreateStatic+0x52>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <xQueueGenericCreateStatic+0x56>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueGenericCreateStatic+0x58>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	623b      	str	r3, [r7, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xQueueGenericCreateStatic+0x7e>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <xQueueGenericCreateStatic+0x82>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueGenericCreateStatic+0x84>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61fb      	str	r3, [r7, #28]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bfe:	2350      	movs	r3, #80	; 0x50
 8004c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b50      	cmp	r3, #80	; 0x50
 8004c06:	d00a      	beq.n	8004c1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	61bb      	str	r3, [r7, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f805 	bl	8004c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3730      	adds	r7, #48	; 0x30
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e002      	b.n	8004c72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c7e:	2101      	movs	r1, #1
 8004c80:	69b8      	ldr	r0, [r7, #24]
 8004c82:	f7ff ff05 	bl	8004a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	; 0x38
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <xQueueGenericSend+0x32>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <xQueueGenericSend+0x40>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <xQueueGenericSend+0x44>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <xQueueGenericSend+0x46>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x6e>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericSend+0x72>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericSend+0x74>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d26:	f001 f9bd 	bl	80060a4 <xTaskGetSchedulerState>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <xQueueGenericSend+0x9e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSend+0xa2>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSend+0xa4>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61fb      	str	r3, [r7, #28]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d56:	f001 fefd 	bl	8006b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSend+0xd4>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d129      	bne.n	8004dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	f000 fa0b 	bl	800518c <prvCopyDataToQueue>
 8004d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	3324      	adds	r3, #36	; 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 ffcf 	bl	8005d28 <xTaskRemoveFromEventList>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d90:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	e00a      	b.n	8004db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db8:	f001 fefc 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e063      	b.n	8004e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dc6:	f001 fef5 	bl	8006bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e05c      	b.n	8004e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f809 	bl	8005df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de2:	f001 fee7 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de6:	f000 fd7b 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dea:	f001 feb3 	bl	8006b54 <vPortEnterCritical>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfa:	d103      	bne.n	8004e04 <xQueueGenericSend+0x16c>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x182>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e1a:	f001 fecb 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1e:	1d3a      	adds	r2, r7, #4
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fff8 	bl	8005e1c <xTaskCheckForTimeOut>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d124      	bne.n	8004e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e34:	f000 faa2 	bl	800537c <prvIsQueueFull>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	3310      	adds	r3, #16
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ff1e 	bl	8005c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4e:	f000 fa2d 	bl	80052ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f000 fd53 	bl	80058fc <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af7c 	bne.w	8004d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	e772      	b.n	8004d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e72:	f000 fa1b 	bl	80052ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e76:	f000 fd41 	bl	80058fc <xTaskResumeAll>
 8004e7a:	e76c      	b.n	8004d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7e:	f000 fa15 	bl	80052ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e82:	f000 fd3b 	bl	80058fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3738      	adds	r7, #56	; 0x38
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	; 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d103      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x3c>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <xQueueGenericSendFromISR+0x40>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <xQueueGenericSendFromISR+0x42>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d103      	bne.n	8004efe <xQueueGenericSendFromISR+0x6a>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <xQueueGenericSendFromISR+0x6e>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueGenericSendFromISR+0x70>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	623b      	str	r3, [r7, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f1e:	f001 fefb 	bl	8006d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f22:	f3ef 8211 	mrs	r2, BASEPRI
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <xQueueGenericSendFromISR+0xbc>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d12f      	bne.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f66:	f000 f911 	bl	800518c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f72:	d112      	bne.n	8004f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fed1 	bl	8005d28 <xTaskRemoveFromEventList>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e007      	b.n	8004faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	b25a      	sxtb	r2, r3
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fae:	e001      	b.n	8004fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	; 0x30
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <xQueueReceive+0x30>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	623b      	str	r3, [r7, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueReceive+0x3e>
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueReceive+0x42>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueReceive+0x44>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xQueueReceive+0x5e>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	61fb      	str	r3, [r7, #28]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800502a:	f001 f83b 	bl	80060a4 <xTaskGetSchedulerState>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <xQueueReceive+0x6e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <xQueueReceive+0x72>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueReceive+0x74>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <xQueueReceive+0x8e>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61bb      	str	r3, [r7, #24]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800505a:	f001 fd7b 	bl	8006b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01f      	beq.n	80050aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506e:	f000 f8f7 	bl	8005260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00f      	beq.n	80050a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	3310      	adds	r3, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fe4e 	bl	8005d28 <xTaskRemoveFromEventList>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005092:	4b3d      	ldr	r3, [pc, #244]	; (8005188 <xQueueReceive+0x1bc>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050a2:	f001 fd87 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e069      	b.n	800517e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050b0:	f001 fd80 	bl	8006bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e062      	b.n	800517e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fe94 	bl	8005df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050cc:	f001 fd72 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d0:	f000 fc06 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050d4:	f001 fd3e 	bl	8006b54 <vPortEnterCritical>
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e4:	d103      	bne.n	80050ee <xQueueReceive+0x122>
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f4:	b25b      	sxtb	r3, r3
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d103      	bne.n	8005104 <xQueueReceive+0x138>
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005104:	f001 fd56 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005108:	1d3a      	adds	r2, r7, #4
 800510a:	f107 0310 	add.w	r3, r7, #16
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe83 	bl	8005e1c <xTaskCheckForTimeOut>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d123      	bne.n	8005164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800511c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511e:	f000 f917 	bl	8005350 <prvIsQueueEmpty>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d017      	beq.n	8005158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	3324      	adds	r3, #36	; 0x24
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fda9 	bl	8005c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005138:	f000 f8b8 	bl	80052ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800513c:	f000 fbde 	bl	80058fc <xTaskResumeAll>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d189      	bne.n	800505a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xQueueReceive+0x1bc>)
 8005148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	e780      	b.n	800505a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800515a:	f000 f8a7 	bl	80052ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800515e:	f000 fbcd 	bl	80058fc <xTaskResumeAll>
 8005162:	e77a      	b.n	800505a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005166:	f000 f8a1 	bl	80052ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800516a:	f000 fbc7 	bl	80058fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005170:	f000 f8ee 	bl	8005350 <prvIsQueueEmpty>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f43f af6f 	beq.w	800505a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800517c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d14d      	bne.n	800524e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff92 	bl	80060e0 <xTaskPriorityDisinherit>
 80051bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	e043      	b.n	800524e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d119      	bne.n	8005200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6858      	ldr	r0, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	461a      	mov	r2, r3
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	f001 fff4 	bl	80071c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	441a      	add	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d32b      	bcc.n	800524e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	e026      	b.n	800524e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68d8      	ldr	r0, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	461a      	mov	r2, r3
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	f001 ffda 	bl	80071c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	425b      	negs	r3, r3
 800521a:	441a      	add	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d207      	bcs.n	800523c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	425b      	negs	r3, r3
 8005236:	441a      	add	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d105      	bne.n	800524e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3b01      	subs	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005256:	697b      	ldr	r3, [r7, #20]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	441a      	add	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d303      	bcc.n	8005294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68d9      	ldr	r1, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	461a      	mov	r2, r3
 800529e:	6838      	ldr	r0, [r7, #0]
 80052a0:	f001 ff90 	bl	80071c4 <memcpy>
	}
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052b4:	f001 fc4e 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c0:	e011      	b.n	80052e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d012      	beq.n	80052f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fd2a 	bl	8005d28 <xTaskRemoveFromEventList>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052da:	f000 fe01 	bl	8005ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dce9      	bgt.n	80052c2 <prvUnlockQueue+0x16>
 80052ee:	e000      	b.n	80052f2 <prvUnlockQueue+0x46>
					break;
 80052f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 fc5b 	bl	8006bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052fe:	f001 fc29 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800530a:	e011      	b.n	8005330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3310      	adds	r3, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fd05 	bl	8005d28 <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005324:	f000 fddc 	bl	8005ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	3b01      	subs	r3, #1
 800532c:	b2db      	uxtb	r3, r3
 800532e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005334:	2b00      	cmp	r3, #0
 8005336:	dce9      	bgt.n	800530c <prvUnlockQueue+0x60>
 8005338:	e000      	b.n	800533c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800533a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	22ff      	movs	r2, #255	; 0xff
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005344:	f001 fc36 	bl	8006bb4 <vPortExitCritical>
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005358:	f001 fbfc 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e001      	b.n	800536e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800536e:	f001 fc21 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005384:	f001 fbe6 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	429a      	cmp	r2, r3
 8005392:	d102      	bne.n	800539a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e001      	b.n	800539e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800539e:	f001 fc09 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e014      	b.n	80053e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053bc:	4a0f      	ldr	r2, [pc, #60]	; (80053fc <vQueueAddToRegistry+0x50>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053c8:	490c      	ldr	r1, [pc, #48]	; (80053fc <vQueueAddToRegistry+0x50>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <vQueueAddToRegistry+0x50>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053de:	e006      	b.n	80053ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b07      	cmp	r3, #7
 80053ea:	d9e7      	bls.n	80053bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000c44 	.word	0x20000c44

08005400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005410:	f001 fba0 	bl	8006b54 <vPortEnterCritical>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541a:	b25b      	sxtb	r3, r3
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005420:	d103      	bne.n	800542a <vQueueWaitForMessageRestricted+0x2a>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005430:	b25b      	sxtb	r3, r3
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005436:	d103      	bne.n	8005440 <vQueueWaitForMessageRestricted+0x40>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005440:	f001 fbb8 	bl	8006bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fc3b 	bl	8005cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff ff26 	bl	80052ac <prvUnlockQueue>
	}
 8005460:	bf00      	nop
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af04      	add	r7, sp, #16
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	623b      	str	r3, [r7, #32]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xTaskCreateStatic+0x46>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61fb      	str	r3, [r7, #28]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ae:	235c      	movs	r3, #92	; 0x5c
 80054b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b5c      	cmp	r3, #92	; 0x5c
 80054b6:	d00a      	beq.n	80054ce <xTaskCreateStatic+0x66>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61bb      	str	r3, [r7, #24]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01e      	beq.n	8005514 <xTaskCreateStatic+0xac>
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054ee:	2300      	movs	r3, #0
 80054f0:	9303      	str	r3, [sp, #12]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	f107 0314 	add.w	r3, r7, #20
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f850 	bl	80055ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550e:	f000 f8dd 	bl	80056cc <prvAddNewTaskToReadyList>
 8005512:	e001      	b.n	8005518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005518:	697b      	ldr	r3, [r7, #20]
	}
 800551a:	4618      	mov	r0, r3
 800551c:	3728      	adds	r7, #40	; 0x28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08c      	sub	sp, #48	; 0x30
 8005526:	af04      	add	r7, sp, #16
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fc2e 	bl	8006d98 <pvPortMalloc>
 800553c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005544:	205c      	movs	r0, #92	; 0x5c
 8005546:	f001 fc27 	bl	8006d98 <pvPortMalloc>
 800554a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
 8005558:	e005      	b.n	8005566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	f001 fce8 	bl	8006f30 <vPortFree>
 8005560:	e001      	b.n	8005566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	2300      	movs	r3, #0
 8005578:	9303      	str	r3, [sp, #12]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f80e 	bl	80055ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005590:	69f8      	ldr	r0, [r7, #28]
 8005592:	f000 f89b 	bl	80056cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005596:	2301      	movs	r3, #1
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	e002      	b.n	80055a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800559c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055a2:	69bb      	ldr	r3, [r7, #24]
	}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	461a      	mov	r2, r3
 80055c4:	21a5      	movs	r1, #165	; 0xa5
 80055c6:	f001 fdd1 	bl	800716c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	3b01      	subs	r3, #1
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	617b      	str	r3, [r7, #20]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01f      	beq.n	800564a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	e012      	b.n	8005636 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	7819      	ldrb	r1, [r3, #0]
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	3334      	adds	r3, #52	; 0x34
 8005620:	460a      	mov	r2, r1
 8005622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	3301      	adds	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d9e9      	bls.n	8005610 <prvInitialiseNewTask+0x64>
 800563c:	e000      	b.n	8005640 <prvInitialiseNewTask+0x94>
			{
				break;
 800563e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005648:	e003      	b.n	8005652 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	2b37      	cmp	r3, #55	; 0x37
 8005656:	d901      	bls.n	800565c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005658:	2337      	movs	r3, #55	; 0x37
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2200      	movs	r2, #0
 800566c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff f978 	bl	8004968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	3318      	adds	r3, #24
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f973 	bl	8004968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	2200      	movs	r2, #0
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	69b8      	ldr	r0, [r7, #24]
 80056ac:	f001 f928 	bl	8006900 <pxPortInitialiseStack>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c2:	bf00      	nop
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056d4:	f001 fa3e 	bl	8006b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056d8:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <prvAddNewTaskToReadyList+0xc4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <prvAddNewTaskToReadyList+0xc4>)
 80056e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ea:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <prvAddNewTaskToReadyList+0xc4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d110      	bne.n	800571a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056f8:	f000 fc16 	bl	8005f28 <prvInitialiseTaskLists>
 80056fc:	e00d      	b.n	800571a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <prvAddNewTaskToReadyList+0xcc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005706:	4b23      	ldr	r3, [pc, #140]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d802      	bhi.n	800571a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005714:	4a1f      	ldr	r2, [pc, #124]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800571a:	4b20      	ldr	r3, [pc, #128]	; (800579c <prvAddNewTaskToReadyList+0xd0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <prvAddNewTaskToReadyList+0xd0>)
 8005722:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <prvAddNewTaskToReadyList+0xd0>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <prvAddNewTaskToReadyList+0xd4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d903      	bls.n	8005740 <prvAddNewTaskToReadyList+0x74>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <prvAddNewTaskToReadyList+0xd4>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <prvAddNewTaskToReadyList+0xd8>)
 800574e:	441a      	add	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7ff f913 	bl	8004982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800575c:	f001 fa2a 	bl	8006bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <prvAddNewTaskToReadyList+0xcc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	429a      	cmp	r2, r3
 8005774:	d207      	bcs.n	8005786 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvAddNewTaskToReadyList+0xdc>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20001158 	.word	0x20001158
 8005794:	20000c84 	.word	0x20000c84
 8005798:	20001164 	.word	0x20001164
 800579c:	20001174 	.word	0x20001174
 80057a0:	20001160 	.word	0x20001160
 80057a4:	20000c88 	.word	0x20000c88
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <vTaskDelay+0x60>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <vTaskDelay+0x30>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60bb      	str	r3, [r7, #8]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057dc:	f000 f880 	bl	80058e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057e0:	2100      	movs	r1, #0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fcea 	bl	80061bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057e8:	f000 f888 	bl	80058fc <xTaskResumeAll>
 80057ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <vTaskDelay+0x64>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20001180 	.word	0x20001180
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005822:	463a      	mov	r2, r7
 8005824:	1d39      	adds	r1, r7, #4
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f848 	bl	80048c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	9202      	str	r2, [sp, #8]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	460a      	mov	r2, r1
 8005842:	4921      	ldr	r1, [pc, #132]	; (80058c8 <vTaskStartScheduler+0xb4>)
 8005844:	4821      	ldr	r0, [pc, #132]	; (80058cc <vTaskStartScheduler+0xb8>)
 8005846:	f7ff fe0f 	bl	8005468 <xTaskCreateStatic>
 800584a:	4603      	mov	r3, r0
 800584c:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <vTaskStartScheduler+0xbc>)
 800584e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <vTaskStartScheduler+0xbc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e001      	b.n	8005862 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d102      	bne.n	800586e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005868:	f000 fcfc 	bl	8006264 <xTimerCreateTimerTask>
 800586c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d116      	bne.n	80058a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	613b      	str	r3, [r7, #16]
}
 8005886:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <vTaskStartScheduler+0xc0>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800588e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <vTaskStartScheduler+0xc4>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <vTaskStartScheduler+0xc8>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800589c:	f001 f8b8 	bl	8006a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058a0:	e00e      	b.n	80058c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a8:	d10a      	bne.n	80058c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60fb      	str	r3, [r7, #12]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <vTaskStartScheduler+0xaa>
}
 80058c0:	bf00      	nop
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	08007204 	.word	0x08007204
 80058cc:	08005ef9 	.word	0x08005ef9
 80058d0:	2000117c 	.word	0x2000117c
 80058d4:	20001178 	.word	0x20001178
 80058d8:	20001164 	.word	0x20001164
 80058dc:	2000115c 	.word	0x2000115c

080058e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20001180 	.word	0x20001180

080058fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <xTaskResumeAll+0x118>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <xTaskResumeAll+0x2c>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	603b      	str	r3, [r7, #0]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005928:	f001 f914 	bl	8006b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800592c:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <xTaskResumeAll+0x118>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <xTaskResumeAll+0x118>)
 8005934:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005936:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <xTaskResumeAll+0x118>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d162      	bne.n	8005a04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <xTaskResumeAll+0x11c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d05e      	beq.n	8005a04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005946:	e02f      	b.n	80059a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <xTaskResumeAll+0x120>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f871 	bl	8004a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f86c 	bl	8004a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <xTaskResumeAll+0x124>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <xTaskResumeAll+0x7c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <xTaskResumeAll+0x124>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <xTaskResumeAll+0x128>)
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fff7 	bl	8004982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <xTaskResumeAll+0x12c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059a2:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <xTaskResumeAll+0x130>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <xTaskResumeAll+0x120>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1cb      	bne.n	8005948 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059b6:	f000 fb55 	bl	8006064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <xTaskResumeAll+0x134>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059c6:	f000 f847 	bl	8005a58 <xTaskIncrementTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059d0:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <xTaskResumeAll+0x130>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3b01      	subs	r3, #1
 80059da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f1      	bne.n	80059c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <xTaskResumeAll+0x134>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <xTaskResumeAll+0x130>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059f0:	2301      	movs	r3, #1
 80059f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <xTaskResumeAll+0x138>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a04:	f001 f8d6 	bl	8006bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a08:	68bb      	ldr	r3, [r7, #8]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20001180 	.word	0x20001180
 8005a18:	20001158 	.word	0x20001158
 8005a1c:	20001118 	.word	0x20001118
 8005a20:	20001160 	.word	0x20001160
 8005a24:	20000c88 	.word	0x20000c88
 8005a28:	20000c84 	.word	0x20000c84
 8005a2c:	2000116c 	.word	0x2000116c
 8005a30:	20001168 	.word	0x20001168
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <xTaskGetTickCount+0x1c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a44:	687b      	ldr	r3, [r7, #4]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000115c 	.word	0x2000115c

08005a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a62:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <xTaskIncrementTick+0x148>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 808f 	bne.w	8005b8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <xTaskIncrementTick+0x14c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a74:	4a4b      	ldr	r2, [pc, #300]	; (8005ba4 <xTaskIncrementTick+0x14c>)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d120      	bne.n	8005ac2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a80:	4b49      	ldr	r3, [pc, #292]	; (8005ba8 <xTaskIncrementTick+0x150>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	603b      	str	r3, [r7, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <xTaskIncrementTick+0x46>
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <xTaskIncrementTick+0x150>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	4b41      	ldr	r3, [pc, #260]	; (8005bac <xTaskIncrementTick+0x154>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3f      	ldr	r2, [pc, #252]	; (8005ba8 <xTaskIncrementTick+0x150>)
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <xTaskIncrementTick+0x154>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <xTaskIncrementTick+0x158>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	4a3d      	ldr	r2, [pc, #244]	; (8005bb0 <xTaskIncrementTick+0x158>)
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	f000 fad1 	bl	8006064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ac2:	4b3c      	ldr	r3, [pc, #240]	; (8005bb4 <xTaskIncrementTick+0x15c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d349      	bcc.n	8005b60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <xTaskIncrementTick+0x150>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad6:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <xTaskIncrementTick+0x15c>)
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005adc:	601a      	str	r2, [r3, #0]
					break;
 8005ade:	e03f      	b.n	8005b60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae0:	4b31      	ldr	r3, [pc, #196]	; (8005ba8 <xTaskIncrementTick+0x150>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d203      	bcs.n	8005b00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005af8:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <xTaskIncrementTick+0x15c>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005afe:	e02f      	b.n	8005b60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe ff99 	bl	8004a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	3318      	adds	r3, #24
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe ff90 	bl	8004a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <xTaskIncrementTick+0x160>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d903      	bls.n	8005b30 <xTaskIncrementTick+0xd8>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <xTaskIncrementTick+0x160>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	; (8005bbc <xTaskIncrementTick+0x164>)
 8005b3e:	441a      	add	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7fe ff1b 	bl	8004982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <xTaskIncrementTick+0x168>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3b8      	bcc.n	8005acc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b5e:	e7b5      	b.n	8005acc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b60:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <xTaskIncrementTick+0x168>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4915      	ldr	r1, [pc, #84]	; (8005bbc <xTaskIncrementTick+0x164>)
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d901      	bls.n	8005b7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <xTaskIncrementTick+0x16c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e004      	b.n	8005b94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <xTaskIncrementTick+0x170>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a0d      	ldr	r2, [pc, #52]	; (8005bc8 <xTaskIncrementTick+0x170>)
 8005b92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b94:	697b      	ldr	r3, [r7, #20]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20001180 	.word	0x20001180
 8005ba4:	2000115c 	.word	0x2000115c
 8005ba8:	20001110 	.word	0x20001110
 8005bac:	20001114 	.word	0x20001114
 8005bb0:	20001170 	.word	0x20001170
 8005bb4:	20001178 	.word	0x20001178
 8005bb8:	20001160 	.word	0x20001160
 8005bbc:	20000c88 	.word	0x20000c88
 8005bc0:	20000c84 	.word	0x20000c84
 8005bc4:	2000116c 	.word	0x2000116c
 8005bc8:	20001168 	.word	0x20001168

08005bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bd2:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <vTaskSwitchContext+0xa8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bda:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <vTaskSwitchContext+0xac>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005be0:	e041      	b.n	8005c66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005be2:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <vTaskSwitchContext+0xac>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <vTaskSwitchContext+0xb0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e010      	b.n	8005c12 <vTaskSwitchContext+0x46>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <vTaskSwitchContext+0x40>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	607b      	str	r3, [r7, #4]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <vTaskSwitchContext+0x3e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	491b      	ldr	r1, [pc, #108]	; (8005c80 <vTaskSwitchContext+0xb4>)
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0e4      	beq.n	8005bf0 <vTaskSwitchContext+0x24>
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <vTaskSwitchContext+0xb4>)
 8005c32:	4413      	add	r3, r2
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	3308      	adds	r3, #8
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d104      	bne.n	8005c56 <vTaskSwitchContext+0x8a>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <vTaskSwitchContext+0xb8>)
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4a06      	ldr	r2, [pc, #24]	; (8005c7c <vTaskSwitchContext+0xb0>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6013      	str	r3, [r2, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20001180 	.word	0x20001180
 8005c78:	2000116c 	.word	0x2000116c
 8005c7c:	20001160 	.word	0x20001160
 8005c80:	20000c88 	.word	0x20000c88
 8005c84:	20000c84 	.word	0x20000c84

08005c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <vTaskPlaceOnEventList+0x44>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe fe87 	bl	80049ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	6838      	ldr	r0, [r7, #0]
 8005cc0:	f000 fa7c 	bl	80061bc <prvAddCurrentTaskToDelayedList>
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000c84 	.word	0x20000c84

08005cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	617b      	str	r3, [r7, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <vTaskPlaceOnEventListRestricted+0x54>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	4619      	mov	r1, r3
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7fe fe3e 	bl	8004982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	68b8      	ldr	r0, [r7, #8]
 8005d16:	f000 fa51 	bl	80061bc <prvAddCurrentTaskToDelayedList>
	}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000c84 	.word	0x20000c84

08005d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60fb      	str	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3318      	adds	r3, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fe6f 	bl	8004a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <xTaskRemoveFromEventList+0xb0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11d      	bne.n	8005da2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fe66 	bl	8004a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <xTaskRemoveFromEventList+0xb4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d903      	bls.n	8005d84 <xTaskRemoveFromEventList+0x5c>
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <xTaskRemoveFromEventList+0xb4>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <xTaskRemoveFromEventList+0xb8>)
 8005d92:	441a      	add	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe fdf1 	bl	8004982 <vListInsertEnd>
 8005da0:	e005      	b.n	8005dae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3318      	adds	r3, #24
 8005da6:	4619      	mov	r1, r3
 8005da8:	480e      	ldr	r0, [pc, #56]	; (8005de4 <xTaskRemoveFromEventList+0xbc>)
 8005daa:	f7fe fdea 	bl	8004982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <xTaskRemoveFromEventList+0xc0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d905      	bls.n	8005dc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <xTaskRemoveFromEventList+0xc4>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e001      	b.n	8005dcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dcc:	697b      	ldr	r3, [r7, #20]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001180 	.word	0x20001180
 8005ddc:	20001160 	.word	0x20001160
 8005de0:	20000c88 	.word	0x20000c88
 8005de4:	20001118 	.word	0x20001118
 8005de8:	20000c84 	.word	0x20000c84
 8005dec:	2000116c 	.word	0x2000116c

08005df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <vTaskInternalSetTimeOutState+0x24>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <vTaskInternalSetTimeOutState+0x28>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	605a      	str	r2, [r3, #4]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20001170 	.word	0x20001170
 8005e18:	2000115c 	.word	0x2000115c

08005e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	613b      	str	r3, [r7, #16]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e5e:	f000 fe79 	bl	8006b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e62:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <xTaskCheckForTimeOut+0xbc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7a:	d102      	bne.n	8005e82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e023      	b.n	8005eca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <xTaskCheckForTimeOut+0xc0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d007      	beq.n	8005e9e <xTaskCheckForTimeOut+0x82>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e015      	b.n	8005eca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d20b      	bcs.n	8005ec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff9b 	bl	8005df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e004      	b.n	8005eca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eca:	f000 fe73 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 8005ece:	69fb      	ldr	r3, [r7, #28]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2000115c 	.word	0x2000115c
 8005edc:	20001170 	.word	0x20001170

08005ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <vTaskMissedYield+0x14>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	2000116c 	.word	0x2000116c

08005ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f00:	f000 f852 	bl	8005fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <prvIdleTask+0x28>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d9f9      	bls.n	8005f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <prvIdleTask+0x2c>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f1c:	e7f0      	b.n	8005f00 <prvIdleTask+0x8>
 8005f1e:	bf00      	nop
 8005f20:	20000c88 	.word	0x20000c88
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f2e:	2300      	movs	r3, #0
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	e00c      	b.n	8005f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <prvInitialiseTaskLists+0x60>)
 8005f40:	4413      	add	r3, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fcf0 	bl	8004928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b37      	cmp	r3, #55	; 0x37
 8005f52:	d9ef      	bls.n	8005f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f54:	480d      	ldr	r0, [pc, #52]	; (8005f8c <prvInitialiseTaskLists+0x64>)
 8005f56:	f7fe fce7 	bl	8004928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f5a:	480d      	ldr	r0, [pc, #52]	; (8005f90 <prvInitialiseTaskLists+0x68>)
 8005f5c:	f7fe fce4 	bl	8004928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f60:	480c      	ldr	r0, [pc, #48]	; (8005f94 <prvInitialiseTaskLists+0x6c>)
 8005f62:	f7fe fce1 	bl	8004928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f66:	480c      	ldr	r0, [pc, #48]	; (8005f98 <prvInitialiseTaskLists+0x70>)
 8005f68:	f7fe fcde 	bl	8004928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f6c:	480b      	ldr	r0, [pc, #44]	; (8005f9c <prvInitialiseTaskLists+0x74>)
 8005f6e:	f7fe fcdb 	bl	8004928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <prvInitialiseTaskLists+0x78>)
 8005f74:	4a05      	ldr	r2, [pc, #20]	; (8005f8c <prvInitialiseTaskLists+0x64>)
 8005f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <prvInitialiseTaskLists+0x7c>)
 8005f7a:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <prvInitialiseTaskLists+0x68>)
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000c88 	.word	0x20000c88
 8005f8c:	200010e8 	.word	0x200010e8
 8005f90:	200010fc 	.word	0x200010fc
 8005f94:	20001118 	.word	0x20001118
 8005f98:	2000112c 	.word	0x2000112c
 8005f9c:	20001144 	.word	0x20001144
 8005fa0:	20001110 	.word	0x20001110
 8005fa4:	20001114 	.word	0x20001114

08005fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fae:	e019      	b.n	8005fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fb0:	f000 fdd0 	bl	8006b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <prvCheckTasksWaitingTermination+0x50>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fd3b 	bl	8004a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <prvCheckTasksWaitingTermination+0x54>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <prvCheckTasksWaitingTermination+0x54>)
 8005fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fda:	f000 fdeb 	bl	8006bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f810 	bl	8006004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e1      	bne.n	8005fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000112c 	.word	0x2000112c
 8005ffc:	20001158 	.word	0x20001158
 8006000:	20001140 	.word	0x20001140

08006004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006012:	2b00      	cmp	r3, #0
 8006014:	d108      	bne.n	8006028 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4618      	mov	r0, r3
 800601c:	f000 ff88 	bl	8006f30 <vPortFree>
				vPortFree( pxTCB );
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 ff85 	bl	8006f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006026:	e018      	b.n	800605a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800602e:	2b01      	cmp	r3, #1
 8006030:	d103      	bne.n	800603a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 ff7c 	bl	8006f30 <vPortFree>
	}
 8006038:	e00f      	b.n	800605a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006040:	2b02      	cmp	r3, #2
 8006042:	d00a      	beq.n	800605a <prvDeleteTCB+0x56>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <prvDeleteTCB+0x54>
	}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <prvResetNextTaskUnblockTime+0x38>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800607a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800607c:	e008      	b.n	8006090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <prvResetNextTaskUnblockTime+0x38>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <prvResetNextTaskUnblockTime+0x3c>)
 800608e:	6013      	str	r3, [r2, #0]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20001110 	.word	0x20001110
 80060a0:	20001178 	.word	0x20001178

080060a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <xTaskGetSchedulerState+0x34>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060b2:	2301      	movs	r3, #1
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	e008      	b.n	80060ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <xTaskGetSchedulerState+0x38>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060c0:	2302      	movs	r3, #2
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e001      	b.n	80060ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060ca:	687b      	ldr	r3, [r7, #4]
	}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20001164 	.word	0x20001164
 80060dc:	20001180 	.word	0x20001180

080060e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d056      	beq.n	80061a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060f6:	4b2e      	ldr	r3, [pc, #184]	; (80061b0 <xTaskPriorityDisinherit+0xd0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d00a      	beq.n	8006116 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60fb      	str	r3, [r7, #12]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60bb      	str	r3, [r7, #8]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	429a      	cmp	r2, r3
 8006148:	d02c      	beq.n	80061a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d128      	bne.n	80061a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fc70 	bl	8004a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <xTaskPriorityDisinherit+0xd4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <xTaskPriorityDisinherit+0xa4>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <xTaskPriorityDisinherit+0xd4>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <xTaskPriorityDisinherit+0xd8>)
 8006192:	441a      	add	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fbf1 	bl	8004982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061a4:	697b      	ldr	r3, [r7, #20]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000c84 	.word	0x20000c84
 80061b4:	20001160 	.word	0x20001160
 80061b8:	20000c88 	.word	0x20000c88

080061bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061c6:	4b21      	ldr	r3, [pc, #132]	; (800624c <prvAddCurrentTaskToDelayedList+0x90>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061cc:	4b20      	ldr	r3, [pc, #128]	; (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fc32 	bl	8004a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d10a      	bne.n	80061f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4819      	ldr	r0, [pc, #100]	; (8006254 <prvAddCurrentTaskToDelayedList+0x98>)
 80061f0:	f7fe fbc7 	bl	8004982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061f4:	e026      	b.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	429a      	cmp	r2, r3
 800620c:	d209      	bcs.n	8006222 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fbd5 	bl	80049ca <vListInsert>
}
 8006220:	e010      	b.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006222:	4b0e      	ldr	r3, [pc, #56]	; (800625c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe fbcb 	bl	80049ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d202      	bcs.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800623e:	4a08      	ldr	r2, [pc, #32]	; (8006260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	2000115c 	.word	0x2000115c
 8006250:	20000c84 	.word	0x20000c84
 8006254:	20001144 	.word	0x20001144
 8006258:	20001114 	.word	0x20001114
 800625c:	20001110 	.word	0x20001110
 8006260:	20001178 	.word	0x20001178

08006264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800626e:	f000 fb07 	bl	8006880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006272:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <xTimerCreateTimerTask+0x80>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d021      	beq.n	80062be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006282:	1d3a      	adds	r2, r7, #4
 8006284:	f107 0108 	add.w	r1, r7, #8
 8006288:	f107 030c 	add.w	r3, r7, #12
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe fb31 	bl	80048f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	9202      	str	r2, [sp, #8]
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	2302      	movs	r3, #2
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	460a      	mov	r2, r1
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <xTimerCreateTimerTask+0x84>)
 80062a6:	4811      	ldr	r0, [pc, #68]	; (80062ec <xTimerCreateTimerTask+0x88>)
 80062a8:	f7ff f8de 	bl	8005468 <xTaskCreateStatic>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <xTimerCreateTimerTask+0x8c>)
 80062b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <xTimerCreateTimerTask+0x8c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062ba:	2301      	movs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	613b      	str	r3, [r7, #16]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062da:	697b      	ldr	r3, [r7, #20]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200011b4 	.word	0x200011b4
 80062e8:	0800720c 	.word	0x0800720c
 80062ec:	08006429 	.word	0x08006429
 80062f0:	200011b8 	.word	0x200011b8

080062f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xTimerGenericCommand+0x2e>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	623b      	str	r3, [r7, #32]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006322:	4b1a      	ldr	r3, [pc, #104]	; (800638c <xTimerGenericCommand+0x98>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d02a      	beq.n	8006380 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b05      	cmp	r3, #5
 800633a:	dc18      	bgt.n	800636e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800633c:	f7ff feb2 	bl	80060a4 <xTaskGetSchedulerState>
 8006340:	4603      	mov	r3, r0
 8006342:	2b02      	cmp	r3, #2
 8006344:	d109      	bne.n	800635a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <xTimerGenericCommand+0x98>)
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f107 0110 	add.w	r1, r7, #16
 800634e:	2300      	movs	r3, #0
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	f7fe fca1 	bl	8004c98 <xQueueGenericSend>
 8006356:	6278      	str	r0, [r7, #36]	; 0x24
 8006358:	e012      	b.n	8006380 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <xTimerGenericCommand+0x98>)
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f107 0110 	add.w	r1, r7, #16
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	f7fe fc97 	bl	8004c98 <xQueueGenericSend>
 800636a:	6278      	str	r0, [r7, #36]	; 0x24
 800636c:	e008      	b.n	8006380 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <xTimerGenericCommand+0x98>)
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	f107 0110 	add.w	r1, r7, #16
 8006376:	2300      	movs	r3, #0
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	f7fe fd8b 	bl	8004e94 <xQueueGenericSendFromISR>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006382:	4618      	mov	r0, r3
 8006384:	3728      	adds	r7, #40	; 0x28
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200011b4 	.word	0x200011b4

08006390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639a:	4b22      	ldr	r3, [pc, #136]	; (8006424 <prvProcessExpiredTimer+0x94>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe fb47 	bl	8004a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d022      	beq.n	8006402 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	18d1      	adds	r1, r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f000 f8d1 	bl	8006570 <prvInsertTimerInActiveList>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01f      	beq.n	8006414 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d4:	2300      	movs	r3, #0
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	2100      	movs	r1, #0
 80063de:	6978      	ldr	r0, [r7, #20]
 80063e0:	f7ff ff88 	bl	80062f4 <xTimerGenericCommand>
 80063e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d113      	bne.n	8006414 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60fb      	str	r3, [r7, #12]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	6978      	ldr	r0, [r7, #20]
 800641a:	4798      	blx	r3
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	200011ac 	.word	0x200011ac

08006428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	4618      	mov	r0, r3
 8006436:	f000 f857 	bl	80064e8 <prvGetNextExpireTime>
 800643a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4619      	mov	r1, r3
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f803 	bl	800644c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006446:	f000 f8d5 	bl	80065f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800644a:	e7f1      	b.n	8006430 <prvTimerTask+0x8>

0800644c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006456:	f7ff fa43 	bl	80058e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f866 	bl	8006530 <prvSampleTimeNow>
 8006464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d130      	bne.n	80064ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <prvProcessTimerOrBlockTask+0x3c>
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	429a      	cmp	r2, r3
 8006478:	d806      	bhi.n	8006488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800647a:	f7ff fa3f 	bl	80058fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff85 	bl	8006390 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006486:	e024      	b.n	80064d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <prvProcessTimerOrBlockTask+0x90>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <prvProcessTimerOrBlockTask+0x50>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <prvProcessTimerOrBlockTask+0x52>
 800649c:	2300      	movs	r3, #0
 800649e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <prvProcessTimerOrBlockTask+0x94>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fe ffa7 	bl	8005400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064b2:	f7ff fa23 	bl	80058fc <xTaskResumeAll>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <prvProcessTimerOrBlockTask+0x98>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
}
 80064cc:	e001      	b.n	80064d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064ce:	f7ff fa15 	bl	80058fc <xTaskResumeAll>
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200011b0 	.word	0x200011b0
 80064e0:	200011b4 	.word	0x200011b4
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <prvGetNextExpireTime+0x44>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <prvGetNextExpireTime+0x16>
 80064fa:	2201      	movs	r2, #1
 80064fc:	e000      	b.n	8006500 <prvGetNextExpireTime+0x18>
 80064fe:	2200      	movs	r2, #0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800650c:	4b07      	ldr	r3, [pc, #28]	; (800652c <prvGetNextExpireTime+0x44>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e001      	b.n	800651c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800651c:	68fb      	ldr	r3, [r7, #12]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	200011ac 	.word	0x200011ac

08006530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006538:	f7ff fa7e 	bl	8005a38 <xTaskGetTickCount>
 800653c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <prvSampleTimeNow+0x3c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d205      	bcs.n	8006554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006548:	f000 f936 	bl	80067b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e002      	b.n	800655a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <prvSampleTimeNow+0x3c>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200011bc 	.word	0x200011bc

08006570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d812      	bhi.n	80065bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	1ad2      	subs	r2, r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d302      	bcc.n	80065aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e01b      	b.n	80065e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <prvInsertTimerInActiveList+0x7c>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe fa08 	bl	80049ca <vListInsert>
 80065ba:	e012      	b.n	80065e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d206      	bcs.n	80065d2 <prvInsertTimerInActiveList+0x62>
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e007      	b.n	80065e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <prvInsertTimerInActiveList+0x80>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fe f9f4 	bl	80049ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065e2:	697b      	ldr	r3, [r7, #20]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200011b0 	.word	0x200011b0
 80065f0:	200011ac 	.word	0x200011ac

080065f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08e      	sub	sp, #56	; 0x38
 80065f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065fa:	e0ca      	b.n	8006792 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da18      	bge.n	8006634 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	3304      	adds	r3, #4
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	61fb      	str	r3, [r7, #28]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662a:	6850      	ldr	r0, [r2, #4]
 800662c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662e:	6892      	ldr	r2, [r2, #8]
 8006630:	4611      	mov	r1, r2
 8006632:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f2c0 80ab 	blt.w	8006792 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe f9f5 	bl	8004a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006652:	463b      	mov	r3, r7
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff6b 	bl	8006530 <prvSampleTimeNow>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b09      	cmp	r3, #9
 8006660:	f200 8096 	bhi.w	8006790 <prvProcessReceivedCommands+0x19c>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <prvProcessReceivedCommands+0x78>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006695 	.word	0x08006695
 8006670:	08006695 	.word	0x08006695
 8006674:	08006695 	.word	0x08006695
 8006678:	08006709 	.word	0x08006709
 800667c:	0800671d 	.word	0x0800671d
 8006680:	08006767 	.word	0x08006767
 8006684:	08006695 	.word	0x08006695
 8006688:	08006695 	.word	0x08006695
 800668c:	08006709 	.word	0x08006709
 8006690:	0800671d 	.word	0x0800671d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	18d1      	adds	r1, r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b4:	f7ff ff5c 	bl	8006570 <prvInsertTimerInActiveList>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d069      	beq.n	8006792 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05e      	beq.n	8006792 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	441a      	add	r2, r3
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e6:	f7ff fe05 	bl	80062f4 <xTimerGenericCommand>
 80066ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d14f      	bne.n	8006792 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	61bb      	str	r3, [r7, #24]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800671a:	e03a      	b.n	8006792 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	617b      	str	r3, [r7, #20]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	18d1      	adds	r1, r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006760:	f7ff ff06 	bl	8006570 <prvInsertTimerInActiveList>
					break;
 8006764:	e015      	b.n	8006792 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006776:	f000 fbdb 	bl	8006f30 <vPortFree>
 800677a:	e00a      	b.n	8006792 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800678e:	e000      	b.n	8006792 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006790:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <prvProcessReceivedCommands+0x1c0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	1d39      	adds	r1, r7, #4
 8006798:	2200      	movs	r2, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc16 	bl	8004fcc <xQueueReceive>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f47f af2a 	bne.w	80065fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	3730      	adds	r7, #48	; 0x30
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200011b4 	.word	0x200011b4

080067b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067be:	e048      	b.n	8006852 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067c0:	4b2d      	ldr	r3, [pc, #180]	; (8006878 <prvSwitchTimerLists+0xc0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <prvSwitchTimerLists+0xc0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe f92f 	bl	8004a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02e      	beq.n	8006852 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90e      	bls.n	8006824 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006812:	4b19      	ldr	r3, [pc, #100]	; (8006878 <prvSwitchTimerLists+0xc0>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fe f8d4 	bl	80049ca <vListInsert>
 8006822:	e016      	b.n	8006852 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006824:	2300      	movs	r3, #0
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	2100      	movs	r1, #0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fd60 	bl	80062f4 <xTimerGenericCommand>
 8006834:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	603b      	str	r3, [r7, #0]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <prvSwitchTimerLists+0xc0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1b1      	bne.n	80067c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <prvSwitchTimerLists+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <prvSwitchTimerLists+0xc4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a04      	ldr	r2, [pc, #16]	; (8006878 <prvSwitchTimerLists+0xc0>)
 8006868:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800686a:	4a04      	ldr	r2, [pc, #16]	; (800687c <prvSwitchTimerLists+0xc4>)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	200011ac 	.word	0x200011ac
 800687c:	200011b0 	.word	0x200011b0

08006880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006886:	f000 f965 	bl	8006b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <prvCheckForValidListAndQueue+0x60>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d120      	bne.n	80068d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006892:	4814      	ldr	r0, [pc, #80]	; (80068e4 <prvCheckForValidListAndQueue+0x64>)
 8006894:	f7fe f848 	bl	8004928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006898:	4813      	ldr	r0, [pc, #76]	; (80068e8 <prvCheckForValidListAndQueue+0x68>)
 800689a:	f7fe f845 	bl	8004928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <prvCheckForValidListAndQueue+0x6c>)
 80068a0:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <prvCheckForValidListAndQueue+0x64>)
 80068a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068a4:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <prvCheckForValidListAndQueue+0x70>)
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <prvCheckForValidListAndQueue+0x68>)
 80068a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068aa:	2300      	movs	r3, #0
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <prvCheckForValidListAndQueue+0x74>)
 80068b0:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <prvCheckForValidListAndQueue+0x78>)
 80068b2:	2110      	movs	r1, #16
 80068b4:	200a      	movs	r0, #10
 80068b6:	f7fe f953 	bl	8004b60 <xQueueGenericCreateStatic>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4a08      	ldr	r2, [pc, #32]	; (80068e0 <prvCheckForValidListAndQueue+0x60>)
 80068be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <prvCheckForValidListAndQueue+0x60>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	490b      	ldr	r1, [pc, #44]	; (80068fc <prvCheckForValidListAndQueue+0x7c>)
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fd6c 	bl	80053ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068d4:	f000 f96e 	bl	8006bb4 <vPortExitCritical>
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200011b4 	.word	0x200011b4
 80068e4:	20001184 	.word	0x20001184
 80068e8:	20001198 	.word	0x20001198
 80068ec:	200011ac 	.word	0x200011ac
 80068f0:	200011b0 	.word	0x200011b0
 80068f4:	20001260 	.word	0x20001260
 80068f8:	200011c0 	.word	0x200011c0
 80068fc:	08007214 	.word	0x08007214

08006900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3b04      	subs	r3, #4
 8006910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b04      	subs	r3, #4
 800691e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 0201 	bic.w	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3b04      	subs	r3, #4
 800692e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006930:	4a0c      	ldr	r2, [pc, #48]	; (8006964 <pxPortInitialiseStack+0x64>)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3b14      	subs	r3, #20
 800693a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b04      	subs	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f06f 0202 	mvn.w	r2, #2
 800694e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3b20      	subs	r3, #32
 8006954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	08006969 	.word	0x08006969

08006968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <prvTaskExitError+0x54>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800697a:	d00a      	beq.n	8006992 <prvTaskExitError+0x2a>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <prvTaskExitError+0x28>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60bb      	str	r3, [r7, #8]
}
 80069a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069a6:	bf00      	nop
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0fc      	beq.n	80069a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	20000c84 	.word	0x20000c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069e8:	4808      	ldr	r0, [pc, #32]	; (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed08 	.word	0xe000ed08

08006a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a16:	4b46      	ldr	r3, [pc, #280]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a46      	ldr	r2, [pc, #280]	; (8006b34 <xPortStartScheduler+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10a      	bne.n	8006a36 <xPortStartScheduler+0x26>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <xPortStartScheduler+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10a      	bne.n	8006a56 <xPortStartScheduler+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a56:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <xPortStartScheduler+0x12c>)
 8006a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <xPortStartScheduler+0x130>)
 8006a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a7e:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a84:	e009      	b.n	8006a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d0ef      	beq.n	8006a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aa6:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f1c3 0307 	rsb	r3, r3, #7
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d00a      	beq.n	8006ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60bb      	str	r3, [r7, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ada:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <xPortStartScheduler+0x134>)
 8006adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <xPortStartScheduler+0x138>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <xPortStartScheduler+0x138>)
 8006aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006af2:	4b15      	ldr	r3, [pc, #84]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006afe:	f000 f8dd 	bl	8006cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b02:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <xPortStartScheduler+0x13c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b08:	f000 f8fc 	bl	8006d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b18:	f7ff ff66 	bl	80069e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b1c:	f7ff f856 	bl	8005bcc <vTaskSwitchContext>
	prvTaskExitError();
 8006b20:	f7ff ff22 	bl	8006968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed00 	.word	0xe000ed00
 8006b34:	410fc271 	.word	0x410fc271
 8006b38:	410fc270 	.word	0x410fc270
 8006b3c:	e000e400 	.word	0xe000e400
 8006b40:	200012b0 	.word	0x200012b0
 8006b44:	200012b4 	.word	0x200012b4
 8006b48:	e000ed20 	.word	0xe000ed20
 8006b4c:	2000000c 	.word	0x2000000c
 8006b50:	e000ef34 	.word	0xe000ef34

08006b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
}
 8006b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <vPortEnterCritical+0x58>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <vPortEnterCritical+0x58>)
 8006b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <vPortEnterCritical+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10f      	bne.n	8006ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <vPortEnterCritical+0x5c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <vPortEnterCritical+0x4a>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	2000000c 	.word	0x2000000c
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <vPortExitCritical+0x50>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vPortExitCritical+0x24>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	607b      	str	r3, [r7, #4]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <vPortExitCritical+0x50>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <vPortExitCritical+0x50>)
 8006be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <vPortExitCritical+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
}
 8006bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	2000000c 	.word	0x2000000c
	...

08006c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c10:	f3ef 8009 	mrs	r0, PSP
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <pxCurrentTCBConst>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f01e 0f10 	tst.w	lr, #16
 8006c20:	bf08      	it	eq
 8006c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	6010      	str	r0, [r2, #0]
 8006c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c34:	f380 8811 	msr	BASEPRI, r0
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f7fe ffc4 	bl	8005bcc <vTaskSwitchContext>
 8006c44:	f04f 0000 	mov.w	r0, #0
 8006c48:	f380 8811 	msr	BASEPRI, r0
 8006c4c:	bc09      	pop	{r0, r3}
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	f01e 0f10 	tst.w	lr, #16
 8006c5a:	bf08      	it	eq
 8006c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c60:	f380 8809 	msr	PSP, r0
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst>:
 8006c70:	20000c84 	.word	0x20000c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c92:	f7fe fee1 	bl	8005a58 <xTaskIncrementTick>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <xPortSysTickHandler+0x40>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f383 8811 	msr	BASEPRI, r3
}
 8006cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <vPortSetupTimerInterrupt+0x38>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <vPortSetupTimerInterrupt+0x3c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <vPortSetupTimerInterrupt+0x40>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	099b      	lsrs	r3, r3, #6
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <vPortSetupTimerInterrupt+0x44>)
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010
 8006cf4:	e000e018 	.word	0xe000e018
 8006cf8:	20000000 	.word	0x20000000
 8006cfc:	10624dd3 	.word	0x10624dd3
 8006d00:	e000e014 	.word	0xe000e014

08006d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d14 <vPortEnableVFP+0x10>
 8006d08:	6801      	ldr	r1, [r0, #0]
 8006d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d0e:	6001      	str	r1, [r0, #0]
 8006d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d12:	bf00      	nop
 8006d14:	e000ed88 	.word	0xe000ed88

08006d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d1e:	f3ef 8305 	mrs	r3, IPSR
 8006d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d914      	bls.n	8006d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d2a:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <vPortValidateInterruptPriority+0x70>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d34:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <vPortValidateInterruptPriority+0x74>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7afa      	ldrb	r2, [r7, #11]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20a      	bcs.n	8006d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <vPortValidateInterruptPriority+0x78>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortValidateInterruptPriority+0x7c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d90a      	bls.n	8006d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	603b      	str	r3, [r7, #0]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <vPortValidateInterruptPriority+0x60>
	}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	e000e3f0 	.word	0xe000e3f0
 8006d8c:	200012b0 	.word	0x200012b0
 8006d90:	e000ed0c 	.word	0xe000ed0c
 8006d94:	200012b4 	.word	0x200012b4

08006d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	; 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da4:	f7fe fd9c 	bl	80058e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006da8:	4b5b      	ldr	r3, [pc, #364]	; (8006f18 <pvPortMalloc+0x180>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db0:	f000 f920 	bl	8006ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db4:	4b59      	ldr	r3, [pc, #356]	; (8006f1c <pvPortMalloc+0x184>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8093 	bne.w	8006ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01d      	beq.n	8006e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d014      	beq.n	8006e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <pvPortMalloc+0x6c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06e      	beq.n	8006ee8 <pvPortMalloc+0x150>
 8006e0a:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <pvPortMalloc+0x188>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d869      	bhi.n	8006ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e14:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e18:	4b42      	ldr	r3, [pc, #264]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e1e:	e004      	b.n	8006e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d903      	bls.n	8006e3c <pvPortMalloc+0xa4>
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f1      	bne.n	8006e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e3c:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <pvPortMalloc+0x180>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d050      	beq.n	8006ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	2308      	movs	r3, #8
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d91f      	bls.n	8006ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <pvPortMalloc+0xf8>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	613b      	str	r3, [r7, #16]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea2:	69b8      	ldr	r0, [r7, #24]
 8006ea4:	f000 f908 	bl	80070b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <pvPortMalloc+0x188>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <pvPortMalloc+0x190>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d203      	bcs.n	8006eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <pvPortMalloc+0x188>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <pvPortMalloc+0x190>)
 8006ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <pvPortMalloc+0x184>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee8:	f7fe fd08 	bl	80058fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <pvPortMalloc+0x174>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <pvPortMalloc+0x172>
	return pvReturn;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20004ec0 	.word	0x20004ec0
 8006f1c:	20004ed4 	.word	0x20004ed4
 8006f20:	20004ec4 	.word	0x20004ec4
 8006f24:	20004eb8 	.word	0x20004eb8
 8006f28:	20004ec8 	.word	0x20004ec8
 8006f2c:	20004ecc 	.word	0x20004ecc

08006f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d04d      	beq.n	8006fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f42:	2308      	movs	r3, #8
 8006f44:	425b      	negs	r3, r3
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <vPortFree+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <vPortFree+0x44>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <vPortFree+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60bb      	str	r3, [r7, #8]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <vPortFree+0xb8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01e      	beq.n	8006fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11a      	bne.n	8006fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <vPortFree+0xb8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fb8:	f7fe fc92 	bl	80058e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <vPortFree+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <vPortFree+0xbc>)
 8006fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fca:	6938      	ldr	r0, [r7, #16]
 8006fcc:	f000 f874 	bl	80070b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <vPortFree+0xc0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vPortFree+0xc0>)
 8006fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fda:	f7fe fc8f 	bl	80058fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20004ed4 	.word	0x20004ed4
 8006fec:	20004ec4 	.word	0x20004ec4
 8006ff0:	20004ed0 	.word	0x20004ed0

08006ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <prvHeapInit+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <prvHeapInit+0xac>)
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <prvHeapInit+0xb0>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007032:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <prvHeapInit+0xb0>)
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007040:	2208      	movs	r2, #8
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <prvHeapInit+0xb4>)
 8007054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvHeapInit+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <prvHeapInit+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvHeapInit+0xb4>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <prvHeapInit+0xb8>)
 8007082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <prvHeapInit+0xbc>)
 800708a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <prvHeapInit+0xc0>)
 800708e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	200012b8 	.word	0x200012b8
 80070a4:	20004eb8 	.word	0x20004eb8
 80070a8:	20004ec0 	.word	0x20004ec0
 80070ac:	20004ec8 	.word	0x20004ec8
 80070b0:	20004ec4 	.word	0x20004ec4
 80070b4:	20004ed4 	.word	0x20004ed4

080070b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <prvInsertBlockIntoFreeList+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e002      	b.n	80070cc <prvInsertBlockIntoFreeList+0x14>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d8f7      	bhi.n	80070c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d108      	bne.n	80070fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d118      	bne.n	8007140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d00d      	beq.n	8007136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e008      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e003      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d002      	beq.n	8007156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20004eb8 	.word	0x20004eb8
 8007168:	20004ec0 	.word	0x20004ec0

0800716c <memset>:
 800716c:	4402      	add	r2, r0
 800716e:	4603      	mov	r3, r0
 8007170:	4293      	cmp	r3, r2
 8007172:	d100      	bne.n	8007176 <memset+0xa>
 8007174:	4770      	bx	lr
 8007176:	f803 1b01 	strb.w	r1, [r3], #1
 800717a:	e7f9      	b.n	8007170 <memset+0x4>

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f000 f826 	bl	80071e0 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	08007260 	.word	0x08007260
 80071b8:	08007260 	.word	0x08007260
 80071bc:	08007260 	.word	0x08007260
 80071c0:	08007264 	.word	0x08007264

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	4770      	bx	lr
 80071d0:	b510      	push	{r4, lr}
 80071d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071da:	4291      	cmp	r1, r2
 80071dc:	d1f9      	bne.n	80071d2 <memcpy+0xe>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <_init>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr

080071ec <_fini>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr
